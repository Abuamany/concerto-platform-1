[{"class_name":"Test","id":187,"name":"merge_lists","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":0,"code":"merged_list = list()\n\nif(is.list(list1)) {\n  for(key in ls(list1)) {\n    merged_list[[key]] = list1[[key]]\n  }\n}\n\nif(is.list(list2)) {\n  for(key in ls(list2)) {\n    merged_list[[key]] = list2[[key]]\n  }\n}\n\nif(is.list(list3)) {\n  for(key in ls(list3)) {\n    merged_list[[key]] = list3[[key]]\n  }\n}\n\nif(is.list(list4)) {\n  for(key in ls(list4)) {\n    merged_list[[key]] = list4[[key]]\n  }\n}\n\nif(is.list(list5)) {\n  for(key in ls(list5)) {\n    merged_list[[key]] = list5[[key]]\n  }\n}","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":1035,"name":"out","type":2,"description":"","passableThroughUrl":"0","value":"0","test":187,"parentVariable":null,"globalId":1035},{"class_name":"TestVariable","id":1036,"name":"merged_list","type":1,"description":"","passableThroughUrl":"0","value":null,"test":187,"parentVariable":null,"globalId":1036},{"class_name":"TestVariable","id":1037,"name":"list1","type":0,"description":"","passableThroughUrl":"0","value":null,"test":187,"parentVariable":null,"globalId":1037},{"class_name":"TestVariable","id":1038,"name":"list2","type":0,"description":"","passableThroughUrl":"0","value":null,"test":187,"parentVariable":null,"globalId":1038},{"class_name":"TestVariable","id":1039,"name":"list3","type":0,"description":"","passableThroughUrl":"0","value":null,"test":187,"parentVariable":null,"globalId":1039},{"class_name":"TestVariable","id":1040,"name":"list4","type":0,"description":"","passableThroughUrl":"0","value":null,"test":187,"parentVariable":null,"globalId":1040},{"class_name":"TestVariable","id":1041,"name":"list5","type":0,"description":"","passableThroughUrl":"0","value":null,"test":187,"parentVariable":null,"globalId":1041}],"sourceWizard":null,"sourceWizardObject":null,"updatedOn":"2016-03-22 19:35:23","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"_concerto_core","globalId":187,"owner":1,"groups":""},{"class_name":"Test","id":190,"name":"linear_test","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":1,"code":"decoded_template_def = fromJSON(template_def)\n\ngetQuestions = function(){\n  questions = NULL\n  ib = fromJSON(item_bank)\n  if(ib$table_type == \"default\" || ib$table_type == \"custom\") {\n    table = \"default_linear_item_table\"\n    question_column = \"question\"\n    response_options_column = \"response_options\"\n    correct_column = \"correct\"\n    trait_column = \"trait\"\n    order_column = \"order\"\n    test_id_column = \"test_id\"\n    test_id = concerto$mainTest$id\n    if(ib$table_type == \"custom\") {\n      table = ib$custom_table\n      question_column = ib$custom_question_column$column\n      response_options_column = ib$custom_response_options_column$column\n      correct_column = ib$custom_correct_column$column\n      trait_column = ib$custom_trait_column$column\n      order_column = ib$custom_order_column$column\n      test_id_column = ib$custom_test_id_column$column\n    }\n\n    questions = concerto.table.query(\"SELECT id, `{{question_column}}` AS `question`, `{{response_options_column}}` AS `response_options`, `{{correct_column}}` AS `correct`, `{{trait_column}}` AS `trait` FROM `{{table}}` WHERE `{{test_id_column}}` = {{test_id}} ORDER BY `{{order_column}}` ASC\", list(\n      question_column=question_column,\n      response_options_column=response_options_column,\n      trait_column=trait_column,\n      order_column=order_column,\n      correct_column=correct_column,\n      table=table,\n      test_id_column=test_id_column,\n      test_id=test_id\n    ))\n  }\n  if(ib$table_type == \"direct\") {\n    if(length(ib$direct_table) > 0) {\n      for(i in 1:length(ib$direct_table)) {\n        questions = rbind(questions, as.list(ib$direct_table[[i]]))\n      }\n    }\n  }\n\n  if(dim(questions)[1] > 0 && order == \"random\") {\n    questions = questions[sample(1:dim(questions)[1]),]\n  }\n\n  return(questions)\n}\n\ngetContent = function(question, current_item, answers) {\n  content = paragraph\n\n  content = paste0(content, \"<div class='formField'>\")\n  content = paste0(content, question$question)\n  content = paste0(content, getResponseOptions(question, current_item, answers))\n  content = paste0(content, \"<\/div>\")\n\n  return(content)\n}\n\ngetResponseOptions = function(question, current_item, answers) {\n  content = \"\"\n  options = NULL\n  o = question$response_options\n  if(is.character(o)) { o = fromJSON(o) }\n\n  if(length(o) > 0) {\n    #response options\n    for(i in 1:length(o)) {\n      options = rbind(options, as.list(o[[i]]))\n    }\n\n    if(randomized_response_options == \"1\") {\n      if(dim(options)[1] > 0) {\n        options = options[sample(1:dim(options)[1]),]\n      }\n    }\n    \n    content = \"<div class='catResponseGroup'>\"\n    section_class = \"catResponseSectionVertical\"\n    section_styles = \"\"\n    if(responses_layout == \"horizontal\") { \n      section_class = \"catResponseSectionHorizontal\" \n      section_styles = paste0(\"width: \",response_width)\n    }\n    \n    for(i in 1:dim(options)[1]) {\n      option = options[i,]\n      checked = \"\"\n      if(!is.null(answers[current_item]) && !is.na(answers[current_item]) && answers[current_item] == option$value) { checked = \"checked\" }\n      content = paste0(content, \"<div class='\",section_class,\"' style='\",section_styles,\"'><label for='input_response_\",i,\"'><table class='catResponseTable'><tr>\")\n      content = paste0(content, \"<td class='catResponseButtonCell'><input type='radio' id='input_response_\",i,\"' name='response' value='\",option$value,\"' \",checked,\" \/><\/td>\")\n      content = paste0(content, \"<td class='catResponseLabelCell'>\",option$label,\"<\/td>\")\n      content = paste0(content, \"<\/tr><\/table><\/label><\/div>\")\n    }\n    content = paste0(content, \"<div style='clear:both;'><\/div>\")\n    content = paste0(content, \"<\/div>\")\n  } else {\n    #open question\n    value = \"\"\n    if(!is.null(answers[current_item]) && !is.na(answers[current_item])) { value = answers[current_item] }\n    content = paste0(\"<div><input type='text' name='response' style='width:100%;' value='\",value,\"' \/><\/div>\")\n  }\n  return(content)\n}\n\nshouldStop = function(response, answers, questions, current_item, next_item) {\n  sr_time = fromJSON(stopping_time)\n  if(!is.null(sr_time$type) && sr_time$type == \"test\" && response$isTimeout == \"1\") { return(TRUE) }\n\n  sr_count = fromJSON(stopping_item_count)\n\n  if((sr_count$enabled == \"1\" && current_item >= as.numeric(sr_count$count)) || next_item > dim(questions)[1]) { return(TRUE) }\n  return(FALSE)\n}\n\nsaveResponse = function(response, question, rb, correct, scores, correctness, current_item) {\n  if(is.null(response$response)) { return(scores) }\n\n  table = \"default_linear_response_table\"\n  item_id_column = \"item_id\"\n  response_column = \"response\"\n  time_taken_column = \"time_taken\"\n  session_id_column = \"session_id\"\n  correct_column = \"correct\"\n  trait_column = \"trait\"\n  if(rb$table_type == \"custom\") {\n    table = rb$custom_table\n    item_id_column = rb$custom_item_id_column$column\n    response_column = rb$custom_response_column$column\n    time_taken_column = rb$custom_time_taken_column$column\n    session_id_column = rb$custom_session_id_column$column\n    correct_column = rb$custom_correct_column$column\n    trait_column = rb$custom_trait_column$column\n  }\n  session_id = 0\n  if(is.list(session)) { \n    session_id = session$id\n  }\n\n  r = concerto.table.query(\"SELECT `id` FROM `{{table}}` WHERE `{{item_id_column}}`={{item_id}} AND `{{session_id_column}}`={{session_id}}\", list(\n    table=table,\n    session_id_column=session_id_column,\n    session_id=session_id,\n    item_id_column=item_id_column,\n    item_id=question$id\n  ))\n  if(dim(r)[1] > 0) { \n    rid = r[1,\"id\"]\n    concerto.table.query(\"UPDATE `{{table}}` SET `{{response_column}}`='{{response}}', `{{time_taken_column}}`={{time_taken}}, `{{correct_column}}`={{correct}} WHERE `id`={{id}}\", list(\n      table=table,\n      session_id_column=session_id_column,\n      session_id=session_id,\n      item_id_column=item_id_column,\n      item_id=question$id,\n      response_column=response_column,\n      response=response$response,\n      time_taken_column=time_taken_column,\n      time_taken=response$timeTaken,\n      correct_column=correct_column,\n      correct=correct,\n      trait_column=trait_column,\n      trait=question$trait,\n      id=rid\n    ))\n  } else {\n    concerto.table.query(\"INSERT INTO `{{table}}` SET `{{item_id_column}}`={{item_id}}, `{{response_column}}`='{{response}}', `{{time_taken_column}}`={{time_taken}}, `{{session_id_column}}`={{session_id}}, `{{correct_column}}`={{correct}}, `{{trait_column}}`='{{trait}}'\", list(\n      table=table,\n      session_id_column=session_id_column,\n      session_id=session_id,\n      item_id_column=item_id_column,\n      item_id=question$id,\n      response_column=response_column,\n      response=response$response,\n      time_taken_column=time_taken_column,\n      time_taken=response$timeTaken,\n      correct_column=correct_column,\n      correct=correct,\n      trait_column=trait_column,\n      trait=question$trait\n    ))\n  }\n\n  if(is.null(scores[[question$trait]])) {\n    scores[[question$trait]] = 0\n  }\n\n  if(!is.null(correctness[current_item]) && !is.na(correctness[current_item])) { \n    prev_correct = correctness[current_item] \n    scores[[question$trait]] = scores[[question$trait]] - prev_correct\n  }\n\n  scores[[question$trait]] = scores[[question$trait]] + correct\n  return(scores)\n}\n\ngetTemplateParams = function(template_params){\n  params = list()\n  if(!is.null(inserts) && is.list(inserts)) {\n    params = inserts\n  }\n  for(key in ls(template_params)) {\n    params[[key]] = template_params[[key]]\n  }\n  return(params)\n}\n\ngetNextDebugItem = function(response, questions) {\n  for(i in 1:dim(questions)[1]) {\n    question = questions[i,]\n    if(question$id == response$item_debug) {\n      return(i)\n    }\n  }\n  return(NULL)\n}\n\ngetDebugContent = function(content, question) {\n  debug = \"<div class='debug'>\"\n  debug = paste0(debug, \"<p>Current item id: #\",question$id,\"<\/p>\") \n  debug = paste0(debug, \"<p>Next item id: <input type='text' name='item_debug' \/><\/p>\")\n  debug = paste0(debug, \"<\/div>\")\n  content = paste0(debug, content)\n  return(content)\n}\n\nquestions = getQuestions()\nrb = fromJSON(response_bank)\nanswers = NULL\nresponse = NULL\nwarning_msg = NULL\ntimer_set = FALSE\ntime_limit = 0\nsr_time = fromJSON(stopping_time)\nif(!is.null(sr_time$type) && (sr_time$type == \"test\" || sr_time$type == \"item\")) { \n  time_limit = as.numeric(sr_time$time_limit) \n}\nif(time_limit > 0) { timer_set = TRUE }\nscores = list()\ncorrectness = NULL\nmax_items = dim(questions)[1]\nsr_item_count = fromJSON(stopping_item_count)\nif(sr_item_count$enabled == \"1\") { max_items = min(max_items, as.numeric(sr_item_count$count)) }\n\ncurrent_item = 1\nwhile(T) {\n  buttons = \"<div class='button_panel button_panel_linear'>\"\n  if(current_item > 1 && can_go_back == \"1\" && item_debug == \"0\") {\n    buttons = paste0(buttons, \"<button name='previous' class='linear_test_button'>\",previous_button_label,\"<\/button>\")\n  }\n  if(dim(questions)[1] > 1 && item_debug == \"0\") {\n    buttons = paste0(buttons, current_item,\"\/\",max_items)\n  }\n  if(current_item <= dim(questions)[1] || item_debug == \"1\") {\n    buttons = paste0(buttons, \"<button name='next' class='linear_test_button'>\",next_button_label,\"<\/button>\")\n  }\n  buttons = paste0(buttons,'<\/div>')\n\n  question = questions[current_item,]\n  content = getContent(question, current_item, answers)\n\n  if(item_debug == \"0\") {\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )), timeLimit=time_limit)\n    warning_msg = NULL\n\n    if(timer_set) {\n      time_limit = time_limit - as.numeric(response$timeTaken)\n    }\n\n    if(!is.null(response$response) || response$isTimeout == \"1\") {\n      correct = 0\n      if(is.null(response$response)) { response$response = \"\" }\n      if(response$response == question$correct) { correct = 1 }\n      scores = saveResponse(response, question, rb, correct, scores, correctness, current_item)\n      if(length(answers) < current_item) {\n        answers = c(answers, response$response)\n        correctness = c(correctness, correct)\n      } else {\n        answers[current_item] = response$response\n        correctness[current_item] = correct\n      }\n    }\n\n    prev_item = current_item\n    if(response$buttonPressed == \"next\" || response$isTimeout == \"1\") {\n      if(response_required == \"0\" || (!is.null(response$response) && response$response != \"\") || response$isTimeout == \"1\") {\n        current_item = current_item + 1\n        if(timer_set && sr_time$type == \"item\"){\n          time_limit = as.numeric(sr_time$time_limit) \n        }\n      } else {\n        warning_msg = no_response_alert\n      }\n    }\n    if(response$buttonPressed == \"previous\") {\n      current_item = current_item - 1\n      if(timer_set && sr_time$type == \"item\"){\n        time_limit = as.numeric(sr_time$time_limit) \n      }\n    }\n\n    if(shouldStop(response, answers, questions, prev_item, current_item)) {\n      if(response$isTimeout == \"1\") {\n        .branch = \"out_of_time\"\n      }\n      break\n    }\n  } else {\n    content = getDebugContent(content, question)\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )))\n    current_item = getNextDebugItem(response, questions)\n    if(is.null(current_item)) {\n      warning_msg = paste0(\"Item id \",response$item_debug,\" not found!\")\n      current_item = 1\n    }\n  }\n}\nrm(questions)","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":1070,"name":"answered","type":2,"description":"","passableThroughUrl":"0","value":"0","test":190,"parentVariable":1042,"globalId":1070},{"class_name":"TestVariable","id":1073,"name":"paragraph","type":0,"description":"","passableThroughUrl":"0","value":"<p>Please answer question below:<\/p>\n","test":190,"parentVariable":1045,"globalId":1073},{"class_name":"TestVariable","id":1074,"name":"next_button_label","type":0,"description":"","passableThroughUrl":"0","value":"next","test":190,"parentVariable":1046,"globalId":1074},{"class_name":"TestVariable","id":1075,"name":"previous_button_label","type":0,"description":"","passableThroughUrl":"0","value":"previous","test":190,"parentVariable":1047,"globalId":1075},{"class_name":"TestVariable","id":1076,"name":"item_bank","type":0,"description":"","passableThroughUrl":"0","value":"{\"table_type\":\"direct\",\"direct_table\":[],\"custom_table\":\"\",\"custom_question_column\":{},\"custom_order_column\":{},\"custom_response_options\":{},\"custom_correct_column\":{},\"custom_trait_column\":{},\"custom_test_id_column\":{}}","test":190,"parentVariable":1048,"globalId":1076},{"class_name":"TestVariable","id":1077,"name":"response_bank","type":0,"description":"","passableThroughUrl":"0","value":"{\"table_type\":\"default\",\"custom_table\":\"\",\"custom_item_id_column\":{},\"custom_response_column\":{},\"custom_trait_column\":{},\"custom_correct_column\":{},\"custom_session_id_column\":{},\"custom_time_taken_column\":{}}","test":190,"parentVariable":1049,"globalId":1077},{"class_name":"TestVariable","id":1078,"name":"stopping_time","type":0,"description":"","passableThroughUrl":"0","value":"{\"enabled\":\"0\",\"time_limit\":\"\",\"type\":null}","test":190,"parentVariable":1050,"globalId":1078},{"class_name":"TestVariable","id":1079,"name":"stopping_item_count","type":0,"description":"","passableThroughUrl":"0","value":"{\"enabled\":\"0\",\"count\":\"\"}","test":190,"parentVariable":1051,"globalId":1079},{"class_name":"TestVariable","id":1080,"name":"randomized_response_options","type":0,"description":"","passableThroughUrl":"0","value":"1","test":190,"parentVariable":1052,"globalId":1080},{"class_name":"TestVariable","id":1081,"name":"order","type":0,"description":"","passableThroughUrl":"0","value":"random","test":190,"parentVariable":1053,"globalId":1081},{"class_name":"TestVariable","id":1082,"name":"session","type":0,"description":"","passableThroughUrl":"0","value":null,"test":190,"parentVariable":1054,"globalId":1082},{"class_name":"TestVariable","id":1083,"name":"inserts","type":0,"description":"","passableThroughUrl":"0","value":null,"test":190,"parentVariable":1055,"globalId":1083},{"class_name":"TestVariable","id":1084,"name":"response_required","type":0,"description":"","passableThroughUrl":"0","value":"0","test":190,"parentVariable":1056,"globalId":1084},{"class_name":"TestVariable","id":1085,"name":"no_response_alert","type":0,"description":"","passableThroughUrl":"0","value":null,"test":190,"parentVariable":1057,"globalId":1085},{"class_name":"TestVariable","id":1086,"name":"scores","type":1,"description":"","passableThroughUrl":"0","value":null,"test":190,"parentVariable":1058,"globalId":1086},{"class_name":"TestVariable","id":1087,"name":"can_go_back","type":0,"description":"","passableThroughUrl":"0","value":"1","test":190,"parentVariable":1059,"globalId":1087},{"class_name":"TestVariable","id":1088,"name":"item_debug","type":0,"description":"<p><span style=\"line-height: 20.8px;\">1 to turn item debug mode on. 0 to turn it off. Item debug mode let&#39;s you specify which item you want to&nbsp;view from your item bank.<\/span><\/p>\n","passableThroughUrl":"0","value":"0","test":190,"parentVariable":1060,"globalId":1088},{"class_name":"TestVariable","id":1089,"name":"out_of_time","type":2,"description":"","passableThroughUrl":"0","value":null,"test":190,"parentVariable":1061,"globalId":1089},{"class_name":"TestVariable","id":1211,"name":"title","type":0,"description":"","passableThroughUrl":"0","value":"DEMO TEST","test":190,"parentVariable":1210,"globalId":1211},{"class_name":"TestVariable","id":1261,"name":"template_def","type":0,"description":"","passableThroughUrl":"0","value":"{\"layout\":\"default_layout\", \"header\":\"<p>Welcome.<\/p>\",\"footer\":\"\"}","test":190,"parentVariable":1260,"globalId":1261},{"class_name":"TestVariable","id":1263,"name":"template_def","type":1,"description":"","passableThroughUrl":"0","value":null,"test":190,"parentVariable":1262,"globalId":1263},{"class_name":"TestVariable","id":1265,"name":"session","type":1,"description":"","passableThroughUrl":"0","value":null,"test":190,"parentVariable":1264,"globalId":1265},{"class_name":"TestVariable","id":1275,"name":"responses_layout","type":0,"description":"","passableThroughUrl":"0","value":"vertical","test":190,"parentVariable":1274,"globalId":1275},{"class_name":"TestVariable","id":1277,"name":"response_width","type":0,"description":"","passableThroughUrl":"0","value":null,"test":190,"parentVariable":1276,"globalId":1277}],"sourceWizard":40,"sourceWizardObject":{"class_name":"TestWizard","id":40,"name":"linear_test","description":"","accessibility":0,"protected":"1","archived":"0","steps":[{"class_name":"TestWizardStep","id":74,"title":"Presentation","description":"<p>Linear test presentation<\/p>\n","orderNum":0,"colsNum":0,"wizard":40,"params":[{"class_name":"TestWizardParam","id":305,"label":"Paragraph","description":"","hideCondition":"","type":2,"passableThroughUrl":"0","value":"<p>Please answer question below:<\/p>\n","testVariable":1045,"name":"paragraph","wizardStep":74,"stepTitle":"Presentation","order":2,"wizard":40,"definition":{"placeholder":"0"},"globalId":305},{"class_name":"TestWizardParam","id":394,"label":"Title","description":"","hideCondition":"","type":0,"passableThroughUrl":"0","value":"DEMO TEST","testVariable":1210,"name":"title","wizardStep":74,"stepTitle":"Presentation","order":1,"wizard":40,"definition":{"placeholder":0},"globalId":394},{"class_name":"TestWizardParam","id":401,"label":"Responses layout","description":"","hideCondition":"","type":3,"passableThroughUrl":"0","value":"vertical","testVariable":1274,"name":"responses_layout","wizardStep":74,"stepTitle":"Presentation","order":3,"wizard":40,"definition":{"placeholder":0,"options":[{"value":"horizontal","label":"Horizontal","order":0},{"value":"vertical","label":"Vertical","order":1}]},"globalId":401},{"class_name":"TestWizardParam","id":402,"label":"Response width","description":"<p>Can be any valid CSS width property value. E.g.:&nbsp;<strong>200px<\/strong>,&nbsp;<strong>20%<\/strong>.<\/p>\n","hideCondition":"values.responses_layout != \"horizontal\"","type":0,"passableThroughUrl":"0","value":"","testVariable":1276,"name":"response_width","wizardStep":74,"stepTitle":"Presentation","order":4,"wizard":40,"definition":{"placeholder":0},"globalId":402}],"globalId":74},{"class_name":"TestWizardStep","id":75,"title":"Items and navigation","description":"<p>Item bank definition<\/p>\n","orderNum":1,"colsNum":0,"wizard":40,"params":[{"class_name":"TestWizardParam","id":306,"label":"Order","description":"","hideCondition":"","type":3,"passableThroughUrl":"0","value":"random","testVariable":1053,"name":"order","wizardStep":75,"stepTitle":"Items and navigation","order":1,"wizard":40,"definition":{"placeholder":"0","options":[{"value":"manual","label":"manual"},{"value":"random","label":"random"}]},"globalId":306},{"class_name":"TestWizardParam","id":307,"label":"Item bank","description":"<p>For open question leave item response options list empty.<\/p>\n","hideCondition":"","type":9,"passableThroughUrl":"0","value":"{\"table_type\":\"direct\",\"direct_table\":[],\"custom_table\":\"\",\"custom_question_column\":{},\"custom_order_column\":{},\"custom_response_options\":{},\"custom_correct_column\":{},\"custom_trait_column\":{},\"custom_test_id_column\":{}}","testVariable":1048,"name":"item_bank","wizardStep":75,"stepTitle":"Items and navigation","order":0,"wizard":40,"definition":{"placeholder":"0","fields":[{"type":"3","name":"table_type","label":"Table type","definition":{"placeholder":"0","options":[{"value":"default","label":"default"},{"value":"direct","label":"direct"},{"value":"custom","label":"custom"}]}},{"type":"10","name":"direct_table","label":"Table","definition":{"placeholder":"0","element":{"type":9,"definition":{"placeholder":"0","fields":[{"type":"0","name":"id","label":"Id","definition":[]},{"type":"2","name":"question","label":"Question","definition":{"placeholder":"0"}},{"type":"0","name":"order","label":"Order","definition":{"placeholder":0}},{"type":"10","name":"response_options","label":"Response options","definition":{"placeholder":0,"element":{"type":9,"definition":{"placeholder":0,"fields":[{"type":0,"name":"value","label":"Value","definition":{"placeholder":0}},{"type":0,"name":"label","label":"Label","definition":{"placeholder":0}}]}}}},{"type":"0","name":"correct","label":"Correct answer","definition":[]},{"type":"0","name":"trait","label":"Trait","definition":[]}]}}},"hideCondition":"parent.table_type != \"direct\""},{"type":"6","name":"custom_table","label":"Custom table","definition":{"placeholder":"0"},"hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_question_column","label":"Custom question column","definition":{"placeholder":"0"},"hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_order_column","label":"Custom order column","definition":{"placeholder":0},"hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_response_options","label":"Custom response options column","definition":{"placeholder":"0"},"hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_correct_column","label":"Custom correct answer column","definition":{"placeholder":"0"},"hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_trait_column","label":"Custom trait column","definition":{"placeholder":"0"},"hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_test_id_column","label":"Custom test id column","definition":{"placeholder":"0"},"hideCondition":"parent.table_type != \"custom\""}]},"globalId":307},{"class_name":"TestWizardParam","id":308,"label":"Randomize response options","description":"","hideCondition":"","type":4,"passableThroughUrl":"0","value":"1","testVariable":1052,"name":"randomized_response_options","wizardStep":75,"stepTitle":"Items and navigation","order":2,"wizard":40,"definition":{"placeholder":"0"},"globalId":308},{"class_name":"TestWizardParam","id":309,"label":"Can go back?","description":"","hideCondition":"","type":4,"passableThroughUrl":"0","value":"1","testVariable":1059,"name":"can_go_back","wizardStep":75,"stepTitle":"Items and navigation","order":3,"wizard":40,"definition":{"placeholder":"0"},"globalId":309},{"class_name":"TestWizardParam","id":310,"label":"Next button label","description":"","hideCondition":"","type":0,"passableThroughUrl":"0","value":"next","testVariable":1046,"name":"next_button_label","wizardStep":75,"stepTitle":"Items and navigation","order":4,"wizard":40,"definition":{"placeholder":"0"},"globalId":310},{"class_name":"TestWizardParam","id":311,"label":"Previous button label","description":"","hideCondition":"","type":0,"passableThroughUrl":"0","value":"previous","testVariable":1047,"name":"previous_button_label","wizardStep":75,"stepTitle":"Items and navigation","order":5,"wizard":40,"definition":{"placeholder":"0"},"globalId":311}],"globalId":75},{"class_name":"TestWizardStep","id":76,"title":"Stopping rules","description":"","orderNum":2,"colsNum":0,"wizard":40,"params":[{"class_name":"TestWizardParam","id":312,"label":"Time-based stopping rule","description":"","hideCondition":"","type":9,"passableThroughUrl":"0","value":"{\"enabled\":\"0\",\"time_limit\":\"\",\"type\":null}","testVariable":1050,"name":"stopping_time","wizardStep":76,"stepTitle":"Stopping rules","order":1,"wizard":40,"definition":{"placeholder":"0","fields":[{"type":3,"name":"type","label":"Type","definition":{"placeholder":0,"options":[{"value":"test","label":"test wide","order":"1"},{"value":"item","label":"item","order":"0"}]}},{"type":0,"name":"time_limit","label":"Time limit (seconds)","definition":{"placeholder":0},"hideCondition":"!parent.type"}]},"globalId":312},{"class_name":"TestWizardParam","id":313,"label":"Item count-based stopping rule","description":"","hideCondition":"","type":9,"passableThroughUrl":"0","value":"{\"enabled\":\"0\",\"count\":\"\"}","testVariable":1051,"name":"stopping_item_count","wizardStep":76,"stepTitle":"Stopping rules","order":0,"wizard":40,"definition":{"placeholder":"0","fields":[{"type":"4","name":"enabled","label":"Enabled","definition":{"placeholder":"0"}},{"type":"0","name":"count","label":"Max item count","hideCondition":"parent.enabled != \"1\""}]},"globalId":313}],"globalId":76},{"class_name":"TestWizardStep","id":77,"title":"Response bank","description":"","orderNum":3,"colsNum":0,"wizard":40,"params":[{"class_name":"TestWizardParam","id":314,"label":"Response bank","description":"","hideCondition":"","type":9,"passableThroughUrl":"0","value":"{\"table_type\":\"default\",\"custom_table\":\"\",\"custom_item_id_column\":{},\"custom_response_column\":{},\"custom_trait_column\":{},\"custom_correct_column\":{},\"custom_session_id_column\":{},\"custom_time_taken_column\":{}}","testVariable":1049,"name":"response_bank","wizardStep":77,"stepTitle":"Response bank","order":0,"wizard":40,"definition":{"placeholder":"0","fields":[{"type":"3","name":"table_type","label":"Table type","definition":{"placeholder":"0","options":[{"value":"default","label":"default"},{"value":"custom","label":"custom"}]}},{"type":"6","name":"custom_table","label":"Custom table","definition":{"placeholder":"0"},"hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_item_id_column","label":"Custom id column","hideCondition":"parent.table_type != \"custom\"","definition":{"placeholder":"0"}},{"type":"7","name":"custom_response_column","label":"Custom response column","definition":{"placeholder":"0"},"hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_trait_column","label":"Custom trait column","definition":{"placeholder":"0"},"hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_correct_column","label":"Custom correct column","definition":{"placeholder":"0"},"hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_session_id_column","label":"Custom session id column","definition":{"placeholder":"0"},"hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_time_taken_column","label":"Custom time taken column","definition":{"placeholder":"0"},"hideCondition":"parent.table_type != \"custom\""}]},"globalId":314},{"class_name":"TestWizardParam","id":315,"label":"Response required","description":"","hideCondition":"","type":4,"passableThroughUrl":"0","value":"0","testVariable":1056,"name":"response_required","wizardStep":77,"stepTitle":"Response bank","order":1,"wizard":40,"definition":{"placeholder":"0"},"globalId":315},{"class_name":"TestWizardParam","id":316,"label":"No response alert","description":"","hideCondition":"","type":0,"passableThroughUrl":"0","value":"","testVariable":1057,"name":"no_response_alert","wizardStep":77,"stepTitle":"Response bank","order":2,"wizard":40,"definition":{"placeholder":"0"},"globalId":316}],"globalId":77}],"test":188,"testObject":{"class_name":"Test","id":188,"name":"source_linear_test","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":0,"code":"decoded_template_def = fromJSON(template_def)\n\ngetQuestions = function(){\n  questions = NULL\n  ib = fromJSON(item_bank)\n  if(ib$table_type == \"default\" || ib$table_type == \"custom\") {\n    table = \"default_linear_item_table\"\n    question_column = \"question\"\n    response_options_column = \"response_options\"\n    correct_column = \"correct\"\n    trait_column = \"trait\"\n    order_column = \"order\"\n    test_id_column = \"test_id\"\n    test_id = concerto$mainTest$id\n    if(ib$table_type == \"custom\") {\n      table = ib$custom_table\n      question_column = ib$custom_question_column$column\n      response_options_column = ib$custom_response_options_column$column\n      correct_column = ib$custom_correct_column$column\n      trait_column = ib$custom_trait_column$column\n      order_column = ib$custom_order_column$column\n      test_id_column = ib$custom_test_id_column$column\n    }\n\n    questions = concerto.table.query(\"SELECT id, `{{question_column}}` AS `question`, `{{response_options_column}}` AS `response_options`, `{{correct_column}}` AS `correct`, `{{trait_column}}` AS `trait` FROM `{{table}}` WHERE `{{test_id_column}}` = {{test_id}} ORDER BY `{{order_column}}` ASC\", list(\n      question_column=question_column,\n      response_options_column=response_options_column,\n      trait_column=trait_column,\n      order_column=order_column,\n      correct_column=correct_column,\n      table=table,\n      test_id_column=test_id_column,\n      test_id=test_id\n    ))\n  }\n  if(ib$table_type == \"direct\") {\n    if(length(ib$direct_table) > 0) {\n      for(i in 1:length(ib$direct_table)) {\n        questions = rbind(questions, as.list(ib$direct_table[[i]]))\n      }\n    }\n  }\n\n  if(dim(questions)[1] > 0 && order == \"random\") {\n    questions = questions[sample(1:dim(questions)[1]),]\n  }\n\n  return(questions)\n}\n\ngetContent = function(question, current_item, answers) {\n  content = paragraph\n\n  content = paste0(content, \"<div class='formField'>\")\n  content = paste0(content, question$question)\n  content = paste0(content, getResponseOptions(question, current_item, answers))\n  content = paste0(content, \"<\/div>\")\n\n  return(content)\n}\n\ngetResponseOptions = function(question, current_item, answers) {\n  content = \"\"\n  options = NULL\n  o = question$response_options\n  if(is.character(o)) { o = fromJSON(o) }\n\n  if(length(o) > 0) {\n    #response options\n    for(i in 1:length(o)) {\n      options = rbind(options, as.list(o[[i]]))\n    }\n\n    if(randomized_response_options == \"1\") {\n      if(dim(options)[1] > 0) {\n        options = options[sample(1:dim(options)[1]),]\n      }\n    }\n    \n    content = \"<div class='catResponseGroup'>\"\n    section_class = \"catResponseSectionVertical\"\n    section_styles = \"\"\n    if(responses_layout == \"horizontal\") { \n      section_class = \"catResponseSectionHorizontal\" \n      section_styles = paste0(\"width: \",response_width)\n    }\n    \n    for(i in 1:dim(options)[1]) {\n      option = options[i,]\n      checked = \"\"\n      if(!is.null(answers[current_item]) && !is.na(answers[current_item]) && answers[current_item] == option$value) { checked = \"checked\" }\n      content = paste0(content, \"<div class='\",section_class,\"' style='\",section_styles,\"'><label for='input_response_\",i,\"'><table class='catResponseTable'><tr>\")\n      content = paste0(content, \"<td class='catResponseButtonCell'><input type='radio' id='input_response_\",i,\"' name='response' value='\",option$value,\"' \",checked,\" \/><\/td>\")\n      content = paste0(content, \"<td class='catResponseLabelCell'>\",option$label,\"<\/td>\")\n      content = paste0(content, \"<\/tr><\/table><\/label><\/div>\")\n    }\n    content = paste0(content, \"<div style='clear:both;'><\/div>\")\n    content = paste0(content, \"<\/div>\")\n  } else {\n    #open question\n    value = \"\"\n    if(!is.null(answers[current_item]) && !is.na(answers[current_item])) { value = answers[current_item] }\n    content = paste0(\"<div><input type='text' name='response' style='width:100%;' value='\",value,\"' \/><\/div>\")\n  }\n  return(content)\n}\n\nshouldStop = function(response, answers, questions, current_item, next_item) {\n  sr_time = fromJSON(stopping_time)\n  if(!is.null(sr_time$type) && sr_time$type == \"test\" && response$isTimeout == \"1\") { return(TRUE) }\n\n  sr_count = fromJSON(stopping_item_count)\n\n  if((sr_count$enabled == \"1\" && current_item >= as.numeric(sr_count$count)) || next_item > dim(questions)[1]) { return(TRUE) }\n  return(FALSE)\n}\n\nsaveResponse = function(response, question, rb, correct, scores, correctness, current_item) {\n  if(is.null(response$response)) { return(scores) }\n\n  table = \"default_linear_response_table\"\n  item_id_column = \"item_id\"\n  response_column = \"response\"\n  time_taken_column = \"time_taken\"\n  session_id_column = \"session_id\"\n  correct_column = \"correct\"\n  trait_column = \"trait\"\n  if(rb$table_type == \"custom\") {\n    table = rb$custom_table\n    item_id_column = rb$custom_item_id_column$column\n    response_column = rb$custom_response_column$column\n    time_taken_column = rb$custom_time_taken_column$column\n    session_id_column = rb$custom_session_id_column$column\n    correct_column = rb$custom_correct_column$column\n    trait_column = rb$custom_trait_column$column\n  }\n  session_id = 0\n  if(is.list(session)) { \n    session_id = session$id\n  }\n\n  r = concerto.table.query(\"SELECT `id` FROM `{{table}}` WHERE `{{item_id_column}}`={{item_id}} AND `{{session_id_column}}`={{session_id}}\", list(\n    table=table,\n    session_id_column=session_id_column,\n    session_id=session_id,\n    item_id_column=item_id_column,\n    item_id=question$id\n  ))\n  if(dim(r)[1] > 0) { \n    rid = r[1,\"id\"]\n    concerto.table.query(\"UPDATE `{{table}}` SET `{{response_column}}`='{{response}}', `{{time_taken_column}}`={{time_taken}}, `{{correct_column}}`={{correct}} WHERE `id`={{id}}\", list(\n      table=table,\n      session_id_column=session_id_column,\n      session_id=session_id,\n      item_id_column=item_id_column,\n      item_id=question$id,\n      response_column=response_column,\n      response=response$response,\n      time_taken_column=time_taken_column,\n      time_taken=response$timeTaken,\n      correct_column=correct_column,\n      correct=correct,\n      trait_column=trait_column,\n      trait=question$trait,\n      id=rid\n    ))\n  } else {\n    concerto.table.query(\"INSERT INTO `{{table}}` SET `{{item_id_column}}`={{item_id}}, `{{response_column}}`='{{response}}', `{{time_taken_column}}`={{time_taken}}, `{{session_id_column}}`={{session_id}}, `{{correct_column}}`={{correct}}, `{{trait_column}}`='{{trait}}'\", list(\n      table=table,\n      session_id_column=session_id_column,\n      session_id=session_id,\n      item_id_column=item_id_column,\n      item_id=question$id,\n      response_column=response_column,\n      response=response$response,\n      time_taken_column=time_taken_column,\n      time_taken=response$timeTaken,\n      correct_column=correct_column,\n      correct=correct,\n      trait_column=trait_column,\n      trait=question$trait\n    ))\n  }\n\n  if(is.null(scores[[question$trait]])) {\n    scores[[question$trait]] = 0\n  }\n\n  if(!is.null(correctness[current_item]) && !is.na(correctness[current_item])) { \n    prev_correct = correctness[current_item] \n    scores[[question$trait]] = scores[[question$trait]] - prev_correct\n  }\n\n  scores[[question$trait]] = scores[[question$trait]] + correct\n  return(scores)\n}\n\ngetTemplateParams = function(template_params){\n  params = list()\n  if(!is.null(inserts) && is.list(inserts)) {\n    params = inserts\n  }\n  for(key in ls(template_params)) {\n    params[[key]] = template_params[[key]]\n  }\n  return(params)\n}\n\ngetNextDebugItem = function(response, questions) {\n  for(i in 1:dim(questions)[1]) {\n    question = questions[i,]\n    if(question$id == response$item_debug) {\n      return(i)\n    }\n  }\n  return(NULL)\n}\n\ngetDebugContent = function(content, question) {\n  debug = \"<div class='debug'>\"\n  debug = paste0(debug, \"<p>Current item id: #\",question$id,\"<\/p>\") \n  debug = paste0(debug, \"<p>Next item id: <input type='text' name='item_debug' \/><\/p>\")\n  debug = paste0(debug, \"<\/div>\")\n  content = paste0(debug, content)\n  return(content)\n}\n\nquestions = getQuestions()\nrb = fromJSON(response_bank)\nanswers = NULL\nresponse = NULL\nwarning_msg = NULL\ntimer_set = FALSE\ntime_limit = 0\nsr_time = fromJSON(stopping_time)\nif(!is.null(sr_time$type) && (sr_time$type == \"test\" || sr_time$type == \"item\")) { \n  time_limit = as.numeric(sr_time$time_limit) \n}\nif(time_limit > 0) { timer_set = TRUE }\nscores = list()\ncorrectness = NULL\nmax_items = dim(questions)[1]\nsr_item_count = fromJSON(stopping_item_count)\nif(sr_item_count$enabled == \"1\") { max_items = min(max_items, as.numeric(sr_item_count$count)) }\n\ncurrent_item = 1\nwhile(T) {\n  buttons = \"<div class='button_panel button_panel_linear'>\"\n  if(current_item > 1 && can_go_back == \"1\" && item_debug == \"0\") {\n    buttons = paste0(buttons, \"<button name='previous' class='linear_test_button'>\",previous_button_label,\"<\/button>\")\n  }\n  if(dim(questions)[1] > 1 && item_debug == \"0\") {\n    buttons = paste0(buttons, current_item,\"\/\",max_items)\n  }\n  if(current_item <= dim(questions)[1] || item_debug == \"1\") {\n    buttons = paste0(buttons, \"<button name='next' class='linear_test_button'>\",next_button_label,\"<\/button>\")\n  }\n  buttons = paste0(buttons,'<\/div>')\n\n  question = questions[current_item,]\n  content = getContent(question, current_item, answers)\n\n  if(item_debug == \"0\") {\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )), timeLimit=time_limit)\n    warning_msg = NULL\n\n    if(timer_set) {\n      time_limit = time_limit - as.numeric(response$timeTaken)\n    }\n\n    if(!is.null(response$response) || response$isTimeout == \"1\") {\n      correct = 0\n      if(is.null(response$response)) { response$response = \"\" }\n      if(response$response == question$correct) { correct = 1 }\n      scores = saveResponse(response, question, rb, correct, scores, correctness, current_item)\n      if(length(answers) < current_item) {\n        answers = c(answers, response$response)\n        correctness = c(correctness, correct)\n      } else {\n        answers[current_item] = response$response\n        correctness[current_item] = correct\n      }\n    }\n\n    prev_item = current_item\n    if(response$buttonPressed == \"next\" || response$isTimeout == \"1\") {\n      if(response_required == \"0\" || (!is.null(response$response) && response$response != \"\") || response$isTimeout == \"1\") {\n        current_item = current_item + 1\n        if(timer_set && sr_time$type == \"item\"){\n          time_limit = as.numeric(sr_time$time_limit) \n        }\n      } else {\n        warning_msg = no_response_alert\n      }\n    }\n    if(response$buttonPressed == \"previous\") {\n      current_item = current_item - 1\n      if(timer_set && sr_time$type == \"item\"){\n        time_limit = as.numeric(sr_time$time_limit) \n      }\n    }\n\n    if(shouldStop(response, answers, questions, prev_item, current_item)) {\n      if(response$isTimeout == \"1\") {\n        .branch = \"out_of_time\"\n      }\n      break\n    }\n  } else {\n    content = getDebugContent(content, question)\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )))\n    current_item = getNextDebugItem(response, questions)\n    if(is.null(current_item)) {\n      warning_msg = paste0(\"Item id \",response$item_debug,\" not found!\")\n      current_item = 1\n    }\n  }\n}\nrm(questions)","slug":"79df92458718574d92ce25bd4d0701cb","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":1042,"name":"answered","type":2,"description":"","passableThroughUrl":"0","value":"0","test":188,"parentVariable":null,"globalId":1042},{"class_name":"TestVariable","id":1045,"name":"paragraph","type":0,"description":"","passableThroughUrl":"0","value":null,"test":188,"parentVariable":null,"globalId":1045},{"class_name":"TestVariable","id":1046,"name":"next_button_label","type":0,"description":"","passableThroughUrl":"0","value":null,"test":188,"parentVariable":null,"globalId":1046},{"class_name":"TestVariable","id":1047,"name":"previous_button_label","type":0,"description":"","passableThroughUrl":"0","value":null,"test":188,"parentVariable":null,"globalId":1047},{"class_name":"TestVariable","id":1048,"name":"item_bank","type":0,"description":"","passableThroughUrl":"0","value":null,"test":188,"parentVariable":null,"globalId":1048},{"class_name":"TestVariable","id":1049,"name":"response_bank","type":0,"description":"","passableThroughUrl":"0","value":null,"test":188,"parentVariable":null,"globalId":1049},{"class_name":"TestVariable","id":1050,"name":"stopping_time","type":0,"description":"","passableThroughUrl":"0","value":null,"test":188,"parentVariable":null,"globalId":1050},{"class_name":"TestVariable","id":1051,"name":"stopping_item_count","type":0,"description":"","passableThroughUrl":"0","value":null,"test":188,"parentVariable":null,"globalId":1051},{"class_name":"TestVariable","id":1052,"name":"randomized_response_options","type":0,"description":"","passableThroughUrl":"0","value":null,"test":188,"parentVariable":null,"globalId":1052},{"class_name":"TestVariable","id":1053,"name":"order","type":0,"description":"","passableThroughUrl":"0","value":null,"test":188,"parentVariable":null,"globalId":1053},{"class_name":"TestVariable","id":1054,"name":"session","type":0,"description":"","passableThroughUrl":"0","value":null,"test":188,"parentVariable":null,"globalId":1054},{"class_name":"TestVariable","id":1055,"name":"inserts","type":0,"description":"","passableThroughUrl":"0","value":null,"test":188,"parentVariable":null,"globalId":1055},{"class_name":"TestVariable","id":1056,"name":"response_required","type":0,"description":"","passableThroughUrl":"0","value":null,"test":188,"parentVariable":null,"globalId":1056},{"class_name":"TestVariable","id":1057,"name":"no_response_alert","type":0,"description":"","passableThroughUrl":"0","value":null,"test":188,"parentVariable":null,"globalId":1057},{"class_name":"TestVariable","id":1058,"name":"scores","type":1,"description":"","passableThroughUrl":"0","value":null,"test":188,"parentVariable":null,"globalId":1058},{"class_name":"TestVariable","id":1059,"name":"can_go_back","type":0,"description":"","passableThroughUrl":"0","value":null,"test":188,"parentVariable":null,"globalId":1059},{"class_name":"TestVariable","id":1060,"name":"item_debug","type":0,"description":"<p><span style=\"line-height: 20.8px;\">1 to turn item debug mode on. 0 to turn it off. Item debug mode let&#39;s you specify which item you want to&nbsp;view from your item bank.<\/span><\/p>\n","passableThroughUrl":"0","value":"0","test":188,"parentVariable":null,"globalId":1060},{"class_name":"TestVariable","id":1061,"name":"out_of_time","type":2,"description":"","passableThroughUrl":"0","value":null,"test":188,"parentVariable":null,"globalId":1061},{"class_name":"TestVariable","id":1210,"name":"title","type":0,"description":"","passableThroughUrl":"0","value":null,"test":188,"parentVariable":null,"globalId":1210},{"class_name":"TestVariable","id":1260,"name":"template_def","type":0,"description":"","passableThroughUrl":"0","value":"{\"layout\":\"default_layout\", \"header\":\"<p>Welcome.<\/p>\",\"footer\":\"\"}","test":188,"parentVariable":null,"globalId":1260},{"class_name":"TestVariable","id":1262,"name":"template_def","type":1,"description":"","passableThroughUrl":"0","value":null,"test":188,"parentVariable":null,"globalId":1262},{"class_name":"TestVariable","id":1264,"name":"session","type":1,"description":"","passableThroughUrl":"0","value":null,"test":188,"parentVariable":null,"globalId":1264},{"class_name":"TestVariable","id":1274,"name":"responses_layout","type":0,"description":"","passableThroughUrl":"0","value":null,"test":188,"parentVariable":null,"globalId":1274},{"class_name":"TestVariable","id":1276,"name":"response_width","type":0,"description":"","passableThroughUrl":"0","value":null,"test":188,"parentVariable":null,"globalId":1276}],"logs":[],"sourceWizard":null,"sourceWizardObject":null,"updatedOn":"2016-03-23 21:01:50","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"","globalId":188,"owner":1,"groups":""},"testName":"source_linear_test","updatedOn":"2016-03-23 15:25:54","updatedByName":"admin","globalId":40,"owner":1,"groups":""},"updatedOn":"2016-03-23 21:01:50","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"_concerto_core","globalId":190,"owner":1,"groups":""},{"class_name":"Test","id":191,"name":"CAT","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":1,"code":"library(catR)\n\ndecoded_template_def = fromJSON(template_def)\n\ngetQuestions = function(){\n  questions = NULL\n  ib = fromJSON(item_bank)\n  if(ib$table_type == \"default\" || ib$table_type == \"custom\") {\n    table = \"default_cat_item_table\"\n    question_column = \"question\"\n    response_options_column = \"response_options\"\n    a_column = \"a\"\n    b_column = \"b\"\n    c_column = \"c\"\n    d_column = \"d\"\n    correct_column = \"correct\"\n    test_id_column = \"test_id\"\n    cb_group_column = \"cb_group\"\n    test_id = concerto$mainTest$id\n    if(ib$table_type == \"custom\") {\n      table = ib$custom_table\n      question_column = ib$custom_question_column$column\n      response_options_column = ib$custom_response_options_column$column\n      a_column = ib$custom_a_column$column\n      b_column = ib$custom_b_column$column\n      c_column = ib$custom_c_column$column\n      d_column = ib$custom_d_column$column\n      correct_column = ib$custom_correct_column$column\n      test_id_column = ib$custom_test_id_column$column\n      cb_group_column = ib$custom_cb_group_column$column\n    }\n    questions = concerto.table.query(\"SELECT id, `{{question_column}}` AS `question`, `{{response_options_column}}` AS `response_options`, `{{a_column}}` AS `a`, `{{b_column}}` AS `b`, `{{c_column}}` AS `c`, `{{d_column}}` AS `d`, `{{correct_column}}` AS `correct`, `{{cb_group_column}}` AS `cb_group` FROM `{{table}}` WHERE `{{test_id_column}}` = {{test_id}}\", list(\n      question_column=question_column,\n      response_options_column=response_options_column,\n      a_column=a_column,\n      b_column=b_column,\n      c_column=c_column,\n      d_column=d_column,\n      correct_column=correct_column,\n      cb_group_column=cb_group_column,\n      table=table,\n      test_id_column=test_id_column,\n      test_id=test_id\n    ))\n  }\n  if(ib$table_type == \"direct\") {\n    if(length(ib$direct_table) > 0) {\n      for(i in 1:length(ib$direct_table)) {\n        questions = rbind(questions, as.list(ib$direct_table[[i]]))\n      }\n    }\n  }\n\n  if(dim(questions)[1] == 0) { stop(\"Item bank must not be empty!\") }\n  return(questions)\n}\n\ngetContent = function(question) {\n  content = paragraph\n\n  content = paste0(content, \"<div class='formField'>\")\n  content = paste0(content, \"<div class='cat_question'>\", question$question, \"<\/div>\")\n  content = paste0(content, getResponseOptions(question))\n  content = paste0(content, \"<\/div>\")\n\n  return(content)\n}\n\ngetResponseOptions = function(question) {\n  content = \"\"\n  options = NULL\n  o = question$response_options\n  if(is.character(o)) { o = fromJSON(o) }\n  if(length(o) > 0) {\n    #response options\n    for(i in 1:length(o)) {\n      options = rbind(options, as.list(o[[i]]))\n    }\n\n    if(randomize_response_options == \"1\") {\n      if(dim(options)[1] > 0) {\n        options = options[sample(1:dim(options)[1]),]\n      }\n    }\n\n    content = \"<div class='catResponseGroup'>\"\n    section_class = \"catResponseSectionVertical\"\n    section_styles = \"\"\n    if(responses_layout == \"horizontal\") { \n      section_class = \"catResponseSectionHorizontal\" \n      section_styles = paste0(\"width: \",response_width)\n    }\n    \n    for(i in 1:dim(options)[1]) {\n      option = options[i,]\n      content = paste0(content, \"<div class='\",section_class,\"' style='\",section_styles,\"'><label for='input_response_\",i,\"'><table class='catResponseTable'><tr>\")\n      content = paste0(content, \"<td class='catResponseButtonCell'><input type='radio' id='input_response_\",i,\"' name='response' value='\",option$value,\"' \/><\/td>\")\n      content = paste0(content, \"<td class='catResponseLabelCell'>\",option$label,\"<\/td>\")\n      content = paste0(content, \"<\/tr><\/table><\/label><\/div>\")\n    }\n    content = paste0(content, \"<div style='clear:both;'><\/div>\")\n    content = paste0(content, \"<\/div>\")\n    \n  } else {\n    #open question\n    content = paste0(\"<div><input type='text' name='response' style='width:100%;' \/><\/div>\")\n  }\n  return(content)\n}\n\nshouldStop = function(response, sem, out, questions) {\n  sr_time = fromJSON(stopping_time)\n  if(!is.null(sr_time$type) && sr_time$type == \"test\" && response$isTimeout == \"1\") { return(TRUE) }\n\n  sr_count = fromJSON(stopping_item_count)\n  if((sr_count$enabled == \"1\" && length(out) >= as.numeric(sr_count$count)) || length(out) >= dim(questions)[1]) { return(TRUE) }\n\n  sr_accuracy = fromJSON(stopping_accuracy)\n  if(sr_accuracy$enabled == \"1\" && as.numeric(sr_accuracy$accuracy) >= sem ) { return(TRUE) }\n  return(FALSE)\n}\n\nsaveResponse = function(response, question, rb, theta, sem, correct) {\n  table = \"default_cat_response_table\"\n  item_id_column = \"item_id\"\n  response_column = \"response\"\n  time_taken_column = \"time_taken\"\n  session_id_column = \"session_id\"\n  correct_column = \"correct\"\n  theta_column = \"theta\"\n  sem_column = \"sem\"\n  if(rb$table_type == \"custom\") {\n    table = rb$custom_table\n    item_id_column = rb$custom_item_id_column$column\n    response_column = rb$custom_response_column$column\n    time_taken_column = rb$custom_time_taken_column$column\n    session_id_column = rb$custom_session_id_column$column\n    correct_column = rb$custom_correct_column$column\n    theta_column = rb$custom_theta_column$column\n    sem_column = rb$custom_sem_column$column\n  }\n  session_id = 0\n  if(is.list(session)) { \n    session_id = session$id\n  }\n\n  concerto.table.query(\"INSERT INTO `{{table}}` SET `{{item_id_column}}`={{item_id}}, `{{response_column}}`='{{response}}', `{{time_taken_column}}`={{time_taken}}, `{{session_id_column}}`={{session_id}}, `{{correct_column}}`={{correct}}, `{{theta_column}}`={{theta}}, `{{sem_column}}`={{sem}}\", list(\n    table=table,\n    session_id_column=session_id_column,\n    session_id=session_id,\n    item_id_column=item_id_column,\n    item_id=question$id,\n    response_column=response_column,\n    response=response$response,\n    time_taken_column=time_taken_column,\n    time_taken=response$timeTaken,\n    correct_column=correct_column,\n    correct=correct,\n    theta_column=theta_column,\n    theta=theta,\n    sem_column=sem_column,\n    sem=sem\n  ))\n}\n\ngetTemplateParams = function(template_params){\n  params = list()\n  if(!is.null(inserts) && is.list(inserts)) {\n    params = inserts\n  }\n  for(key in ls(template_params)) {\n    params[[key]] = template_params[[key]]\n  }\n  return(params)\n}\n\ngetNextDebugItem = function(response, questions) {\n  for(i in 1:dim(questions)[1]) {\n    question = questions[i,]\n    if(question$id == response$item_debug) {\n      return(i)\n    }\n  }\n  return(NULL)\n}\n\ngetDebugContent = function(content, question) {\n  debug = \"<div class='debug'>\"\n  debug = paste0(debug, \"<p>Current item id: #\",question$id,\"<\/p>\") \n  debug = paste0(debug, \"<p>Next item id: <input type='text' name='item_debug' \/><\/p>\")\n  debug = paste0(debug, \"<\/div>\")\n  content = paste0(debug, content)\n  return(content)\n}\n\nquestions = getQuestions()\ncb_group = NULL\ncb_control = NULL\ncb = fromJSON(cb)\nprint(cb)\nif(cb$enabled == \"1\") {\n  cb_group = as.character(questions[,9])\n  print(cb_group)\n\n  props_list = NULL\n  if(length(cb$props) > 0) {\n    for(i in 1:length(cb$props)) {\n      props_list = rbind(props_list, as.list(cb$props[[i]]))\n    }\n  } else {\n    stop(\"Missing content balancing settings!\")\n  }\n  cb_control = list(\n    names=as.character(props_list[,1]),\n    props=as.numeric(props_list[,2])\n  )\n  print(cb_control)\n}\nparam_bank = questions[,4:7,drop=F]\nparam_bank = apply(param_bank, 2, as.numeric)\nrb = fromJSON(response_bank)\ntheta = 0\nsem = 1\nout = NULL\nresponse = NULL\nwarning_msg = NULL\ntimer_set = FALSE\ntime_limit = 0\nsr_time = fromJSON(stopping_time)\nif(!is.null(sr_time$type) && (sr_time$type == \"test\" || sr_time$type == \"item\")) { time_limit = as.numeric(sr_time$time_limit) }\nif(time_limit > 0) { timer_set = TRUE }\nbuttons = paste0(\"<div class='button_panel button_panel_cat'><button name='next' class='cat_button'>\",button_label,\"<\/button><\/div>\")\ncorrectness = c()\n\ncurrent_item = 1\nif(item_debug == \"0\") { \n  current_item = nextItem(param_bank, theta=theta, out=out, criterion=next_item_criterion, method=scoring_method, randomesque=randomesque, cbGroup=cb_group, cbControl=cb_control)$item\n}\nwhile(T) {\n  question = questions[current_item,]\n  content = getContent(question)\n\n  if(item_debug == \"0\") {\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )), timeLimit=time_limit)\n    warning_msg = NULL\n\n    if(timer_set) {\n      time_limit = time_limit - as.numeric(response$timeTaken)\n    }\n    valid = \"response\" %in% ls(response) && response$response != \"\"\n    if(valid || response$isTimeout == \"1\") {\n      correct = 0\n      if(!is.null(response$response) && response$response == question$correct) { correct = 1 }\n      correctness = c(correctness, correct)\n      out = c(out, current_item)\n      theta <- thetaEst(param_bank[out,], correctness, method=scoring_method)\n      sem <- semTheta(theta, param_bank[out,], correctness)\n      saveResponse(response, question, rb, theta, sem, correct)\n      if(shouldStop(response, sem, out, questions)) {\n        if(response$isTimeout == \"1\") {\n          .branch = \"out_of_time\"\n        }\n        break\n      } else {\n        if(timer_set && sr_time$type == \"item\") {\n          time_limit = as.numeric(sr_time$time_limit)\n        }\n        current_item = nextItem(param_bank, theta=theta, out=out, criterion=next_item_criterion, method=scoring_method, randomesque=randomesque, cbGroup=cb_group, cbControl=cb_control)$item\n      }\n    } else {\n      warning_msg = no_answer_alert\n    }\n  } else {\n    content = getDebugContent(content, question)\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )))\n    current_item = getNextDebugItem(response, questions)\n    if(is.null(current_item)) {\n      warning_msg = paste0(\"Item id \",response$item_debug,\" not found!\")\n      current_item = 1\n    }\n  }\n}\nscore = list(theta=theta, sem=sem)\nrm(questions)","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":1090,"name":"answered","type":2,"description":"","passableThroughUrl":"0","value":"0","test":191,"parentVariable":1000,"globalId":1090},{"class_name":"TestVariable","id":1093,"name":"paragraph","type":0,"description":"<p>CAT page paragraph<\/p>\n","passableThroughUrl":"0","value":"<p>Please answer question below:<\/p>\n","test":191,"parentVariable":1003,"globalId":1093},{"class_name":"TestVariable","id":1094,"name":"button_label","type":0,"description":"<p>CAT page continue button label<\/p>\n","passableThroughUrl":"0","value":"continue","test":191,"parentVariable":1004,"globalId":1094},{"class_name":"TestVariable","id":1095,"name":"item_bank","type":0,"description":"<p>CAT item bank definition<\/p>\n","passableThroughUrl":"0","value":"{\"custom_a_column\":{},\"table_type\":\"direct\",\"custom_table\":\"\",\"custom_question_column\":{},\"custom_response_options_column\":{},\"direct_table\":[],\"custom_b_column\":{},\"custom_c_column\":{},\"custom_d_column\":{},\"custom_correct_column\":{},\"custom_test_id_column\":{}}","test":191,"parentVariable":1005,"globalId":1095},{"class_name":"TestVariable","id":1096,"name":"response_bank","type":0,"description":"<p>Response bank definition<\/p>\n","passableThroughUrl":"0","value":"{\"table_type\":\"default\",\"custom_table\":\"\",\"custom_item_id_column\":{},\"custom_response_column\":{},\"custom_time_taken_column\":{},\"custom_session_id_column\":{},\"custom_correct_column\":{},\"custom_theta_column\":{},\"custom_sem_column\":{}}","test":191,"parentVariable":1006,"globalId":1096},{"class_name":"TestVariable","id":1097,"name":"stopping_time","type":0,"description":"<p>Time-based stopping rule that will stop the test when specified amount of seconds will pass<\/p>\n","passableThroughUrl":"0","value":"{\"enabled\":{\"value\":\"0\"},\"time_limit\":\"\",\"type\":null}","test":191,"parentVariable":1007,"globalId":1097},{"class_name":"TestVariable","id":1098,"name":"stopping_item_count","type":0,"description":"<p>Item count-based stopping time that will stop the test after specified number of items is answered<\/p>\n","passableThroughUrl":"0","value":"{\"enabled\":\"0\",\"count_limit\":\"\",\"count\":\"\"}","test":191,"parentVariable":1008,"globalId":1098},{"class_name":"TestVariable","id":1099,"name":"stopping_accuracy","type":0,"description":"<p>Accuracy-based stopping rule that will stop the test when at least certain accuracy is reached<\/p>\n","passableThroughUrl":"0","value":"{\"enabled\":{\"value\":\"0\"},\"accuracy\":{\"value\":\"\"}}","test":191,"parentVariable":1009,"globalId":1099},{"class_name":"TestVariable","id":1100,"name":"scoring_method","type":0,"description":"<p>Ability estimator<\/p>\n","passableThroughUrl":"0","value":"BM","test":191,"parentVariable":1010,"globalId":1100},{"class_name":"TestVariable","id":1101,"name":"next_item_criterion","type":0,"description":"","passableThroughUrl":"0","value":"MFI","test":191,"parentVariable":1011,"globalId":1101},{"class_name":"TestVariable","id":1102,"name":"randomesque","type":0,"description":"<p>The number of items to be chosen from the next item selection rule, among those the next item to be administered will be randomly picked up. Default value is 1 and leads to usual selection of the optimal item for the specified criterion.<\/p>\n","passableThroughUrl":"0","value":"1","test":191,"parentVariable":1012,"globalId":1102},{"class_name":"TestVariable","id":1103,"name":"randomize_response_options","type":0,"description":"<p>Check if you want order of response options to be random<\/p>\n","passableThroughUrl":"0","value":"1","test":191,"parentVariable":1013,"globalId":1103},{"class_name":"TestVariable","id":1104,"name":"no_answer_alert","type":0,"description":"<p>Alert message that will appear when no answer is given<\/p>\n","passableThroughUrl":"0","value":"No answer given!","test":191,"parentVariable":1014,"globalId":1104},{"class_name":"TestVariable","id":1105,"name":"session","type":0,"description":"","passableThroughUrl":"0","value":null,"test":191,"parentVariable":1015,"globalId":1105},{"class_name":"TestVariable","id":1106,"name":"score","type":1,"description":"<p>Score R list object with following elements:<\/p>\n\n<ul>\n\t<li><strong>score$theta<\/strong><\/li>\n\t<li><strong>score$sem<\/strong><\/li>\n<\/ul>\n","passableThroughUrl":"0","value":null,"test":191,"parentVariable":1016,"globalId":1106},{"class_name":"TestVariable","id":1107,"name":"inserts","type":0,"description":"","passableThroughUrl":"0","value":null,"test":191,"parentVariable":1017,"globalId":1107},{"class_name":"TestVariable","id":1108,"name":"item_debug","type":0,"description":"<p>1 to turn item debug mode on. 0 to turn it off. Item debug mode let&#39;s you specify which item you want to&nbsp;view from your item bank.<\/p>\n","passableThroughUrl":"0","value":"0","test":191,"parentVariable":1018,"globalId":1108},{"class_name":"TestVariable","id":1109,"name":"out_of_time","type":2,"description":"","passableThroughUrl":"0","value":null,"test":191,"parentVariable":1019,"globalId":1109},{"class_name":"TestVariable","id":1110,"name":"cb","type":0,"description":"","passableThroughUrl":"0","value":"{\"enabled\":\"0\",\"props\":[]}","test":191,"parentVariable":1020,"globalId":1110},{"class_name":"TestVariable","id":1209,"name":"title","type":0,"description":"","passableThroughUrl":"0","value":"DEMO TEST","test":191,"parentVariable":1208,"globalId":1209},{"class_name":"TestVariable","id":1251,"name":"template_def","type":0,"description":"","passableThroughUrl":"0","value":"{\"layout\":\"default_layout\", \"header\":\"<p>Welcome.<\/p>\",\"footer\":\"\"}","test":191,"parentVariable":1250,"globalId":1251},{"class_name":"TestVariable","id":1253,"name":"template_def","type":1,"description":"","passableThroughUrl":"0","value":null,"test":191,"parentVariable":1252,"globalId":1253},{"class_name":"TestVariable","id":1255,"name":"session","type":1,"description":"","passableThroughUrl":"0","value":null,"test":191,"parentVariable":1254,"globalId":1255},{"class_name":"TestVariable","id":1271,"name":"responses_layout","type":0,"description":"","passableThroughUrl":"0","value":"vertical","test":191,"parentVariable":1270,"globalId":1271},{"class_name":"TestVariable","id":1273,"name":"response_width","type":0,"description":"","passableThroughUrl":"0","value":null,"test":191,"parentVariable":1272,"globalId":1273}],"sourceWizard":41,"sourceWizardObject":{"class_name":"TestWizard","id":41,"name":"CAT","description":"","accessibility":0,"protected":"1","archived":"0","steps":[{"class_name":"TestWizardStep","id":78,"title":"Presentation","description":"<p>CAT presentation options<\/p>\n","orderNum":0,"colsNum":0,"wizard":41,"params":[{"class_name":"TestWizardParam","id":319,"label":"Paragraph","description":"<p>CAT page paragraph<\/p>\n","hideCondition":"","type":2,"passableThroughUrl":"0","value":"<p>Please answer question below:<\/p>\n","testVariable":1003,"name":"paragraph","wizardStep":78,"stepTitle":"Presentation","order":2,"wizard":41,"definition":{"placeholder":"0"},"globalId":319},{"class_name":"TestWizardParam","id":320,"label":"Button label","description":"<p>CAT page continue button label<\/p>\n","hideCondition":"","type":0,"passableThroughUrl":"0","value":"continue","testVariable":1004,"name":"button_label","wizardStep":78,"stepTitle":"Presentation","order":4,"wizard":41,"definition":[],"globalId":320},{"class_name":"TestWizardParam","id":321,"label":"No answer alert","description":"<p>Alert message that will appear when no answer is given<\/p>\n","hideCondition":"","type":0,"passableThroughUrl":"0","value":"No answer given!","testVariable":1014,"name":"no_answer_alert","wizardStep":78,"stepTitle":"Presentation","order":3,"wizard":41,"definition":[],"globalId":321},{"class_name":"TestWizardParam","id":393,"label":"Title","description":"","hideCondition":"","type":0,"passableThroughUrl":"0","value":"DEMO TEST","testVariable":1208,"name":"title","wizardStep":78,"stepTitle":"Presentation","order":1,"wizard":41,"definition":{"placeholder":0},"globalId":393},{"class_name":"TestWizardParam","id":399,"label":"Responses layout","description":"","hideCondition":"","type":3,"passableThroughUrl":"0","value":"vertical","testVariable":1270,"name":"responses_layout","wizardStep":78,"stepTitle":"Presentation","order":5,"wizard":41,"definition":{"placeholder":0,"options":[{"value":"vertical","label":"Vertical","order":1},{"value":"horizontal","label":"Horizontal","order":0}]},"globalId":399},{"class_name":"TestWizardParam","id":400,"label":"Response width","description":"<p>Can be any valid CSS width property value. E.g.:&nbsp;<strong>200px<\/strong>,&nbsp;<strong>20%<\/strong>.<\/p>\n","hideCondition":"values.responses_layout != \"horizontal\"","type":0,"passableThroughUrl":"0","value":"","testVariable":1272,"name":"response_width","wizardStep":78,"stepTitle":"Presentation","order":6,"wizard":41,"definition":{"placeholder":0},"globalId":400}],"globalId":78},{"class_name":"TestWizardStep","id":79,"title":"Item bank","description":"<p>CAT item bank options<\/p>\n","orderNum":1,"colsNum":0,"wizard":41,"params":[{"class_name":"TestWizardParam","id":322,"label":"Randomize response options order","description":"<p>Check if you want order of response options to be random<\/p>\n","hideCondition":"","type":4,"passableThroughUrl":"0","value":"1","testVariable":1013,"name":"randomize_response_options","wizardStep":79,"stepTitle":"Item bank","order":1,"wizard":41,"definition":{"placeholder":"0"},"globalId":322},{"class_name":"TestWizardParam","id":323,"label":"Item bank","description":"<p>CAT item bank definition.<\/p>\n\n<p>Leave item response options list empty for open question.<\/p>\n","hideCondition":"","type":9,"passableThroughUrl":"0","value":"{\"custom_a_column\":{},\"table_type\":\"direct\",\"custom_table\":\"\",\"custom_question_column\":{},\"custom_response_options_column\":{},\"direct_table\":[],\"custom_b_column\":{},\"custom_c_column\":{},\"custom_d_column\":{},\"custom_correct_column\":{},\"custom_test_id_column\":{}}","testVariable":1005,"name":"item_bank","wizardStep":79,"stepTitle":"Item bank","order":0,"wizard":41,"definition":{"placeholder":"0","fields":[{"type":"3","name":"table_type","label":"Table type","definition":{"options":[{"value":"default","label":"default"},{"value":"direct","label":"direct"},{"value":"custom","label":"custom"}]},"order":0},{"type":"10","name":"direct_table","label":"Table","definition":{"element":{"type":9,"definition":{"element":{"type":"0"},"fields":[{"type":"0","name":"id","label":"Id","definition":[]},{"type":"2","name":"question","label":"Question","definition":[]},{"type":"10","name":"response_options","label":"Response options","definition":{"element":{"type":9,"definition":{"fields":[{"type":"0","name":"value","label":"Value","definition":[]},{"type":"2","name":"label","label":"Label","definition":[]}]}}}},{"type":"0","name":"a","label":"a","definition":[]},{"type":"0","name":"b","label":"b","definition":[]},{"type":"0","name":"c","label":"c","definition":[]},{"type":"0","name":"d","label":"d","definition":[]},{"type":"0","name":"correct","label":"Correct answer","definition":[]},{"type":0,"name":"cb_group","label":"CB group","definition":{"placeholder":0}}]}}},"hideCondition":"parent.table_type != \"direct\"","order":1},{"type":"6","name":"custom_table","label":"Custom table","hideCondition":"parent.table_type != \"custom\"","definition":[],"order":2},{"type":"7","name":"custom_question_column","label":"Custom question column","hideCondition":"parent.table_type != \"custom\"","definition":[],"order":3},{"type":"7","name":"custom_response_options_column","label":"Custom response options column","hideCondition":"parent.table_type != \"custom\"","definition":[],"order":4},{"type":"7","name":"custom_a_column","label":"Custom a column","hideCondition":"parent.table_type != \"custom\"","definition":[],"order":5},{"type":"7","name":"custom_b_column","label":"Custom b column","hideCondition":"parent.table_type != \"custom\"","definition":[],"order":6},{"type":"7","name":"custom_c_column","label":"Custom c column","hideCondition":"parent.table_type != \"custom\"","definition":[],"order":7},{"type":"7","name":"custom_d_column","label":"Custom d column","hideCondition":"parent.table_type != \"custom\"","definition":[],"order":8},{"type":"7","name":"custom_correct_column","label":"Custom correct answer column","hideCondition":"parent.table_type != \"custom\"","definition":[],"order":9},{"type":"7","name":"custom_test_id_column","label":"Custom test id column","definition":{"placeholder":0},"hideCondition":"parent.table_type != \"custom\"","order":10},{"type":7,"name":"custom_cb_group_column","label":"Custom CB group column","definition":{"placeholder":0},"hideCondition":"parent.table_type != \"custom\"","order":11}]},"globalId":323}],"globalId":79},{"class_name":"TestWizardStep","id":80,"title":"CAT options","description":"<p>CAT options<\/p>\n","orderNum":2,"colsNum":0,"wizard":41,"params":[{"class_name":"TestWizardParam","id":324,"label":"Next item criterion","description":"","hideCondition":"","type":3,"passableThroughUrl":"0","value":"MFI","testVariable":1011,"name":"next_item_criterion","wizardStep":80,"stepTitle":"CAT options","order":0,"wizard":41,"definition":{"placeholder":"0","options":[{"value":"MFI","label":"MFI"},{"value":"bOpt","label":"bOpt"},{"value":"random","label":"random"}]},"globalId":324},{"class_name":"TestWizardParam","id":325,"label":"Next item randomesque","description":"<p>The number of items to be chosen from the next item selection rule, among those the next item to be administered will be randomly picked up. Default value is 1 and leads to usual selection of the optimal item for the specified criterion.<\/p>\n","hideCondition":"","type":0,"passableThroughUrl":"0","value":"1","testVariable":1012,"name":"randomesque","wizardStep":80,"stepTitle":"CAT options","order":1,"wizard":41,"definition":{"placeholder":"0"},"globalId":325},{"class_name":"TestWizardParam","id":326,"label":"Scoring method","description":"<p>Ability estimator<\/p>\n","hideCondition":"","type":3,"passableThroughUrl":"0","value":"BM","testVariable":1010,"name":"scoring_method","wizardStep":80,"stepTitle":"CAT options","order":2,"wizard":41,"definition":{"placeholder":"0","options":[{"value":"BM","label":"BM"},{"value":"ML","label":"ML"},{"value":"WL","label":"WL"},{"value":"EAP","label":"EAP"}]},"globalId":326},{"class_name":"TestWizardParam","id":327,"label":"Content Balancing","description":"","hideCondition":"","type":9,"passableThroughUrl":"0","value":"{\"enabled\":\"0\",\"props\":[]}","testVariable":1020,"name":"cb","wizardStep":80,"stepTitle":"CAT options","order":3,"wizard":41,"definition":{"fields":[{"type":4,"name":"enabled","label":"Enabled","definition":{"placeholder":0},"order":0},{"type":10,"name":"props","label":"Group proportions","definition":{"placeholder":0,"element":{"type":9,"definition":{"placeholder":0,"fields":[{"type":0,"name":"name","label":"Group name","definition":{"placeholder":0}},{"type":0,"name":"prop","label":"Group proportion","definition":{"placeholder":0}}]}}},"hideCondition":"parent.enabled == \"0\"","order":1}]},"globalId":327}],"globalId":80},{"class_name":"TestWizardStep","id":81,"title":"Stopping rules","description":"<p>CAT stopping rules<\/p>\n","orderNum":3,"colsNum":0,"wizard":41,"params":[{"class_name":"TestWizardParam","id":328,"label":"Time-based stopping rule","description":"<p>Time-based stopping rule that will stop the test when specified amount of seconds will pass<\/p>\n","hideCondition":"","type":9,"passableThroughUrl":"0","value":"{\"enabled\":{\"value\":\"0\"},\"time_limit\":\"\",\"type\":null}","testVariable":1007,"name":"stopping_time","wizardStep":81,"stepTitle":"Stopping rules","order":1,"wizard":41,"definition":{"placeholder":"0","fields":[{"type":3,"name":"type","label":"Type","definition":{"placeholder":0,"options":[{"value":"test","label":"Test","order":"0"},{"value":"item","label":"Item","order":"1"}]}},{"type":"0","name":"time_limit","label":"Time limit (seconds)","hideCondition":"!parent.type"}]},"globalId":328},{"class_name":"TestWizardParam","id":329,"label":"Item count-based stopping rule","description":"<p>Item count-based stopping time that will stop the test after specified number of items is answered<\/p>\n","hideCondition":"","type":9,"passableThroughUrl":"0","value":"{\"enabled\":\"0\",\"count_limit\":\"\",\"count\":\"\"}","testVariable":1008,"name":"stopping_item_count","wizardStep":81,"stepTitle":"Stopping rules","order":0,"wizard":41,"definition":{"placeholder":"0","fields":[{"type":"4","name":"enabled","label":"Enabled"},{"type":"0","name":"count","label":"Item count limit","hideCondition":"parent.enabled != \"1\""}]},"globalId":329},{"class_name":"TestWizardParam","id":330,"label":"Accuracy-based stopping rule","description":"<p>Accuracy-based stopping rule that will stop the test when at least certain accuracy is reached<\/p>\n","hideCondition":"","type":9,"passableThroughUrl":"0","value":"{\"enabled\":{\"value\":\"0\"},\"accuracy\":{\"value\":\"\"}}","testVariable":1009,"name":"stopping_accuracy","wizardStep":81,"stepTitle":"Stopping rules","order":2,"wizard":41,"definition":{"placeholder":"0","fields":[{"type":"4","name":"enabled","label":"Enabled"},{"type":"0","name":"accuracy","label":"Minimum accuracy","hideCondition":"parent.enabled != \"1\""}]},"globalId":330}],"globalId":81},{"class_name":"TestWizardStep","id":82,"title":"Response bank","description":"<p>CAT response bank options<\/p>\n","orderNum":4,"colsNum":0,"wizard":41,"params":[{"class_name":"TestWizardParam","id":331,"label":"Response table","description":"<p>Response bank definition<\/p>\n","hideCondition":"","type":9,"passableThroughUrl":"0","value":"{\"table_type\":\"default\",\"custom_table\":\"\",\"custom_item_id_column\":{},\"custom_response_column\":{},\"custom_time_taken_column\":{},\"custom_session_id_column\":{},\"custom_correct_column\":{},\"custom_theta_column\":{},\"custom_sem_column\":{}}","testVariable":1006,"name":"response_bank","wizardStep":82,"stepTitle":"Response bank","order":0,"wizard":41,"definition":{"placeholder":"0","fields":[{"type":"3","name":"table_type","label":"Table type","definition":{"options":[{"value":"default","label":"default"},{"value":"custom","label":"custom"}]}},{"type":"6","name":"custom_table","label":"Custom table","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_item_id_column","label":"Custom item Id column","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_response_column","label":"Custom response column","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_time_taken_column","label":"Custom time taken column","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_session_id_column","label":"Custom session Id column","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_correct_column","label":"Custom correct column","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_theta_column","label":"Custom theta column","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_sem_column","label":"Custom SEM column","hideCondition":"parent.table_type != \"custom\""}]},"globalId":331}],"globalId":82}],"test":185,"testObject":{"class_name":"Test","id":185,"name":"source_CAT","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":0,"code":"library(catR)\n\ndecoded_template_def = fromJSON(template_def)\n\ngetQuestions = function(){\n  questions = NULL\n  ib = fromJSON(item_bank)\n  if(ib$table_type == \"default\" || ib$table_type == \"custom\") {\n    table = \"default_cat_item_table\"\n    question_column = \"question\"\n    response_options_column = \"response_options\"\n    a_column = \"a\"\n    b_column = \"b\"\n    c_column = \"c\"\n    d_column = \"d\"\n    correct_column = \"correct\"\n    test_id_column = \"test_id\"\n    cb_group_column = \"cb_group\"\n    test_id = concerto$mainTest$id\n    if(ib$table_type == \"custom\") {\n      table = ib$custom_table\n      question_column = ib$custom_question_column$column\n      response_options_column = ib$custom_response_options_column$column\n      a_column = ib$custom_a_column$column\n      b_column = ib$custom_b_column$column\n      c_column = ib$custom_c_column$column\n      d_column = ib$custom_d_column$column\n      correct_column = ib$custom_correct_column$column\n      test_id_column = ib$custom_test_id_column$column\n      cb_group_column = ib$custom_cb_group_column$column\n    }\n    questions = concerto.table.query(\"SELECT id, `{{question_column}}` AS `question`, `{{response_options_column}}` AS `response_options`, `{{a_column}}` AS `a`, `{{b_column}}` AS `b`, `{{c_column}}` AS `c`, `{{d_column}}` AS `d`, `{{correct_column}}` AS `correct`, `{{cb_group_column}}` AS `cb_group` FROM `{{table}}` WHERE `{{test_id_column}}` = {{test_id}}\", list(\n      question_column=question_column,\n      response_options_column=response_options_column,\n      a_column=a_column,\n      b_column=b_column,\n      c_column=c_column,\n      d_column=d_column,\n      correct_column=correct_column,\n      cb_group_column=cb_group_column,\n      table=table,\n      test_id_column=test_id_column,\n      test_id=test_id\n    ))\n  }\n  if(ib$table_type == \"direct\") {\n    if(length(ib$direct_table) > 0) {\n      for(i in 1:length(ib$direct_table)) {\n        questions = rbind(questions, as.list(ib$direct_table[[i]]))\n      }\n    }\n  }\n\n  if(dim(questions)[1] == 0) { stop(\"Item bank must not be empty!\") }\n  return(questions)\n}\n\ngetContent = function(question) {\n  content = paragraph\n\n  content = paste0(content, \"<div class='formField'>\")\n  content = paste0(content, \"<div class='cat_question'>\", question$question, \"<\/div>\")\n  content = paste0(content, getResponseOptions(question))\n  content = paste0(content, \"<\/div>\")\n\n  return(content)\n}\n\ngetResponseOptions = function(question) {\n  content = \"\"\n  options = NULL\n  o = question$response_options\n  if(is.character(o)) { o = fromJSON(o) }\n  if(length(o) > 0) {\n    #response options\n    for(i in 1:length(o)) {\n      options = rbind(options, as.list(o[[i]]))\n    }\n\n    if(randomize_response_options == \"1\") {\n      if(dim(options)[1] > 0) {\n        options = options[sample(1:dim(options)[1]),]\n      }\n    }\n\n    content = \"<div class='catResponseGroup'>\"\n    section_class = \"catResponseSectionVertical\"\n    section_styles = \"\"\n    if(responses_layout == \"horizontal\") { \n      section_class = \"catResponseSectionHorizontal\" \n      section_styles = paste0(\"width: \",response_width)\n    }\n    \n    for(i in 1:dim(options)[1]) {\n      option = options[i,]\n      content = paste0(content, \"<div class='\",section_class,\"' style='\",section_styles,\"'><label for='input_response_\",i,\"'><table class='catResponseTable'><tr>\")\n      content = paste0(content, \"<td class='catResponseButtonCell'><input type='radio' id='input_response_\",i,\"' name='response' value='\",option$value,\"' \/><\/td>\")\n      content = paste0(content, \"<td class='catResponseLabelCell'>\",option$label,\"<\/td>\")\n      content = paste0(content, \"<\/tr><\/table><\/label><\/div>\")\n    }\n    content = paste0(content, \"<div style='clear:both;'><\/div>\")\n    content = paste0(content, \"<\/div>\")\n    \n  } else {\n    #open question\n    content = paste0(\"<div><input type='text' name='response' style='width:100%;' \/><\/div>\")\n  }\n  return(content)\n}\n\nshouldStop = function(response, sem, out, questions) {\n  sr_time = fromJSON(stopping_time)\n  if(!is.null(sr_time$type) && sr_time$type == \"test\" && response$isTimeout == \"1\") { return(TRUE) }\n\n  sr_count = fromJSON(stopping_item_count)\n  if((sr_count$enabled == \"1\" && length(out) >= as.numeric(sr_count$count)) || length(out) >= dim(questions)[1]) { return(TRUE) }\n\n  sr_accuracy = fromJSON(stopping_accuracy)\n  if(sr_accuracy$enabled == \"1\" && as.numeric(sr_accuracy$accuracy) >= sem ) { return(TRUE) }\n  return(FALSE)\n}\n\nsaveResponse = function(response, question, rb, theta, sem, correct) {\n  table = \"default_cat_response_table\"\n  item_id_column = \"item_id\"\n  response_column = \"response\"\n  time_taken_column = \"time_taken\"\n  session_id_column = \"session_id\"\n  correct_column = \"correct\"\n  theta_column = \"theta\"\n  sem_column = \"sem\"\n  if(rb$table_type == \"custom\") {\n    table = rb$custom_table\n    item_id_column = rb$custom_item_id_column$column\n    response_column = rb$custom_response_column$column\n    time_taken_column = rb$custom_time_taken_column$column\n    session_id_column = rb$custom_session_id_column$column\n    correct_column = rb$custom_correct_column$column\n    theta_column = rb$custom_theta_column$column\n    sem_column = rb$custom_sem_column$column\n  }\n  session_id = 0\n  if(is.list(session)) { \n    session_id = session$id\n  }\n\n  concerto.table.query(\"INSERT INTO `{{table}}` SET `{{item_id_column}}`={{item_id}}, `{{response_column}}`='{{response}}', `{{time_taken_column}}`={{time_taken}}, `{{session_id_column}}`={{session_id}}, `{{correct_column}}`={{correct}}, `{{theta_column}}`={{theta}}, `{{sem_column}}`={{sem}}\", list(\n    table=table,\n    session_id_column=session_id_column,\n    session_id=session_id,\n    item_id_column=item_id_column,\n    item_id=question$id,\n    response_column=response_column,\n    response=response$response,\n    time_taken_column=time_taken_column,\n    time_taken=response$timeTaken,\n    correct_column=correct_column,\n    correct=correct,\n    theta_column=theta_column,\n    theta=theta,\n    sem_column=sem_column,\n    sem=sem\n  ))\n}\n\ngetTemplateParams = function(template_params){\n  params = list()\n  if(!is.null(inserts) && is.list(inserts)) {\n    params = inserts\n  }\n  for(key in ls(template_params)) {\n    params[[key]] = template_params[[key]]\n  }\n  return(params)\n}\n\ngetNextDebugItem = function(response, questions) {\n  for(i in 1:dim(questions)[1]) {\n    question = questions[i,]\n    if(question$id == response$item_debug) {\n      return(i)\n    }\n  }\n  return(NULL)\n}\n\ngetDebugContent = function(content, question) {\n  debug = \"<div class='debug'>\"\n  debug = paste0(debug, \"<p>Current item id: #\",question$id,\"<\/p>\") \n  debug = paste0(debug, \"<p>Next item id: <input type='text' name='item_debug' \/><\/p>\")\n  debug = paste0(debug, \"<\/div>\")\n  content = paste0(debug, content)\n  return(content)\n}\n\nquestions = getQuestions()\ncb_group = NULL\ncb_control = NULL\ncb = fromJSON(cb)\nprint(cb)\nif(cb$enabled == \"1\") {\n  cb_group = as.character(questions[,9])\n  print(cb_group)\n\n  props_list = NULL\n  if(length(cb$props) > 0) {\n    for(i in 1:length(cb$props)) {\n      props_list = rbind(props_list, as.list(cb$props[[i]]))\n    }\n  } else {\n    stop(\"Missing content balancing settings!\")\n  }\n  cb_control = list(\n    names=as.character(props_list[,1]),\n    props=as.numeric(props_list[,2])\n  )\n  print(cb_control)\n}\nparam_bank = questions[,4:7,drop=F]\nparam_bank = apply(param_bank, 2, as.numeric)\nrb = fromJSON(response_bank)\ntheta = 0\nsem = 1\nout = NULL\nresponse = NULL\nwarning_msg = NULL\ntimer_set = FALSE\ntime_limit = 0\nsr_time = fromJSON(stopping_time)\nif(!is.null(sr_time$type) && (sr_time$type == \"test\" || sr_time$type == \"item\")) { time_limit = as.numeric(sr_time$time_limit) }\nif(time_limit > 0) { timer_set = TRUE }\nbuttons = paste0(\"<div class='button_panel button_panel_cat'><button name='next' class='cat_button'>\",button_label,\"<\/button><\/div>\")\ncorrectness = c()\n\ncurrent_item = 1\nif(item_debug == \"0\") { \n  current_item = nextItem(param_bank, theta=theta, out=out, criterion=next_item_criterion, method=scoring_method, randomesque=randomesque, cbGroup=cb_group, cbControl=cb_control)$item\n}\nwhile(T) {\n  question = questions[current_item,]\n  content = getContent(question)\n\n  if(item_debug == \"0\") {\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )), timeLimit=time_limit)\n    warning_msg = NULL\n\n    if(timer_set) {\n      time_limit = time_limit - as.numeric(response$timeTaken)\n    }\n    valid = \"response\" %in% ls(response) && response$response != \"\"\n    if(valid || response$isTimeout == \"1\") {\n      correct = 0\n      if(!is.null(response$response) && response$response == question$correct) { correct = 1 }\n      correctness = c(correctness, correct)\n      out = c(out, current_item)\n      theta <- thetaEst(param_bank[out,], correctness, method=scoring_method)\n      sem <- semTheta(theta, param_bank[out,], correctness)\n      saveResponse(response, question, rb, theta, sem, correct)\n      if(shouldStop(response, sem, out, questions)) {\n        if(response$isTimeout == \"1\") {\n          .branch = \"out_of_time\"\n        }\n        break\n      } else {\n        if(timer_set && sr_time$type == \"item\") {\n          time_limit = as.numeric(sr_time$time_limit)\n        }\n        current_item = nextItem(param_bank, theta=theta, out=out, criterion=next_item_criterion, method=scoring_method, randomesque=randomesque, cbGroup=cb_group, cbControl=cb_control)$item\n      }\n    } else {\n      warning_msg = no_answer_alert\n    }\n  } else {\n    content = getDebugContent(content, question)\n    response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n      header=decoded_template_def$header, \n      title=title,\n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    )))\n    current_item = getNextDebugItem(response, questions)\n    if(is.null(current_item)) {\n      warning_msg = paste0(\"Item id \",response$item_debug,\" not found!\")\n      current_item = 1\n    }\n  }\n}\nscore = list(theta=theta, sem=sem)\nrm(questions)","slug":"7a060c2973cb3653564bbe9fa716b161","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":1000,"name":"answered","type":2,"description":"","passableThroughUrl":"0","value":"0","test":185,"parentVariable":null,"globalId":1000},{"class_name":"TestVariable","id":1003,"name":"paragraph","type":0,"description":"","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1003},{"class_name":"TestVariable","id":1004,"name":"button_label","type":0,"description":"","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1004},{"class_name":"TestVariable","id":1005,"name":"item_bank","type":0,"description":"","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1005},{"class_name":"TestVariable","id":1006,"name":"response_bank","type":0,"description":"","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1006},{"class_name":"TestVariable","id":1007,"name":"stopping_time","type":0,"description":"","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1007},{"class_name":"TestVariable","id":1008,"name":"stopping_item_count","type":0,"description":"","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1008},{"class_name":"TestVariable","id":1009,"name":"stopping_accuracy","type":0,"description":"","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1009},{"class_name":"TestVariable","id":1010,"name":"scoring_method","type":0,"description":"","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1010},{"class_name":"TestVariable","id":1011,"name":"next_item_criterion","type":0,"description":"","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1011},{"class_name":"TestVariable","id":1012,"name":"randomesque","type":0,"description":"","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1012},{"class_name":"TestVariable","id":1013,"name":"randomize_response_options","type":0,"description":"","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1013},{"class_name":"TestVariable","id":1014,"name":"no_answer_alert","type":0,"description":"","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1014},{"class_name":"TestVariable","id":1015,"name":"session","type":0,"description":"","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1015},{"class_name":"TestVariable","id":1016,"name":"score","type":1,"description":"<p>Score R list object with following elements:<\/p>\n\n<ul>\n\t<li><strong>score$theta<\/strong><\/li>\n\t<li><strong>score$sem<\/strong><\/li>\n<\/ul>\n","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1016},{"class_name":"TestVariable","id":1017,"name":"inserts","type":0,"description":"","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1017},{"class_name":"TestVariable","id":1018,"name":"item_debug","type":0,"description":"<p>1 to turn item debug mode on. 0 to turn it off. Item debug mode let&#39;s you specify which item you want to&nbsp;view from your item bank.<\/p>\n","passableThroughUrl":"0","value":"0","test":185,"parentVariable":null,"globalId":1018},{"class_name":"TestVariable","id":1019,"name":"out_of_time","type":2,"description":"","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1019},{"class_name":"TestVariable","id":1020,"name":"cb","type":0,"description":"","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1020},{"class_name":"TestVariable","id":1208,"name":"title","type":0,"description":"","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1208},{"class_name":"TestVariable","id":1250,"name":"template_def","type":0,"description":"","passableThroughUrl":"0","value":"{\"layout\":\"default_layout\", \"header\":\"<p>Welcome.<\/p>\",\"footer\":\"\"}","test":185,"parentVariable":null,"globalId":1250},{"class_name":"TestVariable","id":1252,"name":"template_def","type":1,"description":"","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1252},{"class_name":"TestVariable","id":1254,"name":"session","type":1,"description":"","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1254},{"class_name":"TestVariable","id":1270,"name":"responses_layout","type":0,"description":"","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1270},{"class_name":"TestVariable","id":1272,"name":"response_width","type":0,"description":"","passableThroughUrl":"0","value":null,"test":185,"parentVariable":null,"globalId":1272}],"logs":[],"sourceWizard":null,"sourceWizardObject":null,"updatedOn":"2016-03-23 21:04:49","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"","globalId":185,"owner":1,"groups":""},"testName":"source_CAT","updatedOn":"2016-03-23 15:21:43","updatedByName":"admin","globalId":41,"owner":1,"groups":""},"updatedOn":"2016-03-23 21:04:49","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"_concerto_core","globalId":191,"owner":1,"groups":""},{"class_name":"Test","id":192,"name":"info","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":1,"code":"decoded_template_def = fromJSON(template_def)\n\ngetTemplateParams = function(template_params){\n  params = list()\n  if(!is.null(inserts) && is.list(inserts)) {\n    params = inserts\n  }\n  for(key in ls(template_params)) {\n    params[[key]] = template_params[[key]]\n  }\n  return(params)\n}\n\nbuttons = \"\"\nif(button_exists == 1) {\n  buttons = paste('<div class=\"button_panel button_panel_info\"><button name=\"button\" class=\"info_button\">',button_label,'<\/button><\/div>',sep=\"\")\n}\nresponse = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n  header=decoded_template_def$header,\n  title=title,\n  content=content,\n  buttons=buttons,\n  footer=decoded_template_def$footer\n)))","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":1111,"name":"out","type":2,"description":"","passableThroughUrl":"0","value":"0","test":192,"parentVariable":936,"globalId":1111},{"class_name":"TestVariable","id":1114,"name":"content","type":0,"description":"<p>Info page content<\/p>\n","passableThroughUrl":"0","value":null,"test":192,"parentVariable":939,"globalId":1114},{"class_name":"TestVariable","id":1115,"name":"button_label","type":0,"description":"<p>Continue button label text<\/p>\n","passableThroughUrl":"0","value":"continue","test":192,"parentVariable":940,"globalId":1115},{"class_name":"TestVariable","id":1116,"name":"response","type":1,"description":"<p>Submitted user response<\/p>\n","passableThroughUrl":"0","value":null,"test":192,"parentVariable":941,"globalId":1116},{"class_name":"TestVariable","id":1117,"name":"inserts","type":0,"description":"","passableThroughUrl":"0","value":null,"test":192,"parentVariable":942,"globalId":1117},{"class_name":"TestVariable","id":1118,"name":"button_exists","type":0,"description":"<p>Check if there should be continue button on the page<\/p>\n","passableThroughUrl":"0","value":"1","test":192,"parentVariable":943,"globalId":1118},{"class_name":"TestVariable","id":1199,"name":"title","type":0,"description":"","passableThroughUrl":"0","value":"DEMO TEST","test":192,"parentVariable":1198,"globalId":1199},{"class_name":"TestVariable","id":1231,"name":"template_def","type":0,"description":"","passableThroughUrl":"0","value":"{\"layout\":\"default_layout\", \"header\":\"<p>Welcome.<\/p>\",\"footer\":\"\"}","test":192,"parentVariable":1230,"globalId":1231},{"class_name":"TestVariable","id":1233,"name":"template_def","type":1,"description":"","passableThroughUrl":"0","value":null,"test":192,"parentVariable":1232,"globalId":1233}],"sourceWizard":42,"sourceWizardObject":{"class_name":"TestWizard","id":42,"name":"info","description":"","accessibility":0,"protected":"1","archived":"0","steps":[{"class_name":"TestWizardStep","id":83,"title":"Presentation","description":"<p>Set info page presentation properties<\/p>\n","orderNum":0,"colsNum":0,"wizard":42,"params":[{"class_name":"TestWizardParam","id":334,"label":"Page content","description":"<p>Info page content<\/p>\n","hideCondition":"","type":2,"passableThroughUrl":"0","value":"","testVariable":939,"name":"content","wizardStep":83,"stepTitle":"Presentation","order":2,"wizard":42,"definition":{"placeholder":"0"},"globalId":334},{"class_name":"TestWizardParam","id":335,"label":"Button label","description":"<p>Continue button label text<\/p>\n","hideCondition":"","type":0,"passableThroughUrl":"0","value":"continue","testVariable":940,"name":"button_label","wizardStep":83,"stepTitle":"Presentation","order":4,"wizard":42,"definition":{"placeholder":"0"},"globalId":335},{"class_name":"TestWizardParam","id":336,"label":"Button exists?","description":"<p>Check if there should be continue button on the page<\/p>\n","hideCondition":"","type":4,"passableThroughUrl":"0","value":"1","testVariable":943,"name":"button_exists","wizardStep":83,"stepTitle":"Presentation","order":3,"wizard":42,"definition":{"placeholder":0},"globalId":336},{"class_name":"TestWizardParam","id":388,"label":"Page Title","description":"","hideCondition":"","type":0,"passableThroughUrl":"0","value":"DEMO TEST","testVariable":1198,"name":"title","wizardStep":83,"stepTitle":"Presentation","order":1,"wizard":42,"definition":{"placeholder":0},"globalId":388}],"globalId":83}],"test":179,"testObject":{"class_name":"Test","id":179,"name":"source_info","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":0,"code":"decoded_template_def = fromJSON(template_def)\n\ngetTemplateParams = function(template_params){\n  params = list()\n  if(!is.null(inserts) && is.list(inserts)) {\n    params = inserts\n  }\n  for(key in ls(template_params)) {\n    params[[key]] = template_params[[key]]\n  }\n  return(params)\n}\n\nbuttons = \"\"\nif(button_exists == 1) {\n  buttons = paste('<div class=\"button_panel button_panel_info\"><button name=\"button\" class=\"info_button\">',button_label,'<\/button><\/div>',sep=\"\")\n}\nresponse = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n  header=decoded_template_def$header,\n  title=title,\n  content=content,\n  buttons=buttons,\n  footer=decoded_template_def$footer\n)))","slug":"8e44985ffb3d9c4092baf5ea675e02d8","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":936,"name":"out","type":2,"description":"","passableThroughUrl":"0","value":"0","test":179,"parentVariable":null,"globalId":936},{"class_name":"TestVariable","id":939,"name":"content","type":0,"description":"","passableThroughUrl":"0","value":null,"test":179,"parentVariable":null,"globalId":939},{"class_name":"TestVariable","id":940,"name":"button_label","type":0,"description":"<p>Label on continue button.<\/p>\n","passableThroughUrl":"0","value":"continue","test":179,"parentVariable":null,"globalId":940},{"class_name":"TestVariable","id":941,"name":"response","type":1,"description":"<p>Submitted user response<\/p>\n","passableThroughUrl":"0","value":null,"test":179,"parentVariable":null,"globalId":941},{"class_name":"TestVariable","id":942,"name":"inserts","type":0,"description":"","passableThroughUrl":"0","value":null,"test":179,"parentVariable":null,"globalId":942},{"class_name":"TestVariable","id":943,"name":"button_exists","type":0,"description":"","passableThroughUrl":"0","value":"1","test":179,"parentVariable":null,"globalId":943},{"class_name":"TestVariable","id":1198,"name":"title","type":0,"description":"","passableThroughUrl":"0","value":null,"test":179,"parentVariable":null,"globalId":1198},{"class_name":"TestVariable","id":1230,"name":"template_def","type":0,"description":"","passableThroughUrl":"0","value":"{\"layout\":\"default_layout\", \"header\":\"<p>Welcome.<\/p>\",\"footer\":\"\"}","test":179,"parentVariable":null,"globalId":1230},{"class_name":"TestVariable","id":1232,"name":"template_def","type":1,"description":"","passableThroughUrl":"0","value":null,"test":179,"parentVariable":null,"globalId":1232}],"logs":[],"sourceWizard":null,"sourceWizardObject":null,"updatedOn":"2016-03-23 21:02:21","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"","globalId":179,"owner":1,"groups":""},"testName":"source_info","updatedOn":"2016-03-02 18:56:40","updatedByName":"admin","globalId":42,"owner":1,"groups":""},"updatedOn":"2016-03-23 21:02:21","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"_concerto_core","globalId":192,"owner":1,"groups":""},{"class_name":"Test","id":193,"name":"consent","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":1,"code":"decoded_template_def = fromJSON(template_def)\n\ngetContent = function(paragraph, consents, response) {\n  content = paragraph\n  if(length(consents) > 0) {\n    for(i in 1:length(consents)) {\n      checked = !is.null(response[[paste(\"consent\",i,sep=\"\")]])     \n      validationHighlight = if(!is.null(response) && !checked && consents[[i]]$required == \"1\") {\"validationHighlight\"} else {\"\"}\n      content = paste(content, \"<div class='formField \",validationHighlight,\"'><input id='consent\",i,\"' name='consent\",i,\"' type='checkbox' value='1' \",(if(checked) {\"checked\"}),\" \/><label for='consent\",i,\"'>\",consents[[i]]$consent,\"<\/label><\/div>\",sep=\"\")\n    }\n  }\n  return(content)\n}\n\ngetAlert = function(consents, response) {\n  alert = NULL\n  if(length(consents) > 0) {\n    for(i in 1:length(consents)) {\n      checked = !is.null(response[[paste(\"consent\",i,sep=\"\")]])\n      if(!checked && consents[[i]]$required == \"1\") {\n        alert = paste(alert, \"<div>\", consents[[i]]$alert, \"<\/div>\", sep=\"\")\n      }\n    }\n  }\n  return(alert)\n}\n\ngetTemplateParams = function(template_params){\n  params = list()\n  if(!is.null(inserts) && is.list(inserts)) {\n    params = inserts\n  }\n  for(key in ls(template_params)) {\n    params[[key]] = template_params[[key]]\n  }\n  return(params)\n}\n\nbuttons = paste('<div class=\"button_panel button_panel_consent\"><button name=\"button\" class=\"consent_button\">',button_label,'<\/button><\/div>',sep=\"\")\n\ncontent = paragraph\nconsents = fromJSON(consents)\n\nwarning_msg = NULL\nresponse = NULL\nwhile(T) {\n  content = getContent(paragraph, consents, response)\n  response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n    header=decoded_template_def$header, \n    title=title,\n    content=content, \n    warning_msg=warning_msg, \n    buttons=buttons,\n    footer=decoded_template_def$footer\n  )))  \n  warning_msg = getAlert(consents, response)\n  if(is.null(warning_msg)) { break }\n}","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":1119,"name":"out","type":2,"description":"","passableThroughUrl":"0","value":"0","test":193,"parentVariable":944,"globalId":1119},{"class_name":"TestVariable","id":1122,"name":"paragraph","type":0,"description":"<p>Consent page text paragraph<\/p>\n","passableThroughUrl":"0","value":"<p>Please answer the questions below<\/p>\n","test":193,"parentVariable":947,"globalId":1122},{"class_name":"TestVariable","id":1123,"name":"consents","type":0,"description":"<p>Declare consent fields list<\/p>\n","passableThroughUrl":"0","value":"[]","test":193,"parentVariable":948,"globalId":1123},{"class_name":"TestVariable","id":1124,"name":"button_label","type":0,"description":"<p>Continue button label text<\/p>\n","passableThroughUrl":"0","value":"continue","test":193,"parentVariable":949,"globalId":1124},{"class_name":"TestVariable","id":1125,"name":"response","type":1,"description":"<p><span style=\"line-height: 20.8px;\">Submitted user response<\/span><\/p>\n","passableThroughUrl":"0","value":null,"test":193,"parentVariable":950,"globalId":1125},{"class_name":"TestVariable","id":1126,"name":"inserts","type":0,"description":"","passableThroughUrl":"0","value":null,"test":193,"parentVariable":951,"globalId":1126},{"class_name":"TestVariable","id":1201,"name":"title","type":0,"description":"","passableThroughUrl":"0","value":"DEMO TEST","test":193,"parentVariable":1200,"globalId":1201},{"class_name":"TestVariable","id":1235,"name":"template_def","type":0,"description":"","passableThroughUrl":"0","value":"{\"layout\":\"default_layout\", \"header\":\"<p>Welcome.<\/p>\",\"footer\":\"\"}","test":193,"parentVariable":1234,"globalId":1235},{"class_name":"TestVariable","id":1237,"name":"template_def","type":1,"description":"","passableThroughUrl":"0","value":null,"test":193,"parentVariable":1236,"globalId":1237}],"sourceWizard":43,"sourceWizardObject":{"class_name":"TestWizard","id":43,"name":"consent","description":"","accessibility":0,"protected":"1","archived":"0","steps":[{"class_name":"TestWizardStep","id":84,"title":"Presentation","description":"<p>Consent page properties<\/p>\n","orderNum":0,"colsNum":0,"wizard":43,"params":[{"class_name":"TestWizardParam","id":339,"label":"Paragraph","description":"<p>Consent page text paragraph<\/p>\n","hideCondition":"","type":2,"passableThroughUrl":"0","value":"<p>Please answer the questions below<\/p>\n","testVariable":947,"name":"paragraph","wizardStep":84,"stepTitle":"Presentation","order":2,"wizard":43,"definition":{"placeholder":"0"},"globalId":339},{"class_name":"TestWizardParam","id":340,"label":"Button label","description":"<p>Continue button label text<\/p>\n","hideCondition":"","type":0,"passableThroughUrl":"0","value":"continue","testVariable":949,"name":"button_label","wizardStep":84,"stepTitle":"Presentation","order":3,"wizard":43,"definition":{"placeholder":"0"},"globalId":340},{"class_name":"TestWizardParam","id":389,"label":"Page Title","description":"","hideCondition":"","type":0,"passableThroughUrl":"0","value":"DEMO TEST","testVariable":1200,"name":"title","wizardStep":84,"stepTitle":"Presentation","order":1,"wizard":43,"definition":{"placeholder":0},"globalId":389}],"globalId":84},{"class_name":"TestWizardStep","id":85,"title":"Consents","description":"<p>Declare&nbsp;consent fields<\/p>\n","orderNum":0,"colsNum":0,"wizard":43,"params":[{"class_name":"TestWizardParam","id":341,"label":"Consent fields","description":"<p>Declare consent fields list<\/p>\n","hideCondition":"","type":10,"passableThroughUrl":"0","value":"[]","testVariable":948,"name":"consents","wizardStep":85,"stepTitle":"Consents","order":0,"wizard":43,"definition":{"placeholder":"0","element":{"type":9,"definition":{"placeholder":"0","fields":[{"type":"1","name":"consent","label":"consent content","definition":{"placeholder":"0"}},{"type":"1","name":"alert","label":"consent alert","definition":{"placeholder":"0"},"hideCondition":"parent.required == \"0\""},{"type":"4","name":"required","label":"required","definition":{"placeholder":"0"}}]}}},"globalId":341}],"globalId":85}],"test":180,"testObject":{"class_name":"Test","id":180,"name":"source_consent","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":0,"code":"decoded_template_def = fromJSON(template_def)\n\ngetContent = function(paragraph, consents, response) {\n  content = paragraph\n  if(length(consents) > 0) {\n    for(i in 1:length(consents)) {\n      checked = !is.null(response[[paste(\"consent\",i,sep=\"\")]])     \n      validationHighlight = if(!is.null(response) && !checked && consents[[i]]$required == \"1\") {\"validationHighlight\"} else {\"\"}\n      content = paste(content, \"<div class='formField \",validationHighlight,\"'><input id='consent\",i,\"' name='consent\",i,\"' type='checkbox' value='1' \",(if(checked) {\"checked\"}),\" \/><label for='consent\",i,\"'>\",consents[[i]]$consent,\"<\/label><\/div>\",sep=\"\")\n    }\n  }\n  return(content)\n}\n\ngetAlert = function(consents, response) {\n  alert = NULL\n  if(length(consents) > 0) {\n    for(i in 1:length(consents)) {\n      checked = !is.null(response[[paste(\"consent\",i,sep=\"\")]])\n      if(!checked && consents[[i]]$required == \"1\") {\n        alert = paste(alert, \"<div>\", consents[[i]]$alert, \"<\/div>\", sep=\"\")\n      }\n    }\n  }\n  return(alert)\n}\n\ngetTemplateParams = function(template_params){\n  params = list()\n  if(!is.null(inserts) && is.list(inserts)) {\n    params = inserts\n  }\n  for(key in ls(template_params)) {\n    params[[key]] = template_params[[key]]\n  }\n  return(params)\n}\n\nbuttons = paste('<div class=\"button_panel button_panel_consent\"><button name=\"button\" class=\"consent_button\">',button_label,'<\/button><\/div>',sep=\"\")\n\ncontent = paragraph\nconsents = fromJSON(consents)\n\nwarning_msg = NULL\nresponse = NULL\nwhile(T) {\n  content = getContent(paragraph, consents, response)\n  response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n    header=decoded_template_def$header, \n    title=title,\n    content=content, \n    warning_msg=warning_msg, \n    buttons=buttons,\n    footer=decoded_template_def$footer\n  )))  \n  warning_msg = getAlert(consents, response)\n  if(is.null(warning_msg)) { break }\n}","slug":"58277ba140df7e7bd5f08586aa6486a5","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":944,"name":"out","type":2,"description":"","passableThroughUrl":"0","value":"0","test":180,"parentVariable":null,"globalId":944},{"class_name":"TestVariable","id":947,"name":"paragraph","type":0,"description":"","passableThroughUrl":"0","value":null,"test":180,"parentVariable":null,"globalId":947},{"class_name":"TestVariable","id":948,"name":"consents","type":0,"description":"","passableThroughUrl":"0","value":null,"test":180,"parentVariable":null,"globalId":948},{"class_name":"TestVariable","id":949,"name":"button_label","type":0,"description":"<p>Label of continue button.<\/p>\n","passableThroughUrl":"0","value":"continue","test":180,"parentVariable":null,"globalId":949},{"class_name":"TestVariable","id":950,"name":"response","type":1,"description":"<p><span style=\"line-height: 20.8px;\">Submitted user response<\/span><\/p>\n","passableThroughUrl":"0","value":null,"test":180,"parentVariable":null,"globalId":950},{"class_name":"TestVariable","id":951,"name":"inserts","type":0,"description":"","passableThroughUrl":"0","value":null,"test":180,"parentVariable":null,"globalId":951},{"class_name":"TestVariable","id":1200,"name":"title","type":0,"description":"","passableThroughUrl":"0","value":null,"test":180,"parentVariable":null,"globalId":1200},{"class_name":"TestVariable","id":1234,"name":"template_def","type":0,"description":"","passableThroughUrl":"0","value":"{\"layout\":\"default_layout\", \"header\":\"<p>Welcome.<\/p>\",\"footer\":\"\"}","test":180,"parentVariable":null,"globalId":1234},{"class_name":"TestVariable","id":1236,"name":"template_def","type":1,"description":"","passableThroughUrl":"0","value":null,"test":180,"parentVariable":null,"globalId":1236}],"logs":[],"sourceWizard":null,"sourceWizardObject":null,"updatedOn":"2016-03-23 21:04:13","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"","globalId":180,"owner":1,"groups":""},"testName":"source_consent","updatedOn":"2016-03-02 19:20:12","updatedByName":"admin","globalId":43,"owner":1,"groups":""},"updatedOn":"2016-03-23 21:04:13","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"_concerto_core","globalId":193,"owner":1,"groups":""},{"class_name":"Test","id":194,"name":"create_graph","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":1,"code":"library(ggplot2)\n\nif(is.character(data)) {\n  d = fromJSON(data)\n  data = NULL\n  if(length(d) > 0) {\n    for(i in 1:length(d)) {\n      data = rbind(data, as.list(d[[i]]))\n    }\n  }\n}\ndata = as.data.frame(data)\n\nx = as.character(data[[x_name]])\nif(x_numeric == \"1\") { \n  x = as.numeric(x) \n}\n\ny = as.character(data[[y_name]])\nif(y_numeric == \"1\") { \n  y = as.numeric(y) \n}\ndata = data.frame(x=x, y=y)\n\ncolors = fromJSON(bar_colors)\nif(length(colors) == 0){\n  colors = x\n}\n\ngraph = ggplot(data=data, aes(x=x, y=y)) + \ngeom_bar(colour=\"black\", fill=colors, width=.8, stat=\"identity\") + \nguides(fill=FALSE) +\nxlab(x_label) + ylab(y_label) +\nggtitle(title)\n\npath = concerto.file.getPublicPath(filename)\npng(path, width=as.numeric(width), height=as.numeric(height))\nprint(graph)\ndev.off()\nurl = concerto.file.getUrl(filename)\naddress = list(filename=filename, path=path, url=url)","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":1127,"name":"out","type":2,"description":"","passableThroughUrl":"0","value":"0","test":194,"parentVariable":1021,"globalId":1127},{"class_name":"TestVariable","id":1128,"name":"filename","type":0,"description":"<p>File name that should be used to save a file. It needs to be&nbsp;<strong>png<\/strong>&nbsp;file<\/p>\n","passableThroughUrl":"0","value":"plot.png","test":194,"parentVariable":1022,"globalId":1128},{"class_name":"TestVariable","id":1129,"name":"data","type":0,"description":"<p>Plot data<\/p>\n","passableThroughUrl":"0","value":"[]","test":194,"parentVariable":1023,"globalId":1129},{"class_name":"TestVariable","id":1130,"name":"x_name","type":0,"description":"<p>Name of the column from&nbsp;<strong>data<\/strong>&nbsp;that describes&nbsp;<strong>X<\/strong><\/p>\n","passableThroughUrl":"0","value":"x","test":194,"parentVariable":1024,"globalId":1130},{"class_name":"TestVariable","id":1131,"name":"y_name","type":0,"description":"<p><span style=\"line-height: 20.8px;\">Name of the column from&nbsp;<\/span><strong style=\"line-height: 20.8px;\">data<\/strong><span style=\"line-height: 20.8px;\">&nbsp;that describes&nbsp;<\/span><strong style=\"line-height: 20.8px;\">Y<\/strong><\/p>\n","passableThroughUrl":"0","value":"y","test":194,"parentVariable":1025,"globalId":1131},{"class_name":"TestVariable","id":1132,"name":"x_label","type":0,"description":"","passableThroughUrl":"0","value":"X","test":194,"parentVariable":1026,"globalId":1132},{"class_name":"TestVariable","id":1133,"name":"y_label","type":0,"description":"","passableThroughUrl":"0","value":"Y","test":194,"parentVariable":1027,"globalId":1133},{"class_name":"TestVariable","id":1134,"name":"title","type":0,"description":"<p>Plot title<\/p>\n","passableThroughUrl":"0","value":"Plot","test":194,"parentVariable":1028,"globalId":1134},{"class_name":"TestVariable","id":1135,"name":"bar_colors","type":0,"description":"<p>Bar colors<\/p>\n","passableThroughUrl":"0","value":"[]","test":194,"parentVariable":1029,"globalId":1135},{"class_name":"TestVariable","id":1136,"name":"x_numeric","type":0,"description":"<p>Check if&nbsp;<strong>X&nbsp;<\/strong>column of&nbsp;<strong>data<\/strong>&nbsp;is numeric<\/p>\n","passableThroughUrl":"0","value":"{\"value\":\"\"}","test":194,"parentVariable":1030,"globalId":1136},{"class_name":"TestVariable","id":1137,"name":"y_numeric","type":0,"description":"<p><span style=\"line-height: 20.8px;\">Check if&nbsp;<\/span><strong style=\"line-height: 20.8px;\">Y&nbsp;<\/strong><span style=\"line-height: 20.8px;\">column of&nbsp;<\/span><strong style=\"line-height: 20.8px;\">data<\/strong><span style=\"line-height: 20.8px;\">&nbsp;is numeric<\/span><\/p>\n","passableThroughUrl":"0","value":"1","test":194,"parentVariable":1031,"globalId":1137},{"class_name":"TestVariable","id":1138,"name":"address","type":1,"description":"<p>R list object containing three elements:<\/p>\n\n<ul>\n\t<li><strong>address$filename<\/strong><\/li>\n\t<li><strong>address$path<\/strong><\/li>\n\t<li><strong>address$url<\/strong><\/li>\n<\/ul>\n","passableThroughUrl":"0","value":null,"test":194,"parentVariable":1032,"globalId":1138},{"class_name":"TestVariable","id":1139,"name":"width","type":0,"description":"<p>Width of plot image in pixels<\/p>\n","passableThroughUrl":"0","value":"200","test":194,"parentVariable":1033,"globalId":1139},{"class_name":"TestVariable","id":1140,"name":"height","type":0,"description":"<p><span style=\"line-height: 20.8px;\">Height of plot image in pixels<\/span><\/p>\n","passableThroughUrl":"0","value":"200","test":194,"parentVariable":1034,"globalId":1140}],"sourceWizard":44,"sourceWizardObject":{"class_name":"TestWizard","id":44,"name":"create_graph","description":"","accessibility":0,"protected":"1","archived":"0","steps":[{"class_name":"TestWizardStep","id":86,"title":"Data","description":"<p>Data declaration<\/p>\n","orderNum":0,"colsNum":0,"wizard":44,"params":[{"class_name":"TestWizardParam","id":342,"label":"File name","description":"<p>File name that should be used to save a file. It needs to be&nbsp;<strong>png<\/strong>&nbsp;file<\/p>\n","hideCondition":"","type":0,"passableThroughUrl":"0","value":"plot.png","testVariable":1022,"name":"filename","wizardStep":86,"stepTitle":"Data","order":0,"wizard":44,"definition":{"placeholder":"0"},"globalId":342},{"class_name":"TestWizardParam","id":343,"label":"Data","description":"<p>Plot data<\/p>\n","hideCondition":"","type":10,"passableThroughUrl":"0","value":"[]","testVariable":1023,"name":"data","wizardStep":86,"stepTitle":"Data","order":1,"wizard":44,"definition":{"placeholder":"0","element":{"type":9,"definition":{"fields":[{"type":"0","name":"x","label":"x"},{"type":"0","name":"y","label":"y"}]}}},"globalId":343},{"class_name":"TestWizardParam","id":344,"label":"Name of X column","description":"<p>Name of the column from&nbsp;<strong>data<\/strong>&nbsp;that describes&nbsp;<strong>X<\/strong><\/p>\n","hideCondition":"","type":0,"passableThroughUrl":"0","value":"x","testVariable":1024,"name":"x_name","wizardStep":86,"stepTitle":"Data","order":2,"wizard":44,"definition":{"placeholder":"0"},"globalId":344},{"class_name":"TestWizardParam","id":345,"label":"Name of Y column","description":"<p><span style=\"line-height: 20.8px;\">Name of the column from&nbsp;<\/span><strong style=\"line-height: 20.8px;\">data<\/strong><span style=\"line-height: 20.8px;\">&nbsp;that describes&nbsp;<\/span><strong style=\"line-height: 20.8px;\">Y<\/strong><\/p>\n","hideCondition":"","type":0,"passableThroughUrl":"0","value":"y","testVariable":1025,"name":"y_name","wizardStep":86,"stepTitle":"Data","order":3,"wizard":44,"definition":{"placeholder":"0"},"globalId":345},{"class_name":"TestWizardParam","id":346,"label":"Numeric X","description":"<p>Check if&nbsp;<strong>X&nbsp;<\/strong>column of&nbsp;<strong>data<\/strong>&nbsp;is numeric<\/p>\n","hideCondition":"","type":4,"passableThroughUrl":"0","value":"{\"value\":\"\"}","testVariable":1030,"name":"x_numeric","wizardStep":86,"stepTitle":"Data","order":4,"wizard":44,"definition":{"placeholder":"0"},"globalId":346},{"class_name":"TestWizardParam","id":347,"label":"Numeric Y","description":"<p><span style=\"line-height: 20.8px;\">Check if&nbsp;<\/span><strong style=\"line-height: 20.8px;\">Y&nbsp;<\/strong><span style=\"line-height: 20.8px;\">column of&nbsp;<\/span><strong style=\"line-height: 20.8px;\">data<\/strong><span style=\"line-height: 20.8px;\">&nbsp;is numeric<\/span><\/p>\n","hideCondition":"","type":4,"passableThroughUrl":"0","value":"1","testVariable":1031,"name":"y_numeric","wizardStep":86,"stepTitle":"Data","order":5,"wizard":44,"definition":{"placeholder":"0"},"globalId":347}],"globalId":86},{"class_name":"TestWizardStep","id":87,"title":"Presentation","description":"<p>Graph visual options<\/p>\n","orderNum":1,"colsNum":0,"wizard":44,"params":[{"class_name":"TestWizardParam","id":348,"label":"Title","description":"<p>Plot title<\/p>\n","hideCondition":"","type":0,"passableThroughUrl":"0","value":"Plot","testVariable":1028,"name":"title","wizardStep":87,"stepTitle":"Presentation","order":0,"wizard":44,"definition":{"placeholder":"0"},"globalId":348},{"class_name":"TestWizardParam","id":349,"label":"X label","description":"","hideCondition":"","type":0,"passableThroughUrl":"0","value":"X","testVariable":1026,"name":"x_label","wizardStep":87,"stepTitle":"Presentation","order":1,"wizard":44,"definition":{"placeholder":"0"},"globalId":349},{"class_name":"TestWizardParam","id":350,"label":"Y label","description":"","hideCondition":"","type":0,"passableThroughUrl":"0","value":"Y","testVariable":1027,"name":"y_label","wizardStep":87,"stepTitle":"Presentation","order":2,"wizard":44,"definition":{"placeholder":"0"},"globalId":350},{"class_name":"TestWizardParam","id":351,"label":"Bar colors","description":"<p>Bar colors<\/p>\n","hideCondition":"","type":10,"passableThroughUrl":"0","value":"[]","testVariable":1029,"name":"bar_colors","wizardStep":87,"stepTitle":"Presentation","order":3,"wizard":44,"definition":{"placeholder":"0","element":{"type":"0"}},"globalId":351},{"class_name":"TestWizardParam","id":352,"label":"Width","description":"<p>Width of plot image in pixels<\/p>\n","hideCondition":"","type":0,"passableThroughUrl":"0","value":"200","testVariable":1033,"name":"width","wizardStep":87,"stepTitle":"Presentation","order":4,"wizard":44,"definition":{"placeholder":"0"},"globalId":352},{"class_name":"TestWizardParam","id":353,"label":"Height","description":"<p><span style=\"line-height: 20.8px;\">Height of plot image in pixels<\/span><\/p>\n","hideCondition":"","type":0,"passableThroughUrl":"0","value":"200","testVariable":1034,"name":"height","wizardStep":87,"stepTitle":"Presentation","order":5,"wizard":44,"definition":{"placeholder":"0"},"globalId":353}],"globalId":87}],"test":186,"testObject":{"class_name":"Test","id":186,"name":"source_create_graph","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":0,"code":"library(ggplot2)\n\nif(is.character(data)) {\n  d = fromJSON(data)\n  data = NULL\n  if(length(d) > 0) {\n    for(i in 1:length(d)) {\n      data = rbind(data, as.list(d[[i]]))\n    }\n  }\n}\ndata = as.data.frame(data)\n\nx = as.character(data[[x_name]])\nif(x_numeric == \"1\") { \n  x = as.numeric(x) \n}\n\ny = as.character(data[[y_name]])\nif(y_numeric == \"1\") { \n  y = as.numeric(y) \n}\ndata = data.frame(x=x, y=y)\n\ncolors = fromJSON(bar_colors)\nif(length(colors) == 0){\n  colors = x\n}\n\ngraph = ggplot(data=data, aes(x=x, y=y)) + \ngeom_bar(colour=\"black\", fill=colors, width=.8, stat=\"identity\") + \nguides(fill=FALSE) +\nxlab(x_label) + ylab(y_label) +\nggtitle(title)\n\npath = concerto.file.getPublicPath(filename)\npng(path, width=as.numeric(width), height=as.numeric(height))\nprint(graph)\ndev.off()\nurl = concerto.file.getUrl(filename)\naddress = list(filename=filename, path=path, url=url)","slug":"d69173ad7fa6ea5ac8aa5ab841c9e429","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":1021,"name":"out","type":2,"description":"","passableThroughUrl":"0","value":"0","test":186,"parentVariable":null,"globalId":1021},{"class_name":"TestVariable","id":1022,"name":"filename","type":0,"description":"","passableThroughUrl":"0","value":null,"test":186,"parentVariable":null,"globalId":1022},{"class_name":"TestVariable","id":1023,"name":"data","type":0,"description":"","passableThroughUrl":"0","value":null,"test":186,"parentVariable":null,"globalId":1023},{"class_name":"TestVariable","id":1024,"name":"x_name","type":0,"description":"","passableThroughUrl":"0","value":null,"test":186,"parentVariable":null,"globalId":1024},{"class_name":"TestVariable","id":1025,"name":"y_name","type":0,"description":"","passableThroughUrl":"0","value":null,"test":186,"parentVariable":null,"globalId":1025},{"class_name":"TestVariable","id":1026,"name":"x_label","type":0,"description":"","passableThroughUrl":"0","value":null,"test":186,"parentVariable":null,"globalId":1026},{"class_name":"TestVariable","id":1027,"name":"y_label","type":0,"description":"","passableThroughUrl":"0","value":null,"test":186,"parentVariable":null,"globalId":1027},{"class_name":"TestVariable","id":1028,"name":"title","type":0,"description":"","passableThroughUrl":"0","value":null,"test":186,"parentVariable":null,"globalId":1028},{"class_name":"TestVariable","id":1029,"name":"bar_colors","type":0,"description":"","passableThroughUrl":"0","value":null,"test":186,"parentVariable":null,"globalId":1029},{"class_name":"TestVariable","id":1030,"name":"x_numeric","type":0,"description":"","passableThroughUrl":"0","value":null,"test":186,"parentVariable":null,"globalId":1030},{"class_name":"TestVariable","id":1031,"name":"y_numeric","type":0,"description":"","passableThroughUrl":"0","value":null,"test":186,"parentVariable":null,"globalId":1031},{"class_name":"TestVariable","id":1032,"name":"address","type":1,"description":"<p>R list object containing three elements:<\/p>\n\n<ul>\n\t<li><strong>address$filename<\/strong><\/li>\n\t<li><strong>address$path<\/strong><\/li>\n\t<li><strong>address$url<\/strong><\/li>\n<\/ul>\n","passableThroughUrl":"0","value":null,"test":186,"parentVariable":null,"globalId":1032},{"class_name":"TestVariable","id":1033,"name":"width","type":0,"description":"","passableThroughUrl":"0","value":null,"test":186,"parentVariable":null,"globalId":1033},{"class_name":"TestVariable","id":1034,"name":"height","type":0,"description":"","passableThroughUrl":"0","value":null,"test":186,"parentVariable":null,"globalId":1034}],"logs":[],"sourceWizard":null,"sourceWizardObject":null,"updatedOn":"2016-03-22 19:35:56","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"","globalId":186,"owner":1,"groups":""},"testName":"source_create_graph","updatedOn":"2016-03-22 19:45:17","updatedByName":"admin","globalId":44,"owner":1,"groups":""},"updatedOn":"2016-03-23 20:46:41","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"_concerto_core","globalId":194,"owner":1,"groups":""},{"class_name":"Test","id":195,"name":"feedback","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":1,"code":"decoded_template_def = fromJSON(template_def)\n\ngetContent = function() {\n  content = paragraph\n  t_def = fromJSON(traits)\n  \n  if(length(t_def) > 0) {\n    for(i in 1:length(t_def)) {\n      t_fb = t_def[[i]]\n      score = 0\n      if(is.list(scores) && !is.null(scores[[t_fb$trait]])) {\n        score = scores[[t_fb$trait]]\n      } else {\n        next\n      }\n      feedback = NULL\n      if(length(t_fb$boundaries) > 0) {\n        for(j in 1:length(t_fb$boundaries)) {\n      \t  t_bound = t_fb$boundaries[[j]]\n          if(t_bound$min_value <= score && t_bound$max_value > score) {\n            feedback = t_bound$feedback\n          }\n        }\n      }\n      if(is.null(feedback)) { next }\n        \n      content = paste0(content, \"<div class='feedbackTraitLabel'>\",t_fb$label,\"<\/div>\")\n      content = paste0(content, \"<div class='feedbackTraitDescription'>\",t_fb$description,\"<\/div>\")\n      content = paste0(content, \"<div class='feedbackTraitFeedback'>\",feedback,\"<\/div>\")\n    }\n  }\n  return(content)\n}\n\ngetTemplateParams = function(template_params){\n  params = list()\n  if(!is.null(inserts) && is.list(inserts)) {\n    params = inserts\n  }\n  for(key in ls(template_params)) {\n    params[[key]] = template_params[[key]]\n  }\n  return(params)\n}\n\ncontent = getContent()\nbuttons = paste('<div class=\"button_panel button_panel_feedback\"><button name=\"button\">',button_label,'<\/button><\/div>',sep=\"\")\nresponse = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n  header=decoded_template_def$header,\n  title=title,\n  content=content,\n  buttons=buttons,\n  footer=decoded_template_def$footer\n)))","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":1141,"name":"out","type":2,"description":"","passableThroughUrl":"0","value":"0","test":195,"parentVariable":1062,"globalId":1141},{"class_name":"TestVariable","id":1144,"name":"paragraph","type":0,"description":"","passableThroughUrl":"0","value":"<p>Feedback<\/p>\n","test":195,"parentVariable":1065,"globalId":1144},{"class_name":"TestVariable","id":1145,"name":"button_label","type":0,"description":"","passableThroughUrl":"0","value":"continue","test":195,"parentVariable":1066,"globalId":1145},{"class_name":"TestVariable","id":1146,"name":"traits","type":0,"description":"","passableThroughUrl":"0","value":"[]","test":195,"parentVariable":1067,"globalId":1146},{"class_name":"TestVariable","id":1147,"name":"inserts","type":0,"description":"","passableThroughUrl":"0","value":null,"test":195,"parentVariable":1068,"globalId":1147},{"class_name":"TestVariable","id":1148,"name":"scores","type":0,"description":"","passableThroughUrl":"0","value":null,"test":195,"parentVariable":1069,"globalId":1148},{"class_name":"TestVariable","id":1213,"name":"title","type":0,"description":"","passableThroughUrl":"0","value":"DEMO TEST","test":195,"parentVariable":1212,"globalId":1213},{"class_name":"TestVariable","id":1267,"name":"template_def","type":0,"description":"","passableThroughUrl":"0","value":"{\"layout\":\"default_layout\", \"header\":\"<p>Welcome.<\/p>\",\"footer\":\"\"}","test":195,"parentVariable":1266,"globalId":1267},{"class_name":"TestVariable","id":1269,"name":"template_def","type":1,"description":"","passableThroughUrl":"0","value":null,"test":195,"parentVariable":1268,"globalId":1269}],"sourceWizard":45,"sourceWizardObject":{"class_name":"TestWizard","id":45,"name":"feedback","description":"","accessibility":0,"protected":"1","archived":"0","steps":[{"class_name":"TestWizardStep","id":88,"title":"Presentation","description":"","orderNum":0,"colsNum":0,"wizard":45,"params":[{"class_name":"TestWizardParam","id":356,"label":"Paragraph","description":"","hideCondition":"","type":2,"passableThroughUrl":"0","value":"<p>Feedback:<\/p>\n","testVariable":1065,"name":"paragraph","wizardStep":88,"stepTitle":"Presentation","order":3,"wizard":45,"definition":{"placeholder":"0"},"globalId":356},{"class_name":"TestWizardParam","id":357,"label":"Button label","description":"","hideCondition":"","type":0,"passableThroughUrl":"0","value":"continue","testVariable":1066,"name":"button_label","wizardStep":88,"stepTitle":"Presentation","order":4,"wizard":45,"definition":{"placeholder":"0"},"globalId":357},{"class_name":"TestWizardParam","id":395,"label":"Title","description":"","hideCondition":"","type":0,"passableThroughUrl":"0","value":"DEMO TEST","testVariable":1212,"name":"title","wizardStep":88,"stepTitle":"Presentation","order":2,"wizard":45,"definition":{"placeholder":0},"globalId":395}],"globalId":88},{"class_name":"TestWizardStep","id":89,"title":"Scores","description":"","orderNum":1,"colsNum":0,"wizard":45,"params":[{"class_name":"TestWizardParam","id":358,"label":"Trait feedback","description":"","hideCondition":"","type":10,"passableThroughUrl":"0","value":"[]","testVariable":1067,"name":"traits","wizardStep":89,"stepTitle":"Scores","order":0,"wizard":45,"definition":{"placeholder":"0","element":{"type":9,"definition":{"placeholder":"0","fields":[{"type":"0","name":"trait","label":"Trait"},{"type":"0","name":"label","label":"Label"},{"type":"2","name":"description","label":"Description","definition":{"placeholder":"0"}},{"type":"10","name":"boundaries","label":"Score boundaries","definition":{"placeholder":"0","element":{"type":9,"definition":{"placeholder":"0","fields":[{"type":"0","name":"min_value","label":"Min value ( <= )"},{"type":"0","name":"max_value","label":"Max value ( > )"},{"type":"2","name":"feedback","label":"Feedback","definition":{"placeholder":"0"}}]}}}}]}}},"globalId":358}],"globalId":89}],"test":189,"testObject":{"class_name":"Test","id":189,"name":"source_feedback","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":0,"code":"decoded_template_def = fromJSON(template_def)\n\ngetContent = function() {\n  content = paragraph\n  t_def = fromJSON(traits)\n  \n  if(length(t_def) > 0) {\n    for(i in 1:length(t_def)) {\n      t_fb = t_def[[i]]\n      score = 0\n      if(is.list(scores) && !is.null(scores[[t_fb$trait]])) {\n        score = scores[[t_fb$trait]]\n      } else {\n        next\n      }\n      feedback = NULL\n      if(length(t_fb$boundaries) > 0) {\n        for(j in 1:length(t_fb$boundaries)) {\n      \t  t_bound = t_fb$boundaries[[j]]\n          if(t_bound$min_value <= score && t_bound$max_value > score) {\n            feedback = t_bound$feedback\n          }\n        }\n      }\n      if(is.null(feedback)) { next }\n        \n      content = paste0(content, \"<div class='feedbackTraitLabel'>\",t_fb$label,\"<\/div>\")\n      content = paste0(content, \"<div class='feedbackTraitDescription'>\",t_fb$description,\"<\/div>\")\n      content = paste0(content, \"<div class='feedbackTraitFeedback'>\",feedback,\"<\/div>\")\n    }\n  }\n  return(content)\n}\n\ngetTemplateParams = function(template_params){\n  params = list()\n  if(!is.null(inserts) && is.list(inserts)) {\n    params = inserts\n  }\n  for(key in ls(template_params)) {\n    params[[key]] = template_params[[key]]\n  }\n  return(params)\n}\n\ncontent = getContent()\nbuttons = paste('<div class=\"button_panel button_panel_feedback\"><button name=\"button\">',button_label,'<\/button><\/div>',sep=\"\")\nresponse = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n  header=decoded_template_def$header,\n  title=title,\n  content=content,\n  buttons=buttons,\n  footer=decoded_template_def$footer\n)))","slug":"fa9a9828f85eabae9e2643f53f509ef5","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":1062,"name":"out","type":2,"description":"","passableThroughUrl":"0","value":"0","test":189,"parentVariable":null,"globalId":1062},{"class_name":"TestVariable","id":1065,"name":"paragraph","type":0,"description":"","passableThroughUrl":"0","value":null,"test":189,"parentVariable":null,"globalId":1065},{"class_name":"TestVariable","id":1066,"name":"button_label","type":0,"description":"","passableThroughUrl":"0","value":null,"test":189,"parentVariable":null,"globalId":1066},{"class_name":"TestVariable","id":1067,"name":"traits","type":0,"description":"","passableThroughUrl":"0","value":null,"test":189,"parentVariable":null,"globalId":1067},{"class_name":"TestVariable","id":1068,"name":"inserts","type":0,"description":"","passableThroughUrl":"0","value":null,"test":189,"parentVariable":null,"globalId":1068},{"class_name":"TestVariable","id":1069,"name":"scores","type":0,"description":"","passableThroughUrl":"0","value":null,"test":189,"parentVariable":null,"globalId":1069},{"class_name":"TestVariable","id":1212,"name":"title","type":0,"description":"","passableThroughUrl":"0","value":null,"test":189,"parentVariable":null,"globalId":1212},{"class_name":"TestVariable","id":1266,"name":"template_def","type":0,"description":"","passableThroughUrl":"0","value":"{\"layout\":\"default_layout\", \"header\":\"<p>Welcome.<\/p>\",\"footer\":\"\"}","test":189,"parentVariable":null,"globalId":1266},{"class_name":"TestVariable","id":1268,"name":"template_def","type":1,"description":"","passableThroughUrl":"0","value":null,"test":189,"parentVariable":null,"globalId":1268}],"logs":[],"sourceWizard":null,"sourceWizardObject":null,"updatedOn":"2016-03-23 21:03:14","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"","globalId":189,"owner":1,"groups":""},"testName":"source_feedback","updatedOn":"2016-03-02 19:45:25","updatedByName":"admin","globalId":45,"owner":1,"groups":""},"updatedOn":"2016-03-23 21:03:15","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"_concerto_core","globalId":195,"owner":1,"groups":""},{"class_name":"Test","id":196,"name":"form","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":1,"code":"decoded_template_def = fromJSON(template_def)\n\nisValid = function(type, value, condition, form, response) {\n  valid = T\n  if(!is.null(response)) {\n    env_vld = new.env()\n    if(length(form) > 0) {\n      for(i in 1:length(form)) {\n        v = response[[form[[i]]$name]]\n        assign(form[[i]]$name, v, envir=env_vld)\n      }\n    }\n\n    res = try(eval(parse(text=condition), envir=env_vld), T)\n    if(!is.null(res) && res == T) {\n      valid = T\n    }\n    if(!is.null(res) && res == F) {\n      valid = F\n    }\n  }\n  return(valid)\n}\n\ngetContent = function(paragraph, form, response) {\n  content = paragraph\n  if(length(form) > 0) {\n    for(i in 1:length(form)) {\n      type = form[[i]]$type\n      value = response[[form[[i]]$name]]\n      if(is.null(value)) {\n        value = form[[i]]$default\n      }\n      condition = form[[i]]$validation\n      valid = isValid(type, value, condition, form, response)\n      control = \"\"\n\n      if(type == \"singleline\") {\n        control = paste(\"<input id='form\",i,\"' name='\",form[[i]]$name,\"' type='text' value='\",value,\"' \/>\",sep=\"\")\n      } else if(type == \"password\") {\n        control = paste(\"<input id='form\",i,\"' name='\",form[[i]]$name,\"' type='password' value='\",value,\"' \/>\",sep=\"\")\n      } else if(type == \"multiline\") {\n        control = paste(\"<textarea id='form\",i,\"' name='\",form[[i]]$name,\"'>\",value,\"<\/textarea>\",sep=\"\")\n      } else if(type == \"select\") {\n        control = paste(\"<select id='form\",i,\"' name='\",form[[i]]$name,\"'>\",sep=\"\")\n        options = \"\"\n        if(length(form[[i]]$select_options) > 0) {\n          for(j in 1:length(form[[i]]$select_options)) {\n            options = paste(options, \"<option value='\",form[[i]]$select_options[[j]]$value,\"'>\",form[[i]]$select_options[[j]]$label,\"<\/option>\",sep=\"\")\n          }\n        }\n        control = paste(control, options, \"<\/select>\",sep=\"\")\n      } else if(type == \"checkbox\") {\n        checked = \"\"\n        if(value==\"1\"){\n          checked = \"checked\"\n        }\n        control = paste(\"<input id='form\",i,\"' name='\",form[[i]]$name,\"' type='checkbox' \",checked,\" value='1'>\",sep=\"\")\n      }\n\n      validationHighlight = \"\"\n      if(!is.null(response) && !valid) {\n        validationHighlight = \"validationHighlight\"\n      }\n      content = paste(content, \"<div class='formField \",validationHighlight,\"'><label for='form\",i,\"'>\",form[[i]]$label,\"<\/label><br\/>\",control,\"<\/div>\",sep=\"\")\n    }\n  }\n  return(content)\n}\n\ngetAlert = function(form, response) {\n  alert = NULL\n  \n  if(length(form) > 0) {\n    for(i in 1:length(form)) {\n      type = form[[i]]$type\n      value = response[[form[[i]]$name]]\n      condition = form[[i]]$validation\n      valid = isValid(type, value, condition, form, response)\n\n      validationHighlight = \"\"\n      if(!is.null(response) && !valid) {\n        alert = paste(alert, \"<div>\", form[[i]]$alert, \"<\/div>\", sep=\"\")\n      }\n    }\n  }\n  return(alert)\n}\n      \ngetTemplateParams = function(template_params){\n  params = list()\n  if(!is.null(inserts) && is.list(inserts)) {\n    params = inserts\n  }\n  for(key in ls(template_params)) {\n    params[[key]] = template_params[[key]]\n  }\n  return(params)\n}\n\nbuttons = paste('<div class=\"button_panel button_panel_form\"><button name=\"button\" class=\"form_button\">',button_label,'<\/button><\/div>',sep=\"\")\n\ncontent = paragraph\nform = fromJSON(form)\n        \nif(!is.null(warning_msg) && (is.na(warning_msg) || warning_msg == \"\")) {\n  warning_msg = NULL\n}\n\nresponse = NULL\nwhile(T) {\n  content = getContent(paragraph, form, response)\n  response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n    header=decoded_template_def$header, \n    title=title,\n    content=content, \n    warning_msg=warning_msg, \n    buttons=buttons,\n    footer=decoded_template_def$footer\n  )))\n  warning_msg = getAlert(form, response)\n  if(is.null(warning_msg) || warning_msg == \"\") { break }\n}\n\nresponse$isTimeout <- NULL\nresponse$buttonPressed <- NULL\nresponse$timeTaken <- NULL","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":1149,"name":"out","type":2,"description":"","passableThroughUrl":"0","value":"0","test":196,"parentVariable":952,"globalId":1149},{"class_name":"TestVariable","id":1152,"name":"form","type":0,"description":"<p>Form fields list<\/p>\n","passableThroughUrl":"0","value":"[]","test":196,"parentVariable":955,"globalId":1152},{"class_name":"TestVariable","id":1153,"name":"button_label","type":0,"description":"<p>Continue button label<\/p>\n","passableThroughUrl":"0","value":"continue","test":196,"parentVariable":956,"globalId":1153},{"class_name":"TestVariable","id":1154,"name":"paragraph","type":0,"description":"<p>Form page paragraph<\/p>\n","passableThroughUrl":"0","value":"<p>Please answer the questions below:<\/p>\n","test":196,"parentVariable":957,"globalId":1154},{"class_name":"TestVariable","id":1155,"name":"response","type":1,"description":"<p><span style=\"line-height: 20.8px;\">Submitted user response R list object<\/span><\/p>","passableThroughUrl":"0","value":null,"test":196,"parentVariable":958,"globalId":1155},{"class_name":"TestVariable","id":1156,"name":"inserts","type":0,"description":"","passableThroughUrl":"0","value":null,"test":196,"parentVariable":959,"globalId":1156},{"class_name":"TestVariable","id":1157,"name":"warning_msg","type":0,"description":"","passableThroughUrl":"0","value":null,"test":196,"parentVariable":960,"globalId":1157},{"class_name":"TestVariable","id":1203,"name":"title","type":0,"description":"","passableThroughUrl":"0","value":"DEMO TEST","test":196,"parentVariable":1202,"globalId":1203},{"class_name":"TestVariable","id":1239,"name":"template_def","type":0,"description":"","passableThroughUrl":"0","value":"{\"layout\":\"default_layout\", \"header\":\"<p>Welcome.<\/p>\",\"footer\":\"\"}","test":196,"parentVariable":1238,"globalId":1239},{"class_name":"TestVariable","id":1241,"name":"template_def","type":1,"description":"","passableThroughUrl":"0","value":null,"test":196,"parentVariable":1240,"globalId":1241}],"sourceWizard":46,"sourceWizardObject":{"class_name":"TestWizard","id":46,"name":"form","description":"","accessibility":0,"protected":"1","archived":"0","steps":[{"class_name":"TestWizardStep","id":90,"title":"Presentation","description":"<p>Visual presentation of form page<\/p>\n","orderNum":0,"colsNum":0,"wizard":46,"params":[{"class_name":"TestWizardParam","id":361,"label":"Button label","description":"<p>Continue button label<\/p>\n","hideCondition":"","type":0,"passableThroughUrl":"0","value":"continue","testVariable":956,"name":"button_label","wizardStep":90,"stepTitle":"Presentation","order":3,"wizard":46,"definition":{"placeholder":"0"},"globalId":361},{"class_name":"TestWizardParam","id":362,"label":"Paragraph","description":"<p>Form page paragraph<\/p>\n","hideCondition":"","type":2,"passableThroughUrl":"0","value":"<p>Please answer the questions below:<\/p>\n","testVariable":957,"name":"paragraph","wizardStep":90,"stepTitle":"Presentation","order":2,"wizard":46,"definition":{"placeholder":"0"},"globalId":362},{"class_name":"TestWizardParam","id":390,"label":"Title","description":"","hideCondition":"","type":0,"passableThroughUrl":"0","value":"DEMO TEST","testVariable":1202,"name":"title","wizardStep":90,"stepTitle":"Presentation","order":1,"wizard":46,"definition":{"placeholder":0},"globalId":390}],"globalId":90},{"class_name":"TestWizardStep","id":91,"title":"Forms","description":"<p>Forms declaration<\/p>\n","orderNum":1,"colsNum":0,"wizard":46,"params":[{"class_name":"TestWizardParam","id":363,"label":"Form fields","description":"<p>Form fields list<\/p>\n","hideCondition":"","type":10,"passableThroughUrl":"0","value":"[]","testVariable":955,"name":"form","wizardStep":91,"stepTitle":"Forms","order":0,"wizard":46,"definition":{"placeholder":"0","element":{"type":9,"definition":{"placeholder":"0","fields":[{"type":"0","name":"name","label":"Name","definition":{"placeholder":"0"}},{"type":"3","name":"type","label":"Type","definition":{"placeholder":"0","options":[{"value":"singleline","label":"single line text"},{"value":"multiline","label":"multi line text"},{"value":"select","label":"drop-down list"},{"value":"checkbox","label":"checkbox"},{"value":"password","label":"password"}]}},{"type":"10","name":"select_options","label":"Options","definition":{"placeholder":"0","element":{"type":9,"definition":{"placeholder":"0","fields":[{"type":"0","name":"value","label":"Value"},{"type":"0","name":"label","label":"Label"}]}}},"hideCondition":"parent.type != \"select\""},{"type":"0","name":"label","label":"Label","definition":{"placeholder":"0"}},{"type":0,"name":"validation","label":"Validation","definition":{"placeholder":"0"}},{"type":"0","name":"alert","label":"Validation alert","hideCondition":"parent.validation == \"\"","definition":{"placeholder":"0"}},{"type":0,"name":"default","label":"Default value","definition":{"placeholder":0}}]}}},"globalId":363}],"globalId":91}],"test":181,"testObject":{"class_name":"Test","id":181,"name":"source_form","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":0,"code":"decoded_template_def = fromJSON(template_def)\n\nisValid = function(type, value, condition, form, response) {\n  valid = T\n  if(!is.null(response)) {\n    env_vld = new.env()\n    if(length(form) > 0) {\n      for(i in 1:length(form)) {\n        v = response[[form[[i]]$name]]\n        assign(form[[i]]$name, v, envir=env_vld)\n      }\n    }\n\n    res = try(eval(parse(text=condition), envir=env_vld), T)\n    if(!is.null(res) && res == T) {\n      valid = T\n    }\n    if(!is.null(res) && res == F) {\n      valid = F\n    }\n  }\n  return(valid)\n}\n\ngetContent = function(paragraph, form, response) {\n  content = paragraph\n  if(length(form) > 0) {\n    for(i in 1:length(form)) {\n      type = form[[i]]$type\n      value = response[[form[[i]]$name]]\n      if(is.null(value)) {\n        value = form[[i]]$default\n      }\n      condition = form[[i]]$validation\n      valid = isValid(type, value, condition, form, response)\n      control = \"\"\n\n      if(type == \"singleline\") {\n        control = paste(\"<input id='form\",i,\"' name='\",form[[i]]$name,\"' type='text' value='\",value,\"' \/>\",sep=\"\")\n      } else if(type == \"password\") {\n        control = paste(\"<input id='form\",i,\"' name='\",form[[i]]$name,\"' type='password' value='\",value,\"' \/>\",sep=\"\")\n      } else if(type == \"multiline\") {\n        control = paste(\"<textarea id='form\",i,\"' name='\",form[[i]]$name,\"'>\",value,\"<\/textarea>\",sep=\"\")\n      } else if(type == \"select\") {\n        control = paste(\"<select id='form\",i,\"' name='\",form[[i]]$name,\"'>\",sep=\"\")\n        options = \"\"\n        if(length(form[[i]]$select_options) > 0) {\n          for(j in 1:length(form[[i]]$select_options)) {\n            options = paste(options, \"<option value='\",form[[i]]$select_options[[j]]$value,\"'>\",form[[i]]$select_options[[j]]$label,\"<\/option>\",sep=\"\")\n          }\n        }\n        control = paste(control, options, \"<\/select>\",sep=\"\")\n      } else if(type == \"checkbox\") {\n        checked = \"\"\n        if(value==\"1\"){\n          checked = \"checked\"\n        }\n        control = paste(\"<input id='form\",i,\"' name='\",form[[i]]$name,\"' type='checkbox' \",checked,\" value='1'>\",sep=\"\")\n      }\n\n      validationHighlight = \"\"\n      if(!is.null(response) && !valid) {\n        validationHighlight = \"validationHighlight\"\n      }\n      content = paste(content, \"<div class='formField \",validationHighlight,\"'><label for='form\",i,\"'>\",form[[i]]$label,\"<\/label><br\/>\",control,\"<\/div>\",sep=\"\")\n    }\n  }\n  return(content)\n}\n\ngetAlert = function(form, response) {\n  alert = NULL\n  \n  if(length(form) > 0) {\n    for(i in 1:length(form)) {\n      type = form[[i]]$type\n      value = response[[form[[i]]$name]]\n      condition = form[[i]]$validation\n      valid = isValid(type, value, condition, form, response)\n\n      validationHighlight = \"\"\n      if(!is.null(response) && !valid) {\n        alert = paste(alert, \"<div>\", form[[i]]$alert, \"<\/div>\", sep=\"\")\n      }\n    }\n  }\n  return(alert)\n}\n      \ngetTemplateParams = function(template_params){\n  params = list()\n  if(!is.null(inserts) && is.list(inserts)) {\n    params = inserts\n  }\n  for(key in ls(template_params)) {\n    params[[key]] = template_params[[key]]\n  }\n  return(params)\n}\n\nbuttons = paste('<div class=\"button_panel button_panel_form\"><button name=\"button\" class=\"form_button\">',button_label,'<\/button><\/div>',sep=\"\")\n\ncontent = paragraph\nform = fromJSON(form)\n        \nif(!is.null(warning_msg) && (is.na(warning_msg) || warning_msg == \"\")) {\n  warning_msg = NULL\n}\n\nresponse = NULL\nwhile(T) {\n  content = getContent(paragraph, form, response)\n  response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n    header=decoded_template_def$header, \n    title=title,\n    content=content, \n    warning_msg=warning_msg, \n    buttons=buttons,\n    footer=decoded_template_def$footer\n  )))\n  warning_msg = getAlert(form, response)\n  if(is.null(warning_msg) || warning_msg == \"\") { break }\n}\n\nresponse$isTimeout <- NULL\nresponse$buttonPressed <- NULL\nresponse$timeTaken <- NULL","slug":"486c31e642338ef4e6c977fb5f71f822","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":952,"name":"out","type":2,"description":"","passableThroughUrl":"0","value":"0","test":181,"parentVariable":null,"globalId":952},{"class_name":"TestVariable","id":955,"name":"form","type":0,"description":"","passableThroughUrl":"0","value":null,"test":181,"parentVariable":null,"globalId":955},{"class_name":"TestVariable","id":956,"name":"button_label","type":0,"description":"","passableThroughUrl":"0","value":null,"test":181,"parentVariable":null,"globalId":956},{"class_name":"TestVariable","id":957,"name":"paragraph","type":0,"description":"","passableThroughUrl":"0","value":null,"test":181,"parentVariable":null,"globalId":957},{"class_name":"TestVariable","id":958,"name":"response","type":1,"description":"<p><span style=\"line-height: 20.8px;\">Submitted user response R list object<\/span><\/p>","passableThroughUrl":"0","value":null,"test":181,"parentVariable":null,"globalId":958},{"class_name":"TestVariable","id":959,"name":"inserts","type":0,"description":"","passableThroughUrl":"0","value":null,"test":181,"parentVariable":null,"globalId":959},{"class_name":"TestVariable","id":960,"name":"warning_msg","type":0,"description":"","passableThroughUrl":"0","value":null,"test":181,"parentVariable":null,"globalId":960},{"class_name":"TestVariable","id":1202,"name":"title","type":0,"description":"","passableThroughUrl":"0","value":null,"test":181,"parentVariable":null,"globalId":1202},{"class_name":"TestVariable","id":1238,"name":"template_def","type":0,"description":"","passableThroughUrl":"0","value":"{\"layout\":\"default_layout\", \"header\":\"<p>Welcome.<\/p>\",\"footer\":\"\"}","test":181,"parentVariable":null,"globalId":1238},{"class_name":"TestVariable","id":1240,"name":"template_def","type":1,"description":"","passableThroughUrl":"0","value":null,"test":181,"parentVariable":null,"globalId":1240}],"logs":[],"sourceWizard":null,"sourceWizardObject":null,"updatedOn":"2016-03-23 21:02:40","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"","globalId":181,"owner":1,"groups":""},"testName":"source_form","updatedOn":"2016-03-02 19:24:43","updatedByName":"admin","globalId":46,"owner":1,"groups":""},"updatedOn":"2016-03-23 21:02:41","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"_concerto_core","globalId":196,"owner":1,"groups":""},{"class_name":"Test","id":197,"name":"questionnaire","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":1,"code":"decoded_template_def = fromJSON(template_def)\n\ngetQuestions = function(){\n  questions = NULL\n  ib = fromJSON(item_bank)\n  if(ib$table_type == \"default\" || ib$table_type == \"custom\") {\n    table = \"default_questionnaire_item_table\"\n    question_column = \"question_id\"\n    order_column = \"order_id\"\n    trait_column = \"trait\"\n    reversed_score_column = \"reversed_score\"\n    test_id_column = \"test_id\"\n    test_id = concerto$mainTest$id\n    if(ib$table_type == \"custom\") {\n      table = ib$custom_table\n      question_column = ib$custom_question_column$column\n      order_column = ib$custom_order_column$column\n      trait_column = ib$custom_trait_column$column\n      reversed_score_column = ib$custom_reversed_score_column$column\n      test_id_column = ib$custom_test_id_column$column\n    }\n\n    questions = concerto.table.query(\"SELECT id, `{{question_column}}` AS `question`, `{{trait_column}}` AS `trait`, `{{reversed_score_column}}` AS `reversed_score` FROM `{{table}}` WHERE `{{test_id_column}}` = {{test_id}} ORDER BY `{{order_column}}` ASC\", list(\n      question_column=question_column,\n      order_column=order_column,\n      trait_column=trait_column,\n      reversed_score_column=reversed_score_column,\n      table=table,\n      test_id_column=test_id_column,\n      test_id=test_id\n    ))\n  }\n  if(ib$table_type == \"direct\") {\n    if(length(ib$direct_table) > 0) {\n      for(i in 1:length(ib$direct_table)) {\n        questions = rbind(questions, as.list(ib$direct_table[[i]]))\n      }\n    }\n  }\n\n  if(dim(questions)[1] > 0 && order == \"random\") {\n    questions = questions[sample(1:dim(questions)[1]),]\n  }\n\n  return(questions)\n}\n\ngetContent = function(questions, current_page, response_set, not_valid, all_responses) {\n  content = paragraph\n  content = paste0(content, \"<table class='questionnaireResponseTable'>\")\n  content = paste0(content, \"<tr>\")\n  content = paste0(content, \"<th class='questionnaireHeaderCell'><\/th>\")\n  if(dim(response_set)[1] > 0) {\n    for(i in 1:dim(response_set)[1]) {\n      response = response_set[i,]\n      content = paste0(content, \"<th class='questionnaireHeaderCell'>\",response$label,\"<\/th>\")\n    }\n  }\n  content = paste0(content, \"<\/tr>\")\n  for(i in ((current_page-1)*as.numeric(items_per_page)+1):(current_page*as.numeric(items_per_page))) {\n    if(i > dim(questions)[1]) { break }\n    question = questions[i,]\n    validationHighlight = \"\"\n    if(question$id %in% not_valid) {\n      validationHighlight = \"validationHighlight\"\n    }\n\n    content = paste0(content, \"<tr class='\",validationHighlight,\"'>\")\n    content = paste0(content, \"<td class='questionnaireQuestionCell'>\",question$question,\"<\/td>\")\n    if(dim(response_set)[1] > 0) {\n      for(i in 1:dim(response_set)[1]) {\n        response = response_set[i,]\n        checked = \"\"\n        if(!is.null(all_responses[[paste0(\"q\",question$id)]]) && all_responses[[paste0(\"q\",question$id)]] == response$value) { checked = \"checked\" }\n        content = paste0(content, \"<td class='questionnaireResponseCell'><label for='input_response_\",question$id,\"_\",response$value,\"' class='questionnaire_label'><input type='radio' id='input_response_\",question$id,\"_\",response$value,\"' name='q\",question$id,\"' value='\",response$value,\"' \",checked,\" \/><\/label><\/td>\")\n      }\n    }\n    content = paste0(content, \"<\/tr>\")\n  }\n  content = paste0(content, \"<\/table>\")\n\n  return(content)\n}\n\naddAnswers = function(answers, response, response_set, questions, rb, all_responses, scores) {\n  max_score = max(as.numeric(response_set[,\"score\"]))\n  min_score = min(as.numeric(response_set[,\"score\"]))\n\n  for(var in ls(response)) {\n    if(var == \"buttonPressed\" || var == \"timeTaken\" || var == \"isTimeout\") { next }\n\n    question_id = substr(var, 2, nchar(var))\n    value = response[[var]]\n    score = NULL\n    for(i in 1:dim(questions)[1]) {\n      question = questions[i,]\n      if(question$id == question_id) {\n        trait = question$trait\n        if(is.null(scores[[trait]])) {\n          scores[[trait]] = 0\n        }\n        for(j in 1:dim(response_set)[1]) {\n          r = response_set[j,]\n          if(r$value == value) {\n            score = as.numeric(r$score)\n            if(question$reversed_score == \"1\") {\n              score = max_score - score + min_score\n            }\n            scores[[trait]] = scores[[trait]] + score\n            break\n          }\n        }\n        break\n      }\n    }\n    saveResponse(rb, question_id, value, score, trait)\n  }\n  return(scores)\n}\n\nremoveAnswers = function(questions, current_page, response_set, all_responses, scores) {\n  max_score = max(as.numeric(response_set[,\"score\"]))\n  min_score = min(as.numeric(response_set[,\"score\"]))\n\n  for(i in ((current_page-1)*as.numeric(items_per_page)+1):(current_page*as.numeric(items_per_page))) {\n    if(i > dim(questions)[1]) { break }\n    question = questions[i,]\n    trait = question$trait\n    if(is.null(scores[[trait]])) {\n      scores[[trait]] = 0\n    }\n\n    if(dim(response_set)[1] > 0) {\n      for(i in 1:dim(response_set)[1]) {\n        response = response_set[i,]\n        if(!is.null(all_responses[[paste0(\"q\",question$id)]]) && all_responses[[paste0(\"q\",question$id)]] == response$value) { \n          score = as.numeric(response$score)\n          if(question$reversed_score == \"1\") {\n            score = max_score - score + min_score\n          }\n          scores[[trait]] = scores[[trait]] - score\n        }\n      }\n    }\n  }\n  return(scores)\n}\n\nsaveResponse = function(rb, question_id, value, score, trait) {\n  table = \"default_questionnaire_response_table\"\n  session_id_column = \"session_id\"\n  question_id_column = \"question_id\"\n  value_column = \"value\"\n  score_column = \"score\"\n  trait_column = \"trait\"\n  if(rb$table_type == \"custom\") {\n    table = rb$custom_table\n    session_id_column = rb$custom_session_id_column$column\n    question_id_column = rb$custom_question_id_column$column\n    value_column = rb$custom_value_column$column\n    score_column = rb$custom_score_column$column\n    trait_column = rb$custom_trait_column$column\n  }\n  session_id = 0\n  if(is.list(session)) {\n    session_id = session$id\n  }\n\n  exists = FALSE\n  record = concerto.table.query(\"SELECT * FROM `{{table}}` WHERE `{{session_id_column}}`={{session_id}} AND `{{question_id_column}}`={{question_id}}\", list(\n    table=table,\n    session_id_column=session_id_column,\n    session_id=session_id,\n    question_id_column=question_id_column,\n    question_id=question_id\n  ))\n  if(dim(record)[1] > 0) { exists = TRUE }\n\n  if(exists) {\n    concerto.table.query(\"UPDATE `{{table}}` SET `{{value_column}}`='{{value}}', `{{score_column}}`={{score}}, `{{trait_column}}`='{{trait}}' WHERE `{{session_id_column}}`={{session_id}} AND `{{question_id_column}}`={{question_id}}\", list(\n      table=table,\n      session_id_column=session_id_column,\n      session_id=session_id,\n      question_id_column=question_id_column,\n      question_id=question_id,\n      value_column=value_column,\n      value=value,\n      score_column=score_column,\n      score=score,\n      trait_column=trait_column,\n      trait=trait\n    ))\n  } else {\n    concerto.table.query(\"INSERT INTO `{{table}}` SET `{{session_id_column}}`={{session_id}}, `{{question_id_column}}`={{question_id}}, `{{value_column}}`='{{value}}', `{{score_column}}`={{score}}, `{{trait_column}}`='{{trait}}'\", list(\n      table=table,\n      session_id_column=session_id_column,\n      session_id=session_id,\n      question_id_column=question_id_column,\n      question_id=question_id,\n      value_column=value_column,\n      value=value,\n      score_column=score_column,\n      score=score,\n      trait_column=trait_column,\n      trait=trait\n    ))\n  }\n}\n\ngetNotValid = function(response, current_page, questions) {\n  not_valid = c()\n  for(i in ((current_page-1)*as.numeric(items_per_page)+1):(current_page*as.numeric(items_per_page))) {\n    if(i > dim(questions)[1]) { break }\n    question = questions[i,]\n    if(response_required == \"1\" && is.null(response[[paste0(\"q\",question$id)]])) {\n      not_valid = c(not_valid, question$id)\n    }\n  }\n  return(not_valid)\n}\n\ngetTemplateParams = function(template_params){\n  params = list()\n  if(!is.null(inserts) && is.list(inserts)) {\n    params = inserts\n  }\n  for(key in ls(template_params)) {\n    params[[key]] = template_params[[key]]\n  }\n  return(params)\n}\n\nrb = fromJSON(response_bank)                \nrs = fromJSON(response_options)\nresponse_set = NULL\nif(length(rs) > 0) {\n  for(i in 1:length(rs)) {\n    response_set = rbind(response_set, rs[[i]])\n  }\n}\ncurrent_page = 1\nquestions = getQuestions()\npage_count = ceiling(dim(questions)[1] \/ as.numeric(items_per_page))\nwarning_msg = NULL\nresponse = NULL\n\nanswers = list()\nnot_valid = c()\ntimer_set = FALSE\ntime_limit = as.numeric(time_limit)\nif(time_limit > 0) { timer_set = TRUE }\nall_responses = list()\nscores = list()\nwhile(T) {\n  buttons = \"<div class='button_panel button_panel_questionnaire'>\"\n  if(current_page > 1 && can_go_back == \"1\") {\n    buttons = paste0(buttons, \"<button name='previous' class='questionnaire_button'>\",previous_button_label,\"<\/button>\")\n  }\n  if(page_count > 1) {\n    buttons = paste0(buttons, \"<div id='page_number'>page \", current_page, \" of \", page_count,\"<\/div>\")\n  }\n  if(current_page <= page_count) {\n    buttons = paste0(buttons, \"<button name='next' class='questionnaire_button'>\",next_button_label,\"<\/button>\")\n  }\n  buttons = paste0(buttons,'<\/div>')\n  content = getContent(questions, current_page, response_set, not_valid, all_responses)\n  scores = removeAnswers(questions, current_page, response_set, all_responses, scores)\n  response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n    header=decoded_template_def$header, \n    title=title,\n    content=content, \n    warning_msg=warning_msg, \n    buttons=buttons,\n    footer=decoded_template_def$footer\n  )), timeLimit=time_limit)\n  warning_msg = NULL\n\n  if(timer_set) {\n    time_limit = time_limit - as.numeric(response$timeTaken)\n    if(response$isTimeout == \"1\") {\n      .branch = \"out_of_time\"\n      break\n    }\n  }\n  if(response$buttonPressed == \"next\") {\n    for(var in ls(response)) {\n      if(var == \"buttonPressed\" || var == \"timeTaken\" || var == \"isTimeout\") { next }\n      all_responses[[var]] = response[[var]]\n    }\n\n    not_valid = getNotValid(response, current_page, questions)\n    scores = addAnswers(answers, response, response_set, questions, rb, all_responses, scores)\n    if(length(not_valid) == 0) {\n      current_page = current_page + 1\n    } else {\n      warning_msg = no_response_alert\n    }\n    if(current_page > page_count) { break }\n  } \n  if(response$buttonPressed == \"previous\") {\n    current_page = current_page - 1\n    not_valid = c()\n  }\n}\nrm(questions)","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":1158,"name":"answered","type":2,"description":"<p>Passed all pages of questions successfuly<\/p>\n","passableThroughUrl":"0","value":"0","test":197,"parentVariable":981,"globalId":1158},{"class_name":"TestVariable","id":1160,"name":"paragraph","type":0,"description":"<p>Item page pargraph<\/p>\n","passableThroughUrl":"0","value":"<p>Please answer the questions below:<\/p>\n","test":197,"parentVariable":983,"globalId":1160},{"class_name":"TestVariable","id":1161,"name":"next_button_label","type":0,"description":"<p>Label of button used to submit responses and progress forward<\/p>\n","passableThroughUrl":"0","value":"next","test":197,"parentVariable":984,"globalId":1161},{"class_name":"TestVariable","id":1162,"name":"order","type":0,"description":"<p>Items order:<\/p>\n\n<ul>\n\t<li><strong>manual<\/strong>&nbsp;- will be set from&nbsp;<strong>order<\/strong>&nbsp;field of each item<\/li>\n\t<li><strong>random<\/strong>&nbsp;- every questionnaire run will have shuffled questions order<\/li>\n<\/ul>\n","passableThroughUrl":"0","value":"random","test":197,"parentVariable":985,"globalId":1162},{"class_name":"TestVariable","id":1163,"name":"item_bank","type":0,"description":"","passableThroughUrl":"0","value":"{\"table_type\":\"direct\",\"direct_table\":[],\"custom_table\":\"\",\"custom_question_column\":{},\"custom_order_column\":{},\"custom_trait_column\":{},\"custom_reversed_score_column\":{},\"custom_test_id_column\":{}}","test":197,"parentVariable":986,"globalId":1163},{"class_name":"TestVariable","id":1164,"name":"items_per_page","type":0,"description":"<p>Maximum items that can be displayed on a single page<\/p>\n","passableThroughUrl":"0","value":"10","test":197,"parentVariable":987,"globalId":1164},{"class_name":"TestVariable","id":1165,"name":"response_options","type":0,"description":"<p>Set of possible response options<\/p>\n","passableThroughUrl":"0","value":"[]","test":197,"parentVariable":988,"globalId":1165},{"class_name":"TestVariable","id":1166,"name":"response_required","type":0,"description":"<p>Check if all responses must be given<\/p>\n","passableThroughUrl":"0","value":"1","test":197,"parentVariable":989,"globalId":1166},{"class_name":"TestVariable","id":1167,"name":"no_response_alert","type":0,"description":"<p>Alert that will be shown when an item is left unanswered<\/p>\n","passableThroughUrl":"0","value":"All questions need to be answered!","test":197,"parentVariable":990,"globalId":1167},{"class_name":"TestVariable","id":1168,"name":"can_go_back","type":0,"description":"<p>Check to allow participants to go back and change already given responses<\/p>\n","passableThroughUrl":"0","value":"1","test":197,"parentVariable":991,"globalId":1168},{"class_name":"TestVariable","id":1169,"name":"previous_button_label","type":0,"description":"<p>Label of button used to go back to page of items already answered<\/p>\n","passableThroughUrl":"0","value":"previous","test":197,"parentVariable":992,"globalId":1169},{"class_name":"TestVariable","id":1170,"name":"time_limit","type":0,"description":"<p>Time limit in seconds. Use <b>0&nbsp;<\/b>for unlimited time.<\/p>\n","passableThroughUrl":"0","value":"0","test":197,"parentVariable":993,"globalId":1170},{"class_name":"TestVariable","id":1171,"name":"response_bank","type":0,"description":"<p>Response bank definition.<\/p>\n","passableThroughUrl":"0","value":"{\"table_type\":\"default\",\"custom_table\":\"\",\"custom_session_id_column\":{},\"custom_question_id_column\":{},\"custom_value_column\":{},\"custom_score_column\":{},\"custom_trait_column\":{}}","test":197,"parentVariable":994,"globalId":1171},{"class_name":"TestVariable","id":1173,"name":"session","type":0,"description":"<p>Session R list object<\/p>\n","passableThroughUrl":"0","value":null,"test":197,"parentVariable":996,"globalId":1173},{"class_name":"TestVariable","id":1174,"name":"inserts","type":0,"description":"","passableThroughUrl":"0","value":null,"test":197,"parentVariable":998,"globalId":1174},{"class_name":"TestVariable","id":1175,"name":"scores","type":1,"description":"<p>R list of scores where each element is named after trait. For trait&nbsp;<strong>A<\/strong>,&nbsp;<strong>B<\/strong>&nbsp;will output:<\/p>\n\n<ul>\n\t<li><strong>scores$A<\/strong><\/li>\n\t<li><strong>scores$B<\/strong><\/li>\n<\/ul>\n","passableThroughUrl":"0","value":null,"test":197,"parentVariable":999,"globalId":1175},{"class_name":"TestVariable","id":1176,"name":"out_of_time","type":2,"description":"<p>Run out of time<\/p>\n","passableThroughUrl":"0","value":null,"test":197,"parentVariable":997,"globalId":1176},{"class_name":"TestVariable","id":1207,"name":"title","type":0,"description":"","passableThroughUrl":"0","value":"DEMO TEST","test":197,"parentVariable":1206,"globalId":1207},{"class_name":"TestVariable","id":1249,"name":"template_def","type":1,"description":"","passableThroughUrl":"0","value":null,"test":197,"parentVariable":1248,"globalId":1249},{"class_name":"TestVariable","id":1257,"name":"session","type":1,"description":"","passableThroughUrl":"0","value":null,"test":197,"parentVariable":1256,"globalId":1257},{"class_name":"TestVariable","id":1280,"name":"template_def","type":0,"description":"","passableThroughUrl":"0","value":"{\"layout\":\"default_layout\", \"header\":\"<p>Welcome.<\/p>\",\"footer\":\"\"}","test":197,"parentVariable":1279,"globalId":1280}],"sourceWizard":47,"sourceWizardObject":{"class_name":"TestWizard","id":47,"name":"questionnaire","description":"","accessibility":0,"protected":"1","archived":"0","steps":[{"class_name":"TestWizardStep","id":92,"title":"Presentation","description":"<p>Questionnaire page presentation<\/p>\n","orderNum":0,"colsNum":0,"wizard":47,"params":[{"class_name":"TestWizardParam","id":365,"label":"Paragraph","description":"<p>Item page pargraph<\/p>\n","hideCondition":"","type":2,"passableThroughUrl":"0","value":"<p>Please answer the questions below:<\/p>\n","testVariable":983,"name":"paragraph","wizardStep":92,"stepTitle":"Presentation","order":2,"wizard":47,"definition":{"placeholder":"0"},"globalId":365},{"class_name":"TestWizardParam","id":392,"label":"Title","description":"","hideCondition":"","type":0,"passableThroughUrl":"0","value":"DEMO TEST","testVariable":1206,"name":"title","wizardStep":92,"stepTitle":"Presentation","order":1,"wizard":47,"definition":{"placeholder":0},"globalId":392}],"globalId":92},{"class_name":"TestWizardStep","id":93,"title":"Items and navigation","description":"<p>Items declaration<\/p>\n","orderNum":0,"colsNum":0,"wizard":47,"params":[{"class_name":"TestWizardParam","id":367,"label":"Items order","description":"<p>Items order:<\/p>\n\n<ul>\n\t<li><strong>manual<\/strong>&nbsp;- will be set from&nbsp;<strong>order<\/strong>&nbsp;field of each item<\/li>\n\t<li><strong>random<\/strong>&nbsp;- every questionnaire run will have shuffled questions order<\/li>\n<\/ul>\n","hideCondition":"","type":3,"passableThroughUrl":"0","value":"random","testVariable":985,"name":"order","wizardStep":93,"stepTitle":"Items and navigation","order":1,"wizard":47,"definition":{"placeholder":"0","options":[{"value":"manual","label":"manual"},{"value":"random","label":"random"}]},"globalId":367},{"class_name":"TestWizardParam","id":368,"label":"Item bank","description":"","hideCondition":"","type":9,"passableThroughUrl":"0","value":"{\"table_type\":\"direct\",\"direct_table\":[],\"custom_table\":\"\",\"custom_question_column\":{},\"custom_order_column\":{},\"custom_trait_column\":{},\"custom_reversed_score_column\":{},\"custom_test_id_column\":{}}","testVariable":986,"name":"item_bank","wizardStep":93,"stepTitle":"Items and navigation","order":0,"wizard":47,"definition":{"placeholder":"0","fields":[{"type":"3","name":"table_type","label":"Type","definition":{"options":[{"value":"default","label":"default"},{"value":"direct","label":"direct"},{"value":"custom","label":"custom"}]}},{"type":"10","name":"direct_table","label":"Items","definition":{"element":{"type":9,"definition":{"fields":[{"type":"0","name":"id","label":"Id"},{"type":"2","name":"question","label":"Question"},{"type":"0","name":"order","label":"Order","hideCondition":""},{"type":"0","name":"trait","label":"Trait"},{"type":"4","name":"reversed_score","label":"Reversed score"}]}}},"hideCondition":"parent.table_type != \"direct\""},{"type":"6","name":"custom_table","label":"Table","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_question_column","label":"Question column","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_order_column","label":"Order column","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_trait_column","label":"Trait column","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_reversed_score_column","label":"Reversed score column","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_test_id_column","label":"Test Id column","hideCondition":"parent.table_type != \"custom\""}]},"globalId":368},{"class_name":"TestWizardParam","id":369,"label":"Max items per page","description":"<p>Maximum items that can be displayed on a single page<\/p>\n","hideCondition":"","type":0,"passableThroughUrl":"0","value":"10","testVariable":987,"name":"items_per_page","wizardStep":93,"stepTitle":"Items and navigation","order":2,"wizard":47,"definition":{"placeholder":"0"},"globalId":369},{"class_name":"TestWizardParam","id":370,"label":"Next button label","description":"<p>Label of button used to submit responses and progress forward<\/p>\n","hideCondition":"","type":0,"passableThroughUrl":"0","value":"next","testVariable":984,"name":"next_button_label","wizardStep":93,"stepTitle":"Items and navigation","order":3,"wizard":47,"definition":{"placeholder":"0"},"globalId":370},{"class_name":"TestWizardParam","id":371,"label":"Go back","description":"<p>Check to allow participants to go back and change already given responses<\/p>\n","hideCondition":"","type":4,"passableThroughUrl":"0","value":"1","testVariable":991,"name":"can_go_back","wizardStep":93,"stepTitle":"Items and navigation","order":4,"wizard":47,"definition":{"placeholder":"0"},"globalId":371},{"class_name":"TestWizardParam","id":372,"label":"Previous button label","description":"<p>Label of button used to go back to page of items already answered<\/p>\n","hideCondition":"","type":0,"passableThroughUrl":"0","value":"previous","testVariable":992,"name":"previous_button_label","wizardStep":93,"stepTitle":"Items and navigation","order":5,"wizard":47,"definition":{"placeholder":"0"},"globalId":372}],"globalId":93},{"class_name":"TestWizardStep","id":94,"title":"Responses","description":"<p>Responses options<\/p>\n","orderNum":0,"colsNum":0,"wizard":47,"params":[{"class_name":"TestWizardParam","id":373,"label":"Response options","description":"<p>Set of possible response options<\/p>\n","hideCondition":"","type":10,"passableThroughUrl":"0","value":"[]","testVariable":988,"name":"response_options","wizardStep":94,"stepTitle":"Responses","order":1,"wizard":47,"definition":{"placeholder":"0","element":{"type":9,"definition":{"fields":[{"type":"0","name":"label","label":"Label"},{"type":"0","name":"value","label":"Value"},{"type":"0","name":"score","label":"Score"}]}}},"globalId":373},{"class_name":"TestWizardParam","id":374,"label":"Responses required","description":"<p>Check if all responses must be given<\/p>\n","hideCondition":"","type":4,"passableThroughUrl":"0","value":"1","testVariable":989,"name":"response_required","wizardStep":94,"stepTitle":"Responses","order":2,"wizard":47,"definition":{"placeholder":"0"},"globalId":374},{"class_name":"TestWizardParam","id":375,"label":"Unanswered item alert","description":"<p>Alert that will be shown when an item is left unanswered<\/p>\n","hideCondition":"","type":0,"passableThroughUrl":"0","value":"All questions need to be answered!","testVariable":990,"name":"no_response_alert","wizardStep":94,"stepTitle":"Responses","order":3,"wizard":47,"definition":{"placeholder":"0"},"globalId":375},{"class_name":"TestWizardParam","id":376,"label":"Time limit (seconds)","description":"<p>Time limit in seconds. Use <b>0&nbsp;<\/b>for unlimited time.<\/p>\n","hideCondition":"","type":0,"passableThroughUrl":"0","value":"0","testVariable":993,"name":"time_limit","wizardStep":94,"stepTitle":"Responses","order":4,"wizard":47,"definition":{"placeholder":"0"},"globalId":376},{"class_name":"TestWizardParam","id":377,"label":"Response bank","description":"<p>Response bank definition.<\/p>\n","hideCondition":"","type":9,"passableThroughUrl":"0","value":"{\"table_type\":\"default\",\"custom_table\":\"\",\"custom_session_id_column\":{},\"custom_question_id_column\":{},\"custom_value_column\":{},\"custom_score_column\":{},\"custom_trait_column\":{}}","testVariable":994,"name":"response_bank","wizardStep":94,"stepTitle":"Responses","order":0,"wizard":47,"definition":{"placeholder":"0","fields":[{"type":"3","name":"table_type","label":"Table type","definition":{"options":[{"value":"default","label":"default"},{"value":"custom","label":"custom"}]}},{"type":"6","name":"custom_table","label":"Table","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_session_id_column","label":"Session Id column","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_question_id_column","label":"Question Id column","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_value_column","label":"Value column","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_score_column","label":"Score column","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_trait_column","label":"Trait column","hideCondition":"parent.table_type != \"custom\""}]},"globalId":377}],"globalId":94}],"test":184,"testObject":{"class_name":"Test","id":184,"name":"source_questionnaire","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":0,"code":"decoded_template_def = fromJSON(template_def)\n\ngetQuestions = function(){\n  questions = NULL\n  ib = fromJSON(item_bank)\n  if(ib$table_type == \"default\" || ib$table_type == \"custom\") {\n    table = \"default_questionnaire_item_table\"\n    question_column = \"question_id\"\n    order_column = \"order_id\"\n    trait_column = \"trait\"\n    reversed_score_column = \"reversed_score\"\n    test_id_column = \"test_id\"\n    test_id = concerto$mainTest$id\n    if(ib$table_type == \"custom\") {\n      table = ib$custom_table\n      question_column = ib$custom_question_column$column\n      order_column = ib$custom_order_column$column\n      trait_column = ib$custom_trait_column$column\n      reversed_score_column = ib$custom_reversed_score_column$column\n      test_id_column = ib$custom_test_id_column$column\n    }\n\n    questions = concerto.table.query(\"SELECT id, `{{question_column}}` AS `question`, `{{trait_column}}` AS `trait`, `{{reversed_score_column}}` AS `reversed_score` FROM `{{table}}` WHERE `{{test_id_column}}` = {{test_id}} ORDER BY `{{order_column}}` ASC\", list(\n      question_column=question_column,\n      order_column=order_column,\n      trait_column=trait_column,\n      reversed_score_column=reversed_score_column,\n      table=table,\n      test_id_column=test_id_column,\n      test_id=test_id\n    ))\n  }\n  if(ib$table_type == \"direct\") {\n    if(length(ib$direct_table) > 0) {\n      for(i in 1:length(ib$direct_table)) {\n        questions = rbind(questions, as.list(ib$direct_table[[i]]))\n      }\n    }\n  }\n\n  if(dim(questions)[1] > 0 && order == \"random\") {\n    questions = questions[sample(1:dim(questions)[1]),]\n  }\n\n  return(questions)\n}\n\ngetContent = function(questions, current_page, response_set, not_valid, all_responses) {\n  content = paragraph\n  content = paste0(content, \"<table class='questionnaireResponseTable'>\")\n  content = paste0(content, \"<tr>\")\n  content = paste0(content, \"<th class='questionnaireHeaderCell'><\/th>\")\n  if(dim(response_set)[1] > 0) {\n    for(i in 1:dim(response_set)[1]) {\n      response = response_set[i,]\n      content = paste0(content, \"<th class='questionnaireHeaderCell'>\",response$label,\"<\/th>\")\n    }\n  }\n  content = paste0(content, \"<\/tr>\")\n  for(i in ((current_page-1)*as.numeric(items_per_page)+1):(current_page*as.numeric(items_per_page))) {\n    if(i > dim(questions)[1]) { break }\n    question = questions[i,]\n    validationHighlight = \"\"\n    if(question$id %in% not_valid) {\n      validationHighlight = \"validationHighlight\"\n    }\n\n    content = paste0(content, \"<tr class='\",validationHighlight,\"'>\")\n    content = paste0(content, \"<td class='questionnaireQuestionCell'>\",question$question,\"<\/td>\")\n    if(dim(response_set)[1] > 0) {\n      for(i in 1:dim(response_set)[1]) {\n        response = response_set[i,]\n        checked = \"\"\n        if(!is.null(all_responses[[paste0(\"q\",question$id)]]) && all_responses[[paste0(\"q\",question$id)]] == response$value) { checked = \"checked\" }\n        content = paste0(content, \"<td class='questionnaireResponseCell'><label for='input_response_\",question$id,\"_\",response$value,\"' class='questionnaire_label'><input type='radio' id='input_response_\",question$id,\"_\",response$value,\"' name='q\",question$id,\"' value='\",response$value,\"' \",checked,\" \/><\/label><\/td>\")\n      }\n    }\n    content = paste0(content, \"<\/tr>\")\n  }\n  content = paste0(content, \"<\/table>\")\n\n  return(content)\n}\n\naddAnswers = function(answers, response, response_set, questions, rb, all_responses, scores) {\n  max_score = max(as.numeric(response_set[,\"score\"]))\n  min_score = min(as.numeric(response_set[,\"score\"]))\n\n  for(var in ls(response)) {\n    if(var == \"buttonPressed\" || var == \"timeTaken\" || var == \"isTimeout\") { next }\n\n    question_id = substr(var, 2, nchar(var))\n    value = response[[var]]\n    score = NULL\n    for(i in 1:dim(questions)[1]) {\n      question = questions[i,]\n      if(question$id == question_id) {\n        trait = question$trait\n        if(is.null(scores[[trait]])) {\n          scores[[trait]] = 0\n        }\n        for(j in 1:dim(response_set)[1]) {\n          r = response_set[j,]\n          if(r$value == value) {\n            score = as.numeric(r$score)\n            if(question$reversed_score == \"1\") {\n              score = max_score - score + min_score\n            }\n            scores[[trait]] = scores[[trait]] + score\n            break\n          }\n        }\n        break\n      }\n    }\n    saveResponse(rb, question_id, value, score, trait)\n  }\n  return(scores)\n}\n\nremoveAnswers = function(questions, current_page, response_set, all_responses, scores) {\n  max_score = max(as.numeric(response_set[,\"score\"]))\n  min_score = min(as.numeric(response_set[,\"score\"]))\n\n  for(i in ((current_page-1)*as.numeric(items_per_page)+1):(current_page*as.numeric(items_per_page))) {\n    if(i > dim(questions)[1]) { break }\n    question = questions[i,]\n    trait = question$trait\n    if(is.null(scores[[trait]])) {\n      scores[[trait]] = 0\n    }\n\n    if(dim(response_set)[1] > 0) {\n      for(i in 1:dim(response_set)[1]) {\n        response = response_set[i,]\n        if(!is.null(all_responses[[paste0(\"q\",question$id)]]) && all_responses[[paste0(\"q\",question$id)]] == response$value) { \n          score = as.numeric(response$score)\n          if(question$reversed_score == \"1\") {\n            score = max_score - score + min_score\n          }\n          scores[[trait]] = scores[[trait]] - score\n        }\n      }\n    }\n  }\n  return(scores)\n}\n\nsaveResponse = function(rb, question_id, value, score, trait) {\n  table = \"default_questionnaire_response_table\"\n  session_id_column = \"session_id\"\n  question_id_column = \"question_id\"\n  value_column = \"value\"\n  score_column = \"score\"\n  trait_column = \"trait\"\n  if(rb$table_type == \"custom\") {\n    table = rb$custom_table\n    session_id_column = rb$custom_session_id_column$column\n    question_id_column = rb$custom_question_id_column$column\n    value_column = rb$custom_value_column$column\n    score_column = rb$custom_score_column$column\n    trait_column = rb$custom_trait_column$column\n  }\n  session_id = 0\n  if(is.list(session)) {\n    session_id = session$id\n  }\n\n  exists = FALSE\n  record = concerto.table.query(\"SELECT * FROM `{{table}}` WHERE `{{session_id_column}}`={{session_id}} AND `{{question_id_column}}`={{question_id}}\", list(\n    table=table,\n    session_id_column=session_id_column,\n    session_id=session_id,\n    question_id_column=question_id_column,\n    question_id=question_id\n  ))\n  if(dim(record)[1] > 0) { exists = TRUE }\n\n  if(exists) {\n    concerto.table.query(\"UPDATE `{{table}}` SET `{{value_column}}`='{{value}}', `{{score_column}}`={{score}}, `{{trait_column}}`='{{trait}}' WHERE `{{session_id_column}}`={{session_id}} AND `{{question_id_column}}`={{question_id}}\", list(\n      table=table,\n      session_id_column=session_id_column,\n      session_id=session_id,\n      question_id_column=question_id_column,\n      question_id=question_id,\n      value_column=value_column,\n      value=value,\n      score_column=score_column,\n      score=score,\n      trait_column=trait_column,\n      trait=trait\n    ))\n  } else {\n    concerto.table.query(\"INSERT INTO `{{table}}` SET `{{session_id_column}}`={{session_id}}, `{{question_id_column}}`={{question_id}}, `{{value_column}}`='{{value}}', `{{score_column}}`={{score}}, `{{trait_column}}`='{{trait}}'\", list(\n      table=table,\n      session_id_column=session_id_column,\n      session_id=session_id,\n      question_id_column=question_id_column,\n      question_id=question_id,\n      value_column=value_column,\n      value=value,\n      score_column=score_column,\n      score=score,\n      trait_column=trait_column,\n      trait=trait\n    ))\n  }\n}\n\ngetNotValid = function(response, current_page, questions) {\n  not_valid = c()\n  for(i in ((current_page-1)*as.numeric(items_per_page)+1):(current_page*as.numeric(items_per_page))) {\n    if(i > dim(questions)[1]) { break }\n    question = questions[i,]\n    if(response_required == \"1\" && is.null(response[[paste0(\"q\",question$id)]])) {\n      not_valid = c(not_valid, question$id)\n    }\n  }\n  return(not_valid)\n}\n\ngetTemplateParams = function(template_params){\n  params = list()\n  if(!is.null(inserts) && is.list(inserts)) {\n    params = inserts\n  }\n  for(key in ls(template_params)) {\n    params[[key]] = template_params[[key]]\n  }\n  return(params)\n}\n\nrb = fromJSON(response_bank)                \nrs = fromJSON(response_options)\nresponse_set = NULL\nif(length(rs) > 0) {\n  for(i in 1:length(rs)) {\n    response_set = rbind(response_set, rs[[i]])\n  }\n}\ncurrent_page = 1\nquestions = getQuestions()\npage_count = ceiling(dim(questions)[1] \/ as.numeric(items_per_page))\nwarning_msg = NULL\nresponse = NULL\n\nanswers = list()\nnot_valid = c()\ntimer_set = FALSE\ntime_limit = as.numeric(time_limit)\nif(time_limit > 0) { timer_set = TRUE }\nall_responses = list()\nscores = list()\nwhile(T) {\n  buttons = \"<div class='button_panel button_panel_questionnaire'>\"\n  if(current_page > 1 && can_go_back == \"1\") {\n    buttons = paste0(buttons, \"<button name='previous' class='questionnaire_button'>\",previous_button_label,\"<\/button>\")\n  }\n  if(page_count > 1) {\n    buttons = paste0(buttons, \"<div id='page_number'>page \", current_page, \" of \", page_count,\"<\/div>\")\n  }\n  if(current_page <= page_count) {\n    buttons = paste0(buttons, \"<button name='next' class='questionnaire_button'>\",next_button_label,\"<\/button>\")\n  }\n  buttons = paste0(buttons,'<\/div>')\n  content = getContent(questions, current_page, response_set, not_valid, all_responses)\n  scores = removeAnswers(questions, current_page, response_set, all_responses, scores)\n  response = concerto.template.show(decoded_template_def$layout, params=getTemplateParams(list(\n    header=decoded_template_def$header, \n    title=title,\n    content=content, \n    warning_msg=warning_msg, \n    buttons=buttons,\n    footer=decoded_template_def$footer\n  )), timeLimit=time_limit)\n  warning_msg = NULL\n\n  if(timer_set) {\n    time_limit = time_limit - as.numeric(response$timeTaken)\n    if(response$isTimeout == \"1\") {\n      .branch = \"out_of_time\"\n      break\n    }\n  }\n  if(response$buttonPressed == \"next\") {\n    for(var in ls(response)) {\n      if(var == \"buttonPressed\" || var == \"timeTaken\" || var == \"isTimeout\") { next }\n      all_responses[[var]] = response[[var]]\n    }\n\n    not_valid = getNotValid(response, current_page, questions)\n    scores = addAnswers(answers, response, response_set, questions, rb, all_responses, scores)\n    if(length(not_valid) == 0) {\n      current_page = current_page + 1\n    } else {\n      warning_msg = no_response_alert\n    }\n    if(current_page > page_count) { break }\n  } \n  if(response$buttonPressed == \"previous\") {\n    current_page = current_page - 1\n    not_valid = c()\n  }\n}\nrm(questions)","slug":"439b3902581863cce06d276387f8fa83","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":981,"name":"answered","type":2,"description":"<p>Passed all pages of questions successfuly<\/p>\n","passableThroughUrl":"0","value":"0","test":184,"parentVariable":null,"globalId":981},{"class_name":"TestVariable","id":983,"name":"paragraph","type":0,"description":"","passableThroughUrl":"0","value":null,"test":184,"parentVariable":null,"globalId":983},{"class_name":"TestVariable","id":984,"name":"next_button_label","type":0,"description":"","passableThroughUrl":"0","value":null,"test":184,"parentVariable":null,"globalId":984},{"class_name":"TestVariable","id":985,"name":"order","type":0,"description":"","passableThroughUrl":"0","value":null,"test":184,"parentVariable":null,"globalId":985},{"class_name":"TestVariable","id":986,"name":"item_bank","type":0,"description":"","passableThroughUrl":"0","value":null,"test":184,"parentVariable":null,"globalId":986},{"class_name":"TestVariable","id":987,"name":"items_per_page","type":0,"description":"","passableThroughUrl":"0","value":null,"test":184,"parentVariable":null,"globalId":987},{"class_name":"TestVariable","id":988,"name":"response_options","type":0,"description":"","passableThroughUrl":"0","value":null,"test":184,"parentVariable":null,"globalId":988},{"class_name":"TestVariable","id":989,"name":"response_required","type":0,"description":"","passableThroughUrl":"0","value":null,"test":184,"parentVariable":null,"globalId":989},{"class_name":"TestVariable","id":990,"name":"no_response_alert","type":0,"description":"","passableThroughUrl":"0","value":null,"test":184,"parentVariable":null,"globalId":990},{"class_name":"TestVariable","id":991,"name":"can_go_back","type":0,"description":"","passableThroughUrl":"0","value":null,"test":184,"parentVariable":null,"globalId":991},{"class_name":"TestVariable","id":992,"name":"previous_button_label","type":0,"description":"","passableThroughUrl":"0","value":null,"test":184,"parentVariable":null,"globalId":992},{"class_name":"TestVariable","id":993,"name":"time_limit","type":0,"description":"","passableThroughUrl":"0","value":null,"test":184,"parentVariable":null,"globalId":993},{"class_name":"TestVariable","id":994,"name":"response_bank","type":0,"description":"","passableThroughUrl":"0","value":null,"test":184,"parentVariable":null,"globalId":994},{"class_name":"TestVariable","id":996,"name":"session","type":0,"description":"<p>Session R list object<\/p>\n","passableThroughUrl":"0","value":null,"test":184,"parentVariable":null,"globalId":996},{"class_name":"TestVariable","id":997,"name":"out_of_time","type":2,"description":"<p>Run out of time<\/p>\n","passableThroughUrl":"0","value":null,"test":184,"parentVariable":null,"globalId":997},{"class_name":"TestVariable","id":998,"name":"inserts","type":0,"description":"","passableThroughUrl":"0","value":null,"test":184,"parentVariable":null,"globalId":998},{"class_name":"TestVariable","id":999,"name":"scores","type":1,"description":"<p>R list of scores where each element is named after trait. For trait&nbsp;<strong>A<\/strong>,&nbsp;<strong>B<\/strong>&nbsp;will output:<\/p>\n\n<ul>\n\t<li><strong>scores$A<\/strong><\/li>\n\t<li><strong>scores$B<\/strong><\/li>\n<\/ul>\n","passableThroughUrl":"0","value":null,"test":184,"parentVariable":null,"globalId":999},{"class_name":"TestVariable","id":1206,"name":"title","type":0,"description":"","passableThroughUrl":"0","value":null,"test":184,"parentVariable":null,"globalId":1206},{"class_name":"TestVariable","id":1248,"name":"template_def","type":1,"description":"","passableThroughUrl":"0","value":null,"test":184,"parentVariable":null,"globalId":1248},{"class_name":"TestVariable","id":1256,"name":"session","type":1,"description":"","passableThroughUrl":"0","value":null,"test":184,"parentVariable":null,"globalId":1256},{"class_name":"TestVariable","id":1279,"name":"template_def","type":0,"description":"","passableThroughUrl":"0","value":"{\"layout\":\"default_layout\", \"header\":\"<p>Welcome.<\/p>\",\"footer\":\"\"}","test":184,"parentVariable":null,"globalId":1279}],"logs":[],"sourceWizard":null,"sourceWizardObject":null,"updatedOn":"2016-04-04 17:35:34","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"","globalId":184,"owner":1,"groups":""},"testName":"source_questionnaire","updatedOn":"2016-03-31 14:11:54","updatedByName":"admin","globalId":47,"owner":1,"groups":""},"updatedOn":"2016-04-04 17:35:34","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"_concerto_core","globalId":197,"owner":1,"groups":""},{"class_name":"Test","id":198,"name":"save_data","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":1,"code":"db = fromJSON(data_bank)\n\ntable = \"default_data_table\"\nsession_id_column = \"session_id\"\nname_column = \"name\"\nvalue_column = \"value\"\nif(db$table_type == \"custom\") {\n  table = db$custom_table\n  session_id_column = db$custom_session_id_column$column\n  name_column = db$custom_name_column$column\n  value_column = db$custom_value_column$column\n}\n\nif(is.null(session) || is.na(session) || !is.list(session)) {\n  session = list(\n    id=0\n  )\n}\n\nfor(name in ls(new_data)) {\n  record = concerto.table.query(\"SELECT * FROM {{table}} WHERE {{session_id_column}} = {{session_id}} AND {{name_column}} = '{{name}}'\", list(\n    table=table, \n    session_id_column=session_id_column, \n    session_id=session$id, \n    name_column=name_column, \n    name=name\n  ))\n  if(dim(record)[1] > 0) { \n    concerto.table.query(\"UPDATE {{table}} SET {{value_column}} = '{{value}}' WHERE {{session_id_column}} = {{session_id}} AND {{name_column}} = '{{name}}'\", list(\n      table=table, \n      value_column=value_column, \n      value=new_data[[name]], \n      session_id_column=session_id_column, \n      session_id=session$id, \n      name_column=name_column, \n      name=name\n    ))\n  } else {\n    concerto.table.query(\"INSERT INTO {{table}} SET {{value_column}} = '{{value}}', {{session_id_column}} = {{session_id}}, {{name_column}} = '{{name}}'\", list(\n      table=table, \n      value_column=value_column, \n      value=new_data[[name]], \n      session_id_column=session_id_column, \n      session_id=session$id, \n      name_column=name_column, \n      name=name\n    ))\n  }\n}","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":1177,"name":"out","type":2,"description":"","passableThroughUrl":"0","value":"0","test":198,"parentVariable":976,"globalId":1177},{"class_name":"TestVariable","id":1178,"name":"data_bank","type":0,"description":"<p>Define data bank:<\/p>\n\n<ul>\n\t<li><strong>default<\/strong>&nbsp;- uses default data table<\/li>\n\t<li><strong>custom&nbsp;<\/strong>- define your own data table<\/li>\n<\/ul>\n","passableThroughUrl":"0","value":"{\"table_type\":\"default\",\"custom_table\":\"\",\"custom_session_id_column\":{},\"custom_name_column\":{},\"custom_value_column\":{}}","test":198,"parentVariable":977,"globalId":1178},{"class_name":"TestVariable","id":1179,"name":"new_data","type":0,"description":"","passableThroughUrl":"0","value":null,"test":198,"parentVariable":978,"globalId":1179},{"class_name":"TestVariable","id":1180,"name":"session","type":0,"description":"<p>Current session R list object<\/p>\n","passableThroughUrl":"0","value":null,"test":198,"parentVariable":979,"globalId":1180},{"class_name":"TestVariable","id":1181,"name":"data_bank","type":1,"description":"","passableThroughUrl":"0","value":null,"test":198,"parentVariable":980,"globalId":1181},{"class_name":"TestVariable","id":1259,"name":"session","type":1,"description":"","passableThroughUrl":"0","value":null,"test":198,"parentVariable":1258,"globalId":1259}],"sourceWizard":48,"sourceWizardObject":{"class_name":"TestWizard","id":48,"name":"save_data","description":"","accessibility":0,"protected":"1","archived":"0","steps":[{"class_name":"TestWizardStep","id":95,"title":"Data bank","description":"<p>Session data bank definition<\/p>\n","orderNum":0,"colsNum":0,"wizard":48,"params":[{"class_name":"TestWizardParam","id":378,"label":"Data bank","description":"<p>Define data bank:<\/p>\n\n<ul>\n\t<li><strong>default<\/strong>&nbsp;- uses default data table<\/li>\n\t<li><strong>custom&nbsp;<\/strong>- define your own data table<\/li>\n<\/ul>\n","hideCondition":"","type":9,"passableThroughUrl":"0","value":"{\"table_type\":\"default\",\"custom_table\":\"\",\"custom_session_id_column\":{},\"custom_name_column\":{},\"custom_value_column\":{}}","testVariable":977,"name":"data_bank","wizardStep":95,"stepTitle":"Data bank","order":0,"wizard":48,"definition":{"placeholder":"0","fields":[{"type":"3","name":"table_type","label":"Table type","definition":{"options":[{"value":"default","label":"default"},{"value":"custom","label":"custom"}]}},{"type":"6","name":"custom_table","label":"Table","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_session_id_column","label":"Session Id column","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_name_column","label":"Name column","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_value_column","label":"Value column","hideCondition":"parent.table_type != \"custom\""}]},"globalId":378}],"globalId":95}],"test":183,"testObject":{"class_name":"Test","id":183,"name":"source_save_data","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":0,"code":"db = fromJSON(data_bank)\n\ntable = \"default_data_table\"\nsession_id_column = \"session_id\"\nname_column = \"name\"\nvalue_column = \"value\"\nif(db$table_type == \"custom\") {\n  table = db$custom_table\n  session_id_column = db$custom_session_id_column$column\n  name_column = db$custom_name_column$column\n  value_column = db$custom_value_column$column\n}\n\nif(is.null(session) || is.na(session) || !is.list(session)) {\n  session = list(\n    id=0\n  )\n}\n\nfor(name in ls(new_data)) {\n  record = concerto.table.query(\"SELECT * FROM {{table}} WHERE {{session_id_column}} = {{session_id}} AND {{name_column}} = '{{name}}'\", list(\n    table=table, \n    session_id_column=session_id_column, \n    session_id=session$id, \n    name_column=name_column, \n    name=name\n  ))\n  if(dim(record)[1] > 0) { \n    concerto.table.query(\"UPDATE {{table}} SET {{value_column}} = '{{value}}' WHERE {{session_id_column}} = {{session_id}} AND {{name_column}} = '{{name}}'\", list(\n      table=table, \n      value_column=value_column, \n      value=new_data[[name]], \n      session_id_column=session_id_column, \n      session_id=session$id, \n      name_column=name_column, \n      name=name\n    ))\n  } else {\n    concerto.table.query(\"INSERT INTO {{table}} SET {{value_column}} = '{{value}}', {{session_id_column}} = {{session_id}}, {{name_column}} = '{{name}}'\", list(\n      table=table, \n      value_column=value_column, \n      value=new_data[[name]], \n      session_id_column=session_id_column, \n      session_id=session$id, \n      name_column=name_column, \n      name=name\n    ))\n  }\n}","slug":"17755a0f5e6f24e934bb04084289eddf","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":976,"name":"out","type":2,"description":"","passableThroughUrl":"0","value":"0","test":183,"parentVariable":null,"globalId":976},{"class_name":"TestVariable","id":977,"name":"data_bank","type":0,"description":"","passableThroughUrl":"0","value":null,"test":183,"parentVariable":null,"globalId":977},{"class_name":"TestVariable","id":978,"name":"new_data","type":0,"description":"","passableThroughUrl":"0","value":null,"test":183,"parentVariable":null,"globalId":978},{"class_name":"TestVariable","id":979,"name":"session","type":0,"description":"<p>Current session R list object<\/p>\n","passableThroughUrl":"0","value":null,"test":183,"parentVariable":null,"globalId":979},{"class_name":"TestVariable","id":980,"name":"data_bank","type":1,"description":"","passableThroughUrl":"0","value":null,"test":183,"parentVariable":null,"globalId":980},{"class_name":"TestVariable","id":1258,"name":"session","type":1,"description":"","passableThroughUrl":"0","value":null,"test":183,"parentVariable":null,"globalId":1258}],"logs":[],"sourceWizard":null,"sourceWizardObject":null,"updatedOn":"2016-03-22 19:36:12","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"","globalId":183,"owner":1,"groups":""},"testName":"source_save_data","updatedOn":"2016-03-22 19:45:06","updatedByName":"admin","globalId":48,"owner":1,"groups":""},"updatedOn":"2016-03-22 19:36:12","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"_concerto_core","globalId":198,"owner":1,"groups":""},{"class_name":"Test","id":199,"name":"start_session","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":1,"code":"library(digest)\n\ndecoded_template_def = fromJSON(template_def)\n\ngetContent = function() {\n  content = paragraph\n\n  if(type == \"table\") {\n    content = paste(content, \"<div class='formField'><label for='login'>login<\/label><br\/><input type='text' name='login' id='login' \/><\/div>\",sep=\"\")\n    content = paste(content, \"<div class='formField'><label for='password'>password<\/label><br\/><input type='password' name='password' id='password' \/><\/div>\",sep=\"\")\n  }\n\n  return(content)\n}\n\nauthorizeUser = function(response) {\n  ub = fromJSON(user_bank)\n\n  if(type == \"table\") {\n    if(ub$table_type == \"direct\") {\n      users = ub$direct_table\n      if(length(users) > 0) {\n        for(i in 1:length(users)) {\n          user = users[[i]]\n          hashed_pass = response$password\n          if(user$encryption != \"plain\") {\n            hashed_pass = digest(hashed_pass, user$encryption, serialize=F)\n          }\n          if(user$login == response$login && user$password == hashed_pass && user$enabled == 1) {\n            rm(users)\n            return(user)\n          }\n        }\n      }\n      rm(users)\n    } \n    if(ub$table_type == \"default\") {\n      users = concerto.table.query(\"SELECT * FROM default_user_table WHERE test_id = {{id}}\", list(id=concerto$mainTest$id))\n      if(dim(users)[1] > 0) {\n        for(i in 1:dim(users)[1]) {\n          user = as.list(users[i,])\n          hashed_pass = response$password\n          if(user$encryption != \"plain\") {\n            hashed_pass = digest(hashed_pass, user$encryption, serialize=F)\n          }\n          if(user$login == response$login && user$password == hashed_pass && user$enabled == 1) {\n            rm(users)\n            return(user)\n          }\n        }\n      }\n      rm(users)\n    } \n    if(ub$table_type == \"custom\") {\n      users = concerto.table.query(\"SELECT * FROM {{table}} WHERE {{test_column}} = {{id}}\", list(table=ub$custom_table, test_column=ub$custom_test_id_column$column, id=concerto$mainTest$id))\n      if(dim(users)[1] > 0) {\n        for(i in 1:dim(users)[1]) {\n          user = list(\n            id=users[i, \"id\"],\n            login=users[i, ub$custom_login_column$column],\n            password=users[i, ub$custom_password_column$column],\n            encryption=users[i, ub$custom_encryption_column$column],\n            email=users[i,ub$custom_email_column$column],\n            enabled=users[i, ub$custom_enabled_column$column]\n          )\n          hashed_pass = response$password\n          if(user$encryption != \"plain\") {\n            hashed_pass = digest(hashed_pass, user$encryption, serialize=F)\n          }\n          if(user$login == response$login && user$password == hashed_pass && user$enabled == 1) {\n            rm(users)\n            return(user)\n          }\n        }\n      }\n      rm(users)\n    }\n  }\n  return(NULL)\n}\n\ncreateSession = function(user) {\n  sb = fromJSON(session_bank)\n  user_id = NULL\n  if(!is.null(user)) { user_id = user$id }\n\n  if(sb$table_type == \"default\") {\n    concerto.table.query(\"INSERT INTO `default_session_table` SET `test_id` = {{test_id}}, `user_id` = '{{user_id}}'\", list(test_id=concerto$mainTest$id, user_id=user_id))\n  } \n  if(sb$table_type == \"custom\") {\n    concerto.table.query(\"INSERT INTO `{{table}}` SET `{{test_id_column}}` = {{test_id}}, `{{user_id_column}}` = '{{user_id}}'\", list(table=sb$custom_table, test_id_column=sb$custom_test_id_column$column, test_id=concerto$mainTest$id, user_id_column=sb$custom_user_id_column$column, user_id=user_id, ))\n  }\n  return(list(id=concerto.table.lastInsertId(), test_id=concerto$mainTest$id, user_id=user_id))\n}\n\ndoesLoginExists = function(login) {\n  ub = fromJSON(user_bank)\n\n  if(type == \"table\") {\n    if(ub$table_type == \"default\") {\n      users = concerto.table.query(\"SELECT * FROM default_user_table WHERE test_id = {{id}} AND login = '{{login}}'\", list(\n        id=concerto$mainTest$id,\n        login=dbEscapeStrings(concerto$connection, toString(login))\n      ))\n      if(dim(users)[1] > 0) {\n        return(TRUE)\n      }\n    } \n    if(ub$table_type == \"custom\") {\n      users = concerto.table.query(\"SELECT * FROM {{table}} WHERE {{test_column}} = {{id}} AND {{login_column}} = '{{login}}'\", list(\n        table=ub$custom_table, \n        test_column=ub$custom_test_id_column$column, \n        id=concerto$mainTest$id,\n        login_column=ub$custom_login_column$column, \n        login=dbEscapeStrings(concerto$connection, toString(login))\n      ))\n      if(dim(users)[1] > 0) {\n        return(TRUE)\n      }\n    }\n  }\n  return(FALSE)\n}\n\ncreateNewUser = function(login, password, email, enabled) {\n  ub = fromJSON(user_bank)\n  encryption = \"sha1\"\n\n  if(type == \"table\") {\n    if(ub$table_type == \"default\") {\n      users = concerto.table.query(\"INSERT INTO default_user_table SET test_id={{id}}, login='{{login}}', password='{{password}}', encryption='{{encryption}}', email='{{email}}', enabled='{{enabled}}'\", list(\n        id=concerto$mainTest$id,\n        login=dbEscapeStrings(concerto$connection, toString(login)),\n        password=dbEscapeStrings(concerto$connection, toString(digest(password, encryption, serialize=F))),\n        encryption=dbEscapeStrings(concerto$connection, toString(encryption)),\n        email=dbEscapeStrings(concerto$connection, toString(email)),\n        enabled=dbEscapeStrings(concerto$connection, toString(enabled))\n      ))\n    } \n    if(ub$table_type == \"custom\") {\n      users = concerto.table.query(\"INSERT INTO {{table}} SET {{test_column}}={{id}}, {{login_column}}='{{login}}', {{password_column}}='{{password}}', {{encryption_column}}='{{encryption}}', {{email_column}}='{{email}}', {{enabled_column}}='{{enabled}}'\", list(\n        table=ub$custom_table, \n        test_column=ub$custom_test_id_column$column, \n        id=concerto$mainTest$id,\n        login_column=ub$custom_login_column$column, \n        login=dbEscapeStrings(concerto$connection, toString(login)),\n        password_column=ub$custom_password_column$column, \n        password=dbEscapeStrings(concerto$connection, toString(digest(password, encryption, serialize=F))),\n        encryption_column=ub$custom_encryption_column$column, \n        encryption=dbEscapeStrings(concerto$connection, toString(encryption)),\n        email_column=ub$custom_email_column$column, \n        email=dbEscapeStrings(concerto$connection, toString(email)),\n        enabled_column=ub$custom_enabled_column$column, \n        enabled=dbEscapeStrings(concerto$connection, toString(enabled))\n      ))\n    }\n    return(concerto.table.lastInsertId())\n  }\n  return(NULL)\n}\n\nsendConfirmationMail = function(uid, email, smtp_host, smtp_port, sender, subject, paragraph, url){\n  library(mailR)\n\n  url = concerto.template.insertParams(url, params=list(ecuid=uid))\n  recipients = c(email)\n  body = paste0(paragraph, \"<p><a href='\",url,\"'>\",url,\"<\/a><\/p>\")\n\n  send.mail(\n    from = sender,\n    to = recipients,\n    subject = subject,\n    body = body,\n    smtp = list(host.name = smtp_host, port = smtp_port),\n    html = TRUE, \n    inline = TRUE,\n    authenticate = FALSE,\n    send = TRUE\n  )\n}\n\nenableUser = function(uid) {\n  ub = fromJSON(user_bank)\n\n  if(type == \"table\") {\n    if(ub$table_type == \"default\") {\n      users = concerto.table.query(\"UPDATE default_user_table SET enabled='{{enabled}}' WHERE test_id={{test_id}} AND id={{id}}\", list(\n        enabled=1,\n        test_id=concerto$mainTest$id,\n        id=uid\n      ))\n    } \n    if(ub$table_type == \"custom\") {\n      users = concerto.table.query(\"UPDATE {{table}} SET {{enabled_column}}='{{enabled}}' WHERE {{test_column}}={{test_id}} AND id={{id}}'\", list(\n        table=ub$custom_table, \n        enabled_column=ub$custom_enabled_column$column, \n        enabled=1,\n        test_column=ub$custom_test_id_column$column, \n        test_id=concerto$mainTest$id,\n        id=uid\n      ))\n    }\n  }\n}\n\nreg = fromJSON(registration)\n#email confirmation\nif(!is.na(ecuid) && !is.null(ecuid) && ecuid != \"\"){\n  enableUser(ecuid)\n  concerto.test.run(\"info\", params=list(\n    template=decoded_template_def$layout,\n    header=decoded_template_def$header,\n    title=reg$ec_successful_page$title,\n    content=reg$ec_successful_page$content,\n    footer=decoded_template_def$footer,\n    button_exists=\"0\"\n  ))\n}\n\nuser = NULL\nemail_confirmation = FALSE\nif(type==\"table\") {\n  buttons = paste0('<button name=\"login\">',button_label,'<\/button>')\n  if(reg$enabled == \"1\") {\n    buttons = paste0(buttons, '<button name=\"register\">',reg$registration_button_label,'<\/button>')\n  }\n  warning_msg = NULL\n  response = NULL\n  while(T) {\n    content = getContent()\n    response = concerto.template.show(decoded_template_def$layout, params=list(\n      header=decoded_template_def$header, \n      title=title, \n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    ))  \n    if(response$buttonPressed == \"login\") {\n      user = authorizeUser(response)\n      if(is.null(user)) {\n        warning_msg = paste(\"<div>\",failed_alert,\"<\/div>\",sep=\"\")\n      } else {\n        break\n      }\n    }\n    if(response$buttonPressed == \"register\") {\n      reg_warning_msg = NULL\n      result = NULL\n      while(T) {\n        result = concerto.test.run(\"source_form\", params=list(\n          template=decoded_template_def$layout,\n          header=decoded_template_def$header,\n          title=reg$title, \n          paragraph=reg$paragraph,\n          footer=decoded_template_def$footer,\n          form=toJSON(\n            list(\n              list(name=\"login\", type=\"singleline\", label=reg$login_label, validation=\"login!=''\", alert=reg$login_alert),\n              list(name=\"password\", type=\"password\", label=reg$password_label, validation=\"password!=''\", alert=reg$password_alert),\n              list(name=\"password_confirmation\", type=\"password\", label=reg$password_confirmation_label, validation=\"password==password_confirmation\", alert=reg$password_confirmation_alert),\n              list(name=\"email\", type=\"singleline\", label=reg$email_label, validation=\"email!=''\", alert=reg$email_alert)\n            )\n          ),\n          warning_msg = reg_warning_msg,\n          button_label=reg$form_button_label\n        ));\n\n        if(!doesLoginExists(result$response$login)) {\n          break\n        } else {\n          reg_warning_msg = reg$login_exists_alert\n        }\n      }\n      email_confirmation = reg$email_confirmation == \"1\"\n      enabled = \"1\"\n      if(email_confirmation) { \n        enabled == \"0\" \n      }\n      uid = createNewUser(result$response$login, result$response$password, result$response$email, enabled)\n      if(email_confirmation) { \n        sendConfirmationMail(uid, result$response$email, reg$ec_smtp$host, reg$ec_smtp$port, reg$ec_email$sender, reg$ec_email$subject, reg$ec_email$paragraph, reg$ec_email$url)\n        concerto.test.run(\"info\", params=list(\n          template=decoded_template_def$layout,\n          header=decoded_template_def$header,\n          title=reg$ec_request_page$title,\n          content=reg$ec_request_page$content,\n          footer=decoded_template_def$footer,\n          button_exists=\"0\"\n        ))\n      }\n      user = authorizeUser(list(login=result$response$login, result$response$password))\n      break\n    }\n  }\n}\n\nsession = createSession(user)","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":1182,"name":"success","type":2,"description":"<p>Authorization successful<\/p>\n","passableThroughUrl":"0","value":"0","test":199,"parentVariable":961,"globalId":1182},{"class_name":"TestVariable","id":1184,"name":"paragraph","type":0,"description":"<p><span style=\"line-height: 20.8px;\">Authorization page paragraph<\/span><\/p>\n","passableThroughUrl":"0","value":"<p>Please log in:<\/p>\n","test":199,"parentVariable":963,"globalId":1184},{"class_name":"TestVariable","id":1185,"name":"failed_alert","type":0,"description":"<p>Authorization failed alert<\/p>\n","passableThroughUrl":"0","value":"Authorization failed!","test":199,"parentVariable":964,"globalId":1185},{"class_name":"TestVariable","id":1186,"name":"button_label","type":0,"description":"<p>Login button label<\/p>\n","passableThroughUrl":"0","value":"log in","test":199,"parentVariable":965,"globalId":1186},{"class_name":"TestVariable","id":1187,"name":"type","type":0,"description":"<p>Authorization type<\/p>\n\n<ul>\n\t<li><strong>user table<\/strong>&nbsp;- predefined user bank that let&#39;s users log in using login\/password combination<\/li>\n<\/ul>\n","passableThroughUrl":"0","value":"table","test":199,"parentVariable":966,"globalId":1187},{"class_name":"TestVariable","id":1188,"name":"user","type":1,"description":"<p>Returned user object list:<\/p>\n\n<ul>\n\t<li><strong>user$id<\/strong>&nbsp;- user unique id<\/li>\n\t<li><strong>user$login&nbsp;<\/strong>- user login<\/li>\n<\/ul>\n","passableThroughUrl":"0","value":null,"test":199,"parentVariable":967,"globalId":1188},{"class_name":"TestVariable","id":1190,"name":"user_bank","type":0,"description":"<p style=\"line-height: 20.8px;\">User bank table type:<\/p>\n\n<ul style=\"line-height: 20.8px;\">\n\t<li><strong>default&nbsp;<\/strong>- uses default Concerto table; user needs to be inserted first<\/li>\n\t<li><strong>direct<\/strong>&nbsp;- can be defined directly in wizard form<\/li>\n\t<li><strong>custom<\/strong>&nbsp;- used to define your own table that you want to use as user bank<\/li>\n<\/ul>\n","passableThroughUrl":"0","value":"{\"table_type\":\"default\",\"direct_table\":[],\"custom_table\":\"\",\"custom_login_column\":{},\"custom_password_column\":{},\"custom_encryption_column\":{},\"custom_test_id_column\":{}}","test":199,"parentVariable":969,"globalId":1190},{"class_name":"TestVariable","id":1191,"name":"user_bank","type":1,"description":"","passableThroughUrl":"0","value":null,"test":199,"parentVariable":970,"globalId":1191},{"class_name":"TestVariable","id":1192,"name":"session_bank","type":0,"description":"<p>Session table definition:<\/p>\n\n<ul>\n\t<li><strong>default<\/strong>&nbsp;- uses default session table<\/li>\n\t<li><strong>custom&nbsp;<\/strong>- define your own session table<\/li>\n<\/ul>\n","passableThroughUrl":"0","value":"{\"table_type\":\"default\",\"custom_table\":\"\",\"custom_user_id_login\":{\"table\":null},\"custom_test_id_column\":{}}","test":199,"parentVariable":971,"globalId":1192},{"class_name":"TestVariable","id":1193,"name":"session","type":1,"description":"","passableThroughUrl":"0","value":null,"test":199,"parentVariable":972,"globalId":1193},{"class_name":"TestVariable","id":1194,"name":"session_bank","type":1,"description":"","passableThroughUrl":"0","value":null,"test":199,"parentVariable":973,"globalId":1194},{"class_name":"TestVariable","id":1195,"name":"registration","type":0,"description":"","passableThroughUrl":"0","value":"{\"enabled\":\"0\",\"registration_button_label\":\"registration\",\"layout\":\"default_layout\",\"header\":\"<p><strong>Welcome to demo test<\/strong><\/p>\",\"paragraph\":\"<p>Please fill the form below to register:<\/p>\\n\",\"login_label\":\"Login\",\"login_alert\":\"You need to enter your login!\",\"password_label\":\"Password\",\"password_alert\":\"You need to enter your password!\",\"password_confirmation_label\":\"Password confirmation\",\"password_confirmation_alert\":\"Password and password confirmation must match!\",\"email_label\":\"Email\",\"email_alert\":\"You need to enter your email!\",\"form_button_label\":\"register\",\"login_exists_alert\":\"Login already exists!\",\"email_confirmation\":\"0\",\"ec_smtp\":{\"host\":\"aspmx.l.google.com\",\"port\":\"25\"},\"ec_page\":{\"layout\":\"default_layout\",\"header\":\"<p><strong>Email confirmation<\/strong><\/p>\\n\",\"paragraph\":\"<p>Email has been sent to the email address specified. Please check your inbox.<\/p>\\n\",\"content\":\"<p>Email has been sent to the address specified. Please check your inbox.<\/p>\\n\"},\"ec_email\":{\"sender\":\"no-reply@domain.com\",\"subject\":\"Email confirmation\",\"paragraph\":\"<p>Please follow the link below:<\/p>\\n\",\"url\":\"http:\/\/domain.com\/test\/slug\/start?ecuid={{ecuid}}\"},\"ec_request_page\":{\"layout\":\"default_layout\",\"header\":\"<p>Email confirmation<\/p>\\n\",\"content\":\"<p>Confirmation email has been sent to address specified. Please check your inbox.<\/p>\\n\"},\"ec_successful_page\":{\"layout\":\"default_layout\",\"header\":\"<p>Email confirmation<\/p>\\n\",\"content\":\"<p>Email confirmation has been successfuly completed.<\/p>\\n\"}}","test":199,"parentVariable":974,"globalId":1195},{"class_name":"TestVariable","id":1196,"name":"ecuid","type":0,"description":"<p>Email confirmation user id<\/p>\n","passableThroughUrl":"0","value":null,"test":199,"parentVariable":975,"globalId":1196},{"class_name":"TestVariable","id":1205,"name":"title","type":0,"description":"","passableThroughUrl":"0","value":"DEMO TEST","test":199,"parentVariable":1204,"globalId":1205},{"class_name":"TestVariable","id":1243,"name":"template_def","type":0,"description":"","passableThroughUrl":"0","value":"{\"layout\":\"default_layout\", \"header\":\"<p>Welcome.<\/p>\",\"footer\":\"\"}","test":199,"parentVariable":1242,"globalId":1243},{"class_name":"TestVariable","id":1247,"name":"template_def","type":1,"description":"","passableThroughUrl":"0","value":null,"test":199,"parentVariable":1246,"globalId":1247}],"sourceWizard":49,"sourceWizardObject":{"class_name":"TestWizard","id":49,"name":"start_session","description":"","accessibility":0,"protected":"1","archived":"0","steps":[{"class_name":"TestWizardStep","id":96,"title":"Session","description":"<p>Session data source<\/p>\n","orderNum":1,"colsNum":0,"wizard":49,"params":[{"class_name":"TestWizardParam","id":379,"label":"Session bank","description":"<p>Session table definition:<\/p>\n\n<ul>\n\t<li><strong>default<\/strong>&nbsp;- uses default session table<\/li>\n\t<li><strong>custom&nbsp;<\/strong>- define your own session table<\/li>\n<\/ul>\n","hideCondition":"","type":9,"passableThroughUrl":"0","value":"{\"table_type\":\"default\",\"custom_table\":\"\",\"custom_user_id_login\":{\"table\":null},\"custom_test_id_column\":{}}","testVariable":971,"name":"session_bank","wizardStep":96,"stepTitle":"Session","order":0,"wizard":49,"definition":{"placeholder":"0","fields":[{"type":"3","name":"table_type","label":"Type","definition":{"options":[{"value":"default","label":"default"},{"value":"custom","label":"custom"}]}},{"type":"6","name":"custom_table","label":"Table","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_user_id_login","label":"User Id column","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_test_id_column","label":"Test Id column","hideCondition":"parent.table_type != \"custom\""}]},"globalId":379}],"globalId":96},{"class_name":"TestWizardStep","id":97,"title":"Authorization","description":"<p>Authorization options<\/p>\n","orderNum":2,"colsNum":0,"wizard":49,"params":[{"class_name":"TestWizardParam","id":381,"label":"Paragraph","description":"<p><span style=\"line-height: 20.8px;\">Authorization page paragraph<\/span><\/p>\n","hideCondition":"!values.type","type":2,"passableThroughUrl":"0","value":"<p>Please log in:<\/p>\n","testVariable":963,"name":"paragraph","wizardStep":97,"stepTitle":"Authorization","order":3,"wizard":49,"definition":{"placeholder":"0"},"globalId":381},{"class_name":"TestWizardParam","id":382,"label":"Failed alert","description":"<p>Authorization failed alert<\/p>\n","hideCondition":"!values.type","type":0,"passableThroughUrl":"0","value":"Authorization failed!","testVariable":964,"name":"failed_alert","wizardStep":97,"stepTitle":"Authorization","order":4,"wizard":49,"definition":{"placeholder":"0"},"globalId":382},{"class_name":"TestWizardParam","id":383,"label":"Button label","description":"<p>Login button label<\/p>\n","hideCondition":"!values.type","type":0,"passableThroughUrl":"0","value":"log in","testVariable":965,"name":"button_label","wizardStep":97,"stepTitle":"Authorization","order":5,"wizard":49,"definition":{"placeholder":"0"},"globalId":383},{"class_name":"TestWizardParam","id":384,"label":"Type","description":"<p>Authorization type<\/p>\n\n<ul>\n\t<li><strong>user table<\/strong>&nbsp;- predefined user bank that let&#39;s users log in using login\/password combination<\/li>\n<\/ul>\n","hideCondition":"","type":3,"passableThroughUrl":"0","value":"table","testVariable":966,"name":"type","wizardStep":97,"stepTitle":"Authorization","order":0,"wizard":49,"definition":{"placeholder":"0","options":[{"value":"table","label":"user table"}]},"globalId":384},{"class_name":"TestWizardParam","id":386,"label":"User bank","description":"<p style=\"line-height: 20.8px;\">User bank table type:<\/p>\n\n<ul style=\"line-height: 20.8px;\">\n\t<li><strong>default&nbsp;<\/strong>- uses default Concerto table; user needs to be inserted first<\/li>\n\t<li><strong>direct<\/strong>&nbsp;- can be defined directly in wizard form<\/li>\n\t<li><strong>custom<\/strong>&nbsp;- used to define your own table that you want to use as user bank<\/li>\n<\/ul>\n","hideCondition":"!values.type","type":9,"passableThroughUrl":"0","value":"{\"table_type\":\"default\",\"direct_table\":[],\"custom_table\":\"\",\"custom_login_column\":{},\"custom_password_column\":{},\"custom_encryption_column\":{},\"custom_test_id_column\":{}}","testVariable":969,"name":"user_bank","wizardStep":97,"stepTitle":"Authorization","order":6,"wizard":49,"definition":{"placeholder":"0","fields":[{"type":"3","name":"table_type","label":"Table type","definition":{"options":[{"value":"default","label":"default"},{"value":"direct","label":"direct"},{"value":"custom","label":"custom"}]}},{"type":"10","name":"direct_table","label":"Users","definition":{"element":{"type":9,"definition":{"fields":[{"type":"0","name":"id","label":"Id"},{"type":"0","name":"login","label":"Login"},{"type":"0","name":"password","label":"Password"},{"type":"3","name":"encryption","label":"Encryption","definition":{"options":[{"value":"plain","label":"plain"},{"value":"md5","label":"md5"},{"value":"sha1","label":"sha1"},{"value":"sha256","label":"sha256"},{"value":"sha512","label":"sha512"},{"value":"xxhash32","label":"xxhash32"},{"value":"xxhash64","label":"xxhash64"},{"value":"murmur32","label":"murmur32"}]}},{"type":0,"name":"email","label":"Email","definition":{"placeholder":0}},{"type":4,"name":"enabled","label":"Enabled","definition":{"placeholder":0}}]}}},"hideCondition":"parent.table_type != \"direct\""},{"type":"6","name":"custom_table","label":"Custom user table","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_login_column","label":"Login column","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_password_column","label":"Password column","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_encryption_column","label":"Encryption column","hideCondition":"parent.table_type != \"custom\""},{"type":"7","name":"custom_test_id_column","label":"Test Id column","hideCondition":"parent.table_type != \"custom\""},{"type":7,"name":"custom_email_column","label":"Email column","definition":{"placeholder":0},"hideCondition":"parent.table_type != \"custom\""},{"type":7,"name":"custom_enabled_column","label":"Enabled column","definition":{"placeholder":0},"hideCondition":"parent.table_type != \"custom\""}]},"globalId":386},{"class_name":"TestWizardParam","id":387,"label":"Public registration","description":"","hideCondition":"!values.type","type":9,"passableThroughUrl":"0","value":"{\"enabled\":\"0\",\"layout\":\"default_layout\",\"header\":\"<p><strong>Welcome to demo test<\/strong><\/p>\\n\",\"paragraph\":\"<p>Please fill the form below to register.<\/p>\\n\",\"password_alert\":\"You need to enter your password!\",\"login_label\":\"Login\",\"login_alert\":\"You need to enter your login!\",\"password_label\":\"Password\",\"password_confirmation_label\":\"Password confirmation\",\"password_confirmation_match_alert\":\"Password and password confirmation must match!\",\"email_label\":\"Email\",\"email_alert\":\"You need to enter your email!\",\"form_button_label\":\"register\",\"registration_button_label\":\"registration\",\"password_confirmation_alert\":\"Password and password confirmation must match!\",\"login_exists_alert\":\"Login already exists!\",\"email_confirmation\":\"0\",\"ec_smtp\":{\"host\":\"aspmx.l.google.com\",\"port\":\"25\"},\"ec_page\":{\"layout\":\"default_layout\",\"header\":\"<p><strong>Email confirmation<\/strong><\/p>\\n\",\"paragraph\":\"<p>Email has been sent to specified address for confirmation. Please check your inbox.<\/p>\\n\",\"content\":\"<p>Email has bee sent to the address specified. Please check your inbox.<\/p>\\n\"},\"ec_email\":{\"sender\":\"no-reply@domain.com\",\"subject\":\"Email confirmation\",\"paragraph\":\"<p>Please follow link below to confirm your email address:<\/p>\\n\",\"url\":\"http:\/\/domain.com\/test\/slug\/start?ecuid={{ecuid}}\"},\"ec_successful_page\":{\"layout\":\"default_layout\",\"header\":\"<p>Email confirmation<\/p>\\n\",\"content\":\"<p>Email confirmation has been successfuly completed.<\/p>\\n\"},\"ec_request_page\":{\"layout\":\"default_layout\",\"header\":\"<p>Email confirmation<\/p>\\n\",\"content\":\"<p>Confirmation email has been sent to specified address. Please check your inbox.<\/p>\\n\"}}","testVariable":974,"name":"registration","wizardStep":97,"stepTitle":"Authorization","order":7,"wizard":49,"definition":{"fields":[{"type":4,"name":"enabled","label":"Enabled","definition":{"placeholder":0},"order":0},{"type":2,"name":"paragraph","label":"Paragraph","definition":{"placeholder":0},"hideCondition":"parent.enabled == \"0\"","order":2},{"type":0,"name":"login_label","label":"Login label","definition":{"placeholder":0},"hideCondition":"parent.enabled == \"0\"","order":5},{"type":0,"name":"login_alert","label":"No login alert","definition":{"placeholder":0},"hideCondition":"parent.enabled == \"0\"","order":6},{"type":0,"name":"password_label","label":"Password label","definition":{"placeholder":0},"hideCondition":"parent.enabled == \"0\"","order":7},{"type":0,"name":"password_alert","label":"No password alert","definition":{"placeholder":0},"hideCondition":"parent.enabled == \"0\"","order":8},{"type":0,"name":"password_confirmation_label","label":"Password confirmation label","definition":{"placeholder":0},"hideCondition":"parent.enabled == \"0\"","order":9},{"type":0,"name":"password_confirmation_alert","label":"No password confirmation match alert","definition":{"placeholder":0},"hideCondition":"parent.enabled == \"0\"","order":10},{"type":0,"name":"email_label","label":"Email label","definition":{"placeholder":0},"hideCondition":"parent.enabled == \"0\"","order":11},{"type":0,"name":"email_alert","label":"No email alert","definition":{"placeholder":0},"hideCondition":"parent.enabled == \"0\"","order":12},{"type":0,"name":"form_button_label","label":"Register button label","definition":{"placeholder":0},"hideCondition":"parent.enabled == \"0\"","order":13},{"type":0,"name":"registration_button_label","label":"Registration button label","definition":{"placeholder":0},"hideCondition":"parent.enabled == \"0\"","order":3},{"type":0,"name":"login_exists_alert","label":"Login already exists alert","definition":{"placeholder":0},"hideCondition":"parent.enabled == \"0\"","order":14},{"type":4,"name":"email_confirmation","label":"Email confirmation","definition":{"placeholder":0},"hideCondition":"parent.enabled == \"0\"","order":15},{"type":9,"name":"ec_smtp","label":"SMTP settings","definition":{"placeholder":0,"fields":[{"type":0,"name":"host","label":"SMTP host","definition":{"placeholder":0}},{"type":0,"name":"port","label":"SMTP port","definition":{"placeholder":0}}]},"hideCondition":"parent.enabled == \"0\" || parent.email_confirmation == \"0\"","order":16},{"type":9,"name":"ec_request_page","label":"Email confirmation request page","definition":{"placeholder":0,"fields":[{"type":2,"name":"content","label":"Content","definition":{"placeholder":0},"order":3},{"type":0,"name":"title","label":"Title","definition":{"placeholder":0},"order":2}]},"hideCondition":"parent.enabled == \"0\" || parent.email_confirmation == \"0\"","order":17},{"type":9,"name":"ec_email","label":"Email","definition":{"placeholder":0,"fields":[{"type":0,"name":"sender","label":"Sender email address","definition":{"placeholder":0}},{"type":0,"name":"subject","label":"Email subject","definition":{"placeholder":0}},{"type":2,"name":"paragraph","label":"Email paragraph","definition":{"placeholder":0}},{"type":0,"name":"url","label":"Confirmation URL","definition":{"placeholder":0}}]},"hideCondition":"parent.enabled == \"0\" || parent.email_confirmation == \"0\"","order":19},{"type":9,"name":"ec_successful_page","label":"Email confirmation successful page","definition":{"placeholder":0,"fields":[{"type":2,"name":"content","label":"Content","definition":{"placeholder":0},"order":3},{"type":0,"name":"title","label":"Title","definition":{"placeholder":0},"order":2}]},"order":18,"hideCondition":"parent.enabled == \"0\" || parent.email_confirmation == \"0\""},{"type":0,"name":"title","label":"Title","definition":{"placeholder":0},"hideCondition":"parent.enabled == \"0\"","order":1}]},"globalId":387},{"class_name":"TestWizardParam","id":391,"label":"Title","description":"","hideCondition":"!values.type","type":0,"passableThroughUrl":"0","value":"DEMO TEST","testVariable":1204,"name":"title","wizardStep":97,"stepTitle":"Authorization","order":2,"wizard":49,"definition":{"placeholder":0},"globalId":391}],"globalId":97}],"test":182,"testObject":{"class_name":"Test","id":182,"name":"source_start_session","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":0,"code":"library(digest)\n\ndecoded_template_def = fromJSON(template_def)\n\ngetContent = function() {\n  content = paragraph\n\n  if(type == \"table\") {\n    content = paste(content, \"<div class='formField'><label for='login'>login<\/label><br\/><input type='text' name='login' id='login' \/><\/div>\",sep=\"\")\n    content = paste(content, \"<div class='formField'><label for='password'>password<\/label><br\/><input type='password' name='password' id='password' \/><\/div>\",sep=\"\")\n  }\n\n  return(content)\n}\n\nauthorizeUser = function(response) {\n  ub = fromJSON(user_bank)\n\n  if(type == \"table\") {\n    if(ub$table_type == \"direct\") {\n      users = ub$direct_table\n      if(length(users) > 0) {\n        for(i in 1:length(users)) {\n          user = users[[i]]\n          hashed_pass = response$password\n          if(user$encryption != \"plain\") {\n            hashed_pass = digest(hashed_pass, user$encryption, serialize=F)\n          }\n          if(user$login == response$login && user$password == hashed_pass && user$enabled == 1) {\n            rm(users)\n            return(user)\n          }\n        }\n      }\n      rm(users)\n    } \n    if(ub$table_type == \"default\") {\n      users = concerto.table.query(\"SELECT * FROM default_user_table WHERE test_id = {{id}}\", list(id=concerto$mainTest$id))\n      if(dim(users)[1] > 0) {\n        for(i in 1:dim(users)[1]) {\n          user = as.list(users[i,])\n          hashed_pass = response$password\n          if(user$encryption != \"plain\") {\n            hashed_pass = digest(hashed_pass, user$encryption, serialize=F)\n          }\n          if(user$login == response$login && user$password == hashed_pass && user$enabled == 1) {\n            rm(users)\n            return(user)\n          }\n        }\n      }\n      rm(users)\n    } \n    if(ub$table_type == \"custom\") {\n      users = concerto.table.query(\"SELECT * FROM {{table}} WHERE {{test_column}} = {{id}}\", list(table=ub$custom_table, test_column=ub$custom_test_id_column$column, id=concerto$mainTest$id))\n      if(dim(users)[1] > 0) {\n        for(i in 1:dim(users)[1]) {\n          user = list(\n            id=users[i, \"id\"],\n            login=users[i, ub$custom_login_column$column],\n            password=users[i, ub$custom_password_column$column],\n            encryption=users[i, ub$custom_encryption_column$column],\n            email=users[i,ub$custom_email_column$column],\n            enabled=users[i, ub$custom_enabled_column$column]\n          )\n          hashed_pass = response$password\n          if(user$encryption != \"plain\") {\n            hashed_pass = digest(hashed_pass, user$encryption, serialize=F)\n          }\n          if(user$login == response$login && user$password == hashed_pass && user$enabled == 1) {\n            rm(users)\n            return(user)\n          }\n        }\n      }\n      rm(users)\n    }\n  }\n  return(NULL)\n}\n\ncreateSession = function(user) {\n  sb = fromJSON(session_bank)\n  user_id = NULL\n  if(!is.null(user)) { user_id = user$id }\n\n  if(sb$table_type == \"default\") {\n    concerto.table.query(\"INSERT INTO `default_session_table` SET `test_id` = {{test_id}}, `user_id` = '{{user_id}}'\", list(test_id=concerto$mainTest$id, user_id=user_id))\n  } \n  if(sb$table_type == \"custom\") {\n    concerto.table.query(\"INSERT INTO `{{table}}` SET `{{test_id_column}}` = {{test_id}}, `{{user_id_column}}` = '{{user_id}}'\", list(table=sb$custom_table, test_id_column=sb$custom_test_id_column$column, test_id=concerto$mainTest$id, user_id_column=sb$custom_user_id_column$column, user_id=user_id, ))\n  }\n  return(list(id=concerto.table.lastInsertId(), test_id=concerto$mainTest$id, user_id=user_id))\n}\n\ndoesLoginExists = function(login) {\n  ub = fromJSON(user_bank)\n\n  if(type == \"table\") {\n    if(ub$table_type == \"default\") {\n      users = concerto.table.query(\"SELECT * FROM default_user_table WHERE test_id = {{id}} AND login = '{{login}}'\", list(\n        id=concerto$mainTest$id,\n        login=dbEscapeStrings(concerto$connection, toString(login))\n      ))\n      if(dim(users)[1] > 0) {\n        return(TRUE)\n      }\n    } \n    if(ub$table_type == \"custom\") {\n      users = concerto.table.query(\"SELECT * FROM {{table}} WHERE {{test_column}} = {{id}} AND {{login_column}} = '{{login}}'\", list(\n        table=ub$custom_table, \n        test_column=ub$custom_test_id_column$column, \n        id=concerto$mainTest$id,\n        login_column=ub$custom_login_column$column, \n        login=dbEscapeStrings(concerto$connection, toString(login))\n      ))\n      if(dim(users)[1] > 0) {\n        return(TRUE)\n      }\n    }\n  }\n  return(FALSE)\n}\n\ncreateNewUser = function(login, password, email, enabled) {\n  ub = fromJSON(user_bank)\n  encryption = \"sha1\"\n\n  if(type == \"table\") {\n    if(ub$table_type == \"default\") {\n      users = concerto.table.query(\"INSERT INTO default_user_table SET test_id={{id}}, login='{{login}}', password='{{password}}', encryption='{{encryption}}', email='{{email}}', enabled='{{enabled}}'\", list(\n        id=concerto$mainTest$id,\n        login=dbEscapeStrings(concerto$connection, toString(login)),\n        password=dbEscapeStrings(concerto$connection, toString(digest(password, encryption, serialize=F))),\n        encryption=dbEscapeStrings(concerto$connection, toString(encryption)),\n        email=dbEscapeStrings(concerto$connection, toString(email)),\n        enabled=dbEscapeStrings(concerto$connection, toString(enabled))\n      ))\n    } \n    if(ub$table_type == \"custom\") {\n      users = concerto.table.query(\"INSERT INTO {{table}} SET {{test_column}}={{id}}, {{login_column}}='{{login}}', {{password_column}}='{{password}}', {{encryption_column}}='{{encryption}}', {{email_column}}='{{email}}', {{enabled_column}}='{{enabled}}'\", list(\n        table=ub$custom_table, \n        test_column=ub$custom_test_id_column$column, \n        id=concerto$mainTest$id,\n        login_column=ub$custom_login_column$column, \n        login=dbEscapeStrings(concerto$connection, toString(login)),\n        password_column=ub$custom_password_column$column, \n        password=dbEscapeStrings(concerto$connection, toString(digest(password, encryption, serialize=F))),\n        encryption_column=ub$custom_encryption_column$column, \n        encryption=dbEscapeStrings(concerto$connection, toString(encryption)),\n        email_column=ub$custom_email_column$column, \n        email=dbEscapeStrings(concerto$connection, toString(email)),\n        enabled_column=ub$custom_enabled_column$column, \n        enabled=dbEscapeStrings(concerto$connection, toString(enabled))\n      ))\n    }\n    return(concerto.table.lastInsertId())\n  }\n  return(NULL)\n}\n\nsendConfirmationMail = function(uid, email, smtp_host, smtp_port, sender, subject, paragraph, url){\n  library(mailR)\n\n  url = concerto.template.insertParams(url, params=list(ecuid=uid))\n  recipients = c(email)\n  body = paste0(paragraph, \"<p><a href='\",url,\"'>\",url,\"<\/a><\/p>\")\n\n  send.mail(\n    from = sender,\n    to = recipients,\n    subject = subject,\n    body = body,\n    smtp = list(host.name = smtp_host, port = smtp_port),\n    html = TRUE, \n    inline = TRUE,\n    authenticate = FALSE,\n    send = TRUE\n  )\n}\n\nenableUser = function(uid) {\n  ub = fromJSON(user_bank)\n\n  if(type == \"table\") {\n    if(ub$table_type == \"default\") {\n      users = concerto.table.query(\"UPDATE default_user_table SET enabled='{{enabled}}' WHERE test_id={{test_id}} AND id={{id}}\", list(\n        enabled=1,\n        test_id=concerto$mainTest$id,\n        id=uid\n      ))\n    } \n    if(ub$table_type == \"custom\") {\n      users = concerto.table.query(\"UPDATE {{table}} SET {{enabled_column}}='{{enabled}}' WHERE {{test_column}}={{test_id}} AND id={{id}}'\", list(\n        table=ub$custom_table, \n        enabled_column=ub$custom_enabled_column$column, \n        enabled=1,\n        test_column=ub$custom_test_id_column$column, \n        test_id=concerto$mainTest$id,\n        id=uid\n      ))\n    }\n  }\n}\n\nreg = fromJSON(registration)\n#email confirmation\nif(!is.na(ecuid) && !is.null(ecuid) && ecuid != \"\"){\n  enableUser(ecuid)\n  concerto.test.run(\"info\", params=list(\n    template=decoded_template_def$layout,\n    header=decoded_template_def$header,\n    title=reg$ec_successful_page$title,\n    content=reg$ec_successful_page$content,\n    footer=decoded_template_def$footer,\n    button_exists=\"0\"\n  ))\n}\n\nuser = NULL\nemail_confirmation = FALSE\nif(type==\"table\") {\n  buttons = paste0('<button name=\"login\">',button_label,'<\/button>')\n  if(reg$enabled == \"1\") {\n    buttons = paste0(buttons, '<button name=\"register\">',reg$registration_button_label,'<\/button>')\n  }\n  warning_msg = NULL\n  response = NULL\n  while(T) {\n    content = getContent()\n    response = concerto.template.show(decoded_template_def$layout, params=list(\n      header=decoded_template_def$header, \n      title=title, \n      content=content, \n      warning_msg=warning_msg, \n      buttons=buttons,\n      footer=decoded_template_def$footer\n    ))  \n    if(response$buttonPressed == \"login\") {\n      user = authorizeUser(response)\n      if(is.null(user)) {\n        warning_msg = paste(\"<div>\",failed_alert,\"<\/div>\",sep=\"\")\n      } else {\n        break\n      }\n    }\n    if(response$buttonPressed == \"register\") {\n      reg_warning_msg = NULL\n      result = NULL\n      while(T) {\n        result = concerto.test.run(\"source_form\", params=list(\n          template=decoded_template_def$layout,\n          header=decoded_template_def$header,\n          title=reg$title, \n          paragraph=reg$paragraph,\n          footer=decoded_template_def$footer,\n          form=toJSON(\n            list(\n              list(name=\"login\", type=\"singleline\", label=reg$login_label, validation=\"login!=''\", alert=reg$login_alert),\n              list(name=\"password\", type=\"password\", label=reg$password_label, validation=\"password!=''\", alert=reg$password_alert),\n              list(name=\"password_confirmation\", type=\"password\", label=reg$password_confirmation_label, validation=\"password==password_confirmation\", alert=reg$password_confirmation_alert),\n              list(name=\"email\", type=\"singleline\", label=reg$email_label, validation=\"email!=''\", alert=reg$email_alert)\n            )\n          ),\n          warning_msg = reg_warning_msg,\n          button_label=reg$form_button_label\n        ));\n\n        if(!doesLoginExists(result$response$login)) {\n          break\n        } else {\n          reg_warning_msg = reg$login_exists_alert\n        }\n      }\n      email_confirmation = reg$email_confirmation == \"1\"\n      enabled = \"1\"\n      if(email_confirmation) { \n        enabled == \"0\" \n      }\n      uid = createNewUser(result$response$login, result$response$password, result$response$email, enabled)\n      if(email_confirmation) { \n        sendConfirmationMail(uid, result$response$email, reg$ec_smtp$host, reg$ec_smtp$port, reg$ec_email$sender, reg$ec_email$subject, reg$ec_email$paragraph, reg$ec_email$url)\n        concerto.test.run(\"info\", params=list(\n          template=decoded_template_def$layout,\n          header=decoded_template_def$header,\n          title=reg$ec_request_page$title,\n          content=reg$ec_request_page$content,\n          footer=decoded_template_def$footer,\n          button_exists=\"0\"\n        ))\n      }\n      user = authorizeUser(list(login=result$response$login, result$response$password))\n      break\n    }\n  }\n}\n\nsession = createSession(user)","slug":"5ae507546a4c59e85a15927aca3ee2f4","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":961,"name":"success","type":2,"description":"<p>Authorization successful<\/p>\n","passableThroughUrl":"0","value":"0","test":182,"parentVariable":null,"globalId":961},{"class_name":"TestVariable","id":963,"name":"paragraph","type":0,"description":"","passableThroughUrl":"0","value":null,"test":182,"parentVariable":null,"globalId":963},{"class_name":"TestVariable","id":964,"name":"failed_alert","type":0,"description":"","passableThroughUrl":"0","value":null,"test":182,"parentVariable":null,"globalId":964},{"class_name":"TestVariable","id":965,"name":"button_label","type":0,"description":"","passableThroughUrl":"0","value":null,"test":182,"parentVariable":null,"globalId":965},{"class_name":"TestVariable","id":966,"name":"type","type":0,"description":"","passableThroughUrl":"0","value":null,"test":182,"parentVariable":null,"globalId":966},{"class_name":"TestVariable","id":967,"name":"user","type":1,"description":"<p>Returned user object list:<\/p>\n\n<ul>\n\t<li><strong>user$id<\/strong>&nbsp;- user unique id<\/li>\n\t<li><strong>user$login&nbsp;<\/strong>- user login<\/li>\n<\/ul>\n","passableThroughUrl":"0","value":null,"test":182,"parentVariable":null,"globalId":967},{"class_name":"TestVariable","id":969,"name":"user_bank","type":0,"description":"","passableThroughUrl":"0","value":null,"test":182,"parentVariable":null,"globalId":969},{"class_name":"TestVariable","id":970,"name":"user_bank","type":1,"description":"","passableThroughUrl":"0","value":null,"test":182,"parentVariable":null,"globalId":970},{"class_name":"TestVariable","id":971,"name":"session_bank","type":0,"description":"","passableThroughUrl":"0","value":null,"test":182,"parentVariable":null,"globalId":971},{"class_name":"TestVariable","id":972,"name":"session","type":1,"description":"","passableThroughUrl":"0","value":null,"test":182,"parentVariable":null,"globalId":972},{"class_name":"TestVariable","id":973,"name":"session_bank","type":1,"description":"","passableThroughUrl":"0","value":null,"test":182,"parentVariable":null,"globalId":973},{"class_name":"TestVariable","id":974,"name":"registration","type":0,"description":"","passableThroughUrl":"0","value":null,"test":182,"parentVariable":null,"globalId":974},{"class_name":"TestVariable","id":975,"name":"ecuid","type":0,"description":"<p>Email confirmation user id<\/p>\n","passableThroughUrl":"0","value":null,"test":182,"parentVariable":null,"globalId":975},{"class_name":"TestVariable","id":1204,"name":"title","type":0,"description":"","passableThroughUrl":"0","value":null,"test":182,"parentVariable":null,"globalId":1204},{"class_name":"TestVariable","id":1242,"name":"template_def","type":0,"description":"","passableThroughUrl":"0","value":"{\"layout\":\"default_layout\", \"header\":\"<p>Welcome.<\/p>\",\"footer\":\"\"}","test":182,"parentVariable":null,"globalId":1242},{"class_name":"TestVariable","id":1246,"name":"template_def","type":1,"description":"","passableThroughUrl":"0","value":null,"test":182,"parentVariable":null,"globalId":1246}],"logs":[],"sourceWizard":null,"sourceWizardObject":null,"updatedOn":"2016-03-23 20:55:22","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"","globalId":182,"owner":1,"groups":""},"testName":"source_start_session","updatedOn":"2016-03-22 20:40:10","updatedByName":"admin","globalId":49,"owner":1,"groups":""},"updatedOn":"2016-03-23 20:55:22","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"_concerto_core","globalId":199,"owner":1,"groups":""},{"class_name":"Test","id":207,"name":"create_template_definition","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":1,"code":"template_def = toJSON(list(layout=layout,header=header,footer=footer))","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":1225,"name":"out","type":2,"description":"","passableThroughUrl":"0","value":"0","test":207,"parentVariable":1220,"globalId":1225},{"class_name":"TestVariable","id":1226,"name":"layout","type":0,"description":"","passableThroughUrl":"0","value":"default_layout","test":207,"parentVariable":1221,"globalId":1226},{"class_name":"TestVariable","id":1227,"name":"header","type":0,"description":"","passableThroughUrl":"0","value":null,"test":207,"parentVariable":1222,"globalId":1227},{"class_name":"TestVariable","id":1228,"name":"footer","type":0,"description":"","passableThroughUrl":"0","value":null,"test":207,"parentVariable":1223,"globalId":1228},{"class_name":"TestVariable","id":1229,"name":"template_def","type":1,"description":"","passableThroughUrl":"0","value":null,"test":207,"parentVariable":1224,"globalId":1229}],"sourceWizard":50,"sourceWizardObject":{"class_name":"TestWizard","id":50,"name":"create_template_definition","description":"","accessibility":0,"protected":"1","archived":"0","steps":[{"class_name":"TestWizardStep","id":98,"title":"Template Properties","description":"","orderNum":0,"colsNum":0,"wizard":50,"params":[{"class_name":"TestWizardParam","id":396,"label":"Layout","description":"","hideCondition":"","type":5,"passableThroughUrl":"0","value":"default_layout","testVariable":1221,"name":"layout","wizardStep":98,"stepTitle":"Template Properties","order":0,"wizard":50,"definition":{"placeholder":0},"globalId":396},{"class_name":"TestWizardParam","id":397,"label":"Template header","description":"","hideCondition":"","type":2,"passableThroughUrl":"0","value":"","testVariable":1222,"name":"header","wizardStep":98,"stepTitle":"Template Properties","order":0,"wizard":50,"definition":{"placeholder":0},"globalId":397},{"class_name":"TestWizardParam","id":398,"label":"Template footer","description":"","hideCondition":"","type":2,"passableThroughUrl":"0","value":"","testVariable":1223,"name":"footer","wizardStep":98,"stepTitle":"Template Properties","order":0,"wizard":50,"definition":{"placeholder":0},"globalId":398}],"globalId":98}],"test":206,"testObject":{"class_name":"Test","id":206,"name":"source_create_template_definition","accessibility":0,"protected":"1","archived":"0","visibility":2,"type":0,"code":"template_def = toJSON(list(layout=layout,header=header,footer=footer))","slug":"ba071f1426f6491c8acb8844fd0b8633","resumable":"0","outdated":"0","description":"","variables":[{"class_name":"TestVariable","id":1220,"name":"out","type":2,"description":"","passableThroughUrl":"0","value":"0","test":206,"parentVariable":null,"globalId":1220},{"class_name":"TestVariable","id":1221,"name":"layout","type":0,"description":"","passableThroughUrl":"0","value":null,"test":206,"parentVariable":null,"globalId":1221},{"class_name":"TestVariable","id":1222,"name":"header","type":0,"description":"","passableThroughUrl":"0","value":null,"test":206,"parentVariable":null,"globalId":1222},{"class_name":"TestVariable","id":1223,"name":"footer","type":0,"description":"","passableThroughUrl":"0","value":null,"test":206,"parentVariable":null,"globalId":1223},{"class_name":"TestVariable","id":1224,"name":"template_def","type":1,"description":"","passableThroughUrl":"0","value":null,"test":206,"parentVariable":null,"globalId":1224}],"logs":[],"sourceWizard":null,"sourceWizardObject":null,"updatedOn":"2016-03-23 20:58:55","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"","globalId":206,"owner":null,"groups":""},"testName":"source_create_template_definition","updatedOn":"2016-03-22 19:47:02","updatedByName":"admin","globalId":50,"owner":null,"groups":""},"updatedOn":"2016-03-23 20:58:55","updatedByName":"admin","nodes":[],"nodesConnections":[],"tags":"_concerto_core","globalId":207,"owner":null,"groups":""},{"class_name":"DataTable","id":28,"name":"default_user_table","description":"","accessibility":0,"protected":"0","archived":"0","columns":[{"name":"id","type":"bigint","nullable":false},{"name":"login","type":"string","nullable":false},{"name":"password","type":"string","nullable":false},{"name":"encryption","type":"string","nullable":false},{"name":"test_id","type":"bigint","nullable":false},{"name":"email","type":"string","nullable":false},{"name":"enabled","type":"boolean","nullable":false}],"updatedOn":"2016-02-25 17:59:48","updatedByName":"","globalId":28,"owner":1,"groups":"","data":[]},{"class_name":"DataTable","id":29,"name":"default_session_table","description":"","accessibility":0,"protected":"0","archived":"0","columns":[{"name":"id","type":"bigint","nullable":false},{"name":"user_id","type":"bigint","nullable":false},{"name":"test_id","type":"bigint","nullable":false}],"updatedOn":"2016-02-25 17:59:48","updatedByName":"","globalId":29,"owner":1,"groups":"","data":[]},{"class_name":"DataTable","id":30,"name":"default_data_table","description":"","accessibility":0,"protected":"0","archived":"0","columns":[{"name":"id","type":"bigint","nullable":false},{"name":"session_id","type":"bigint","nullable":false},{"name":"name","type":"string","nullable":false},{"name":"value","type":"text","nullable":false}],"updatedOn":"2016-02-25 17:59:48","updatedByName":"","globalId":30,"owner":1,"groups":"","data":[]},{"class_name":"DataTable","id":31,"name":"default_questionnaire_item_table","description":"","accessibility":0,"protected":"0","archived":"0","columns":[{"name":"id","type":"bigint","nullable":false},{"name":"question","type":"text","nullable":false},{"name":"order","type":"bigint","nullable":false},{"name":"trait","type":"string","nullable":false},{"name":"reversed_score","type":"boolean","nullable":false},{"name":"test_id","type":"bigint","nullable":false}],"updatedOn":"2016-02-25 17:59:48","updatedByName":"","globalId":31,"owner":1,"groups":"","data":[]},{"class_name":"DataTable","id":32,"name":"default_questionnaire_response_table","description":"","accessibility":0,"protected":"0","archived":"0","columns":[{"name":"id","type":"bigint","nullable":false},{"name":"session_id","type":"bigint","nullable":false},{"name":"question_id","type":"bigint","nullable":false},{"name":"value","type":"string","nullable":false},{"name":"score","type":"integer","nullable":false},{"name":"trait","type":"string","nullable":false}],"updatedOn":"2016-02-25 17:59:48","updatedByName":"","globalId":32,"owner":1,"groups":"","data":[]},{"class_name":"DataTable","id":33,"name":"default_cat_item_table","description":"","accessibility":0,"protected":"0","archived":"0","columns":[{"name":"id","type":"bigint","nullable":false},{"name":"question","type":"text","nullable":false},{"name":"response_options","type":"text","nullable":false},{"name":"a","type":"float","nullable":false},{"name":"b","type":"float","nullable":false},{"name":"c","type":"float","nullable":false},{"name":"d","type":"float","nullable":false},{"name":"correct","type":"string","nullable":false},{"name":"test_id","type":"bigint","nullable":false},{"name":"cb_group","type":"string","nullable":false}],"updatedOn":"2016-02-25 17:59:48","updatedByName":"","globalId":33,"owner":1,"groups":"","data":[]},{"class_name":"DataTable","id":34,"name":"default_cat_response_table","description":"","accessibility":0,"protected":"0","archived":"0","columns":[{"name":"id","type":"bigint","nullable":false},{"name":"item_id","type":"bigint","nullable":false},{"name":"response","type":"string","nullable":false},{"name":"time_taken","type":"float","nullable":false},{"name":"session_id","type":"bigint","nullable":false},{"name":"correct","type":"boolean","nullable":false},{"name":"theta","type":"float","nullable":false},{"name":"sem","type":"float","nullable":false}],"updatedOn":"2016-02-25 17:59:48","updatedByName":"","globalId":34,"owner":1,"groups":"","data":[]},{"class_name":"DataTable","id":35,"name":"default_linear_item_table","description":"","accessibility":0,"protected":"0","archived":"0","columns":[{"name":"id","type":"bigint","nullable":false},{"name":"question","type":"text","nullable":false},{"name":"response_options","type":"text","nullable":false},{"name":"order","type":"bigint","nullable":false},{"name":"correct","type":"string","nullable":false},{"name":"trait","type":"string","nullable":false},{"name":"test_id","type":"bigint","nullable":false}],"updatedOn":"2016-02-25 17:59:48","updatedByName":"","globalId":35,"owner":1,"groups":"","data":[]},{"class_name":"DataTable","id":36,"name":"default_linear_response_table","description":"","accessibility":0,"protected":"0","archived":"0","columns":[{"name":"id","type":"bigint","nullable":false},{"name":"item_id","type":"bigint","nullable":false},{"name":"response","type":"string","nullable":false},{"name":"trait","type":"string","nullable":false},{"name":"correct","type":"boolean","nullable":false},{"name":"session_id","type":"bigint","nullable":false},{"name":"time_taken","type":"float","nullable":false}],"updatedOn":"2016-02-25 17:59:48","updatedByName":"","globalId":36,"owner":1,"groups":"","data":[]},{"class_name":"ViewTemplate","id":22,"name":"default_layout","description":"","accessibility":0,"protected":"1","archived":"0","head":"<link href=\"https:\/\/fonts.googleapis.com\/css?family=Roboto\" rel=\"stylesheet\" type=\"text\/css\" \/>","html":"<style type=\"text\/css\">body {\n  color: #2c343a;\n  font-family: \"Roboto\";\n  font-style: normal;\n  font-weight: 400;\n  background-color: #414d58;\n}\n  p {\n    margin: 10px 0 10px;\n  }\n  h1 {\n    color: #2c343a;\n    font-family: \"Roboto\";\n    font-size: 1.5em;\n    font-style: normal;\n    font-weight: 500;\n    margin: 0 auto;\n    padding-bottom: 10px;\n    padding-top: 10px;\n    width: 900px;\n  }\n  h2 {\n    color: #2c343a;\n    font-family: \"Roboto\";\n    font-size: 1.3em;\n    font-style: normal;\n    font-weight: 500;\n    margin-bottom: 10px;\n    margin-top: 0;\n  }\n  h3 {\n    color: #2c343a;\n    font-family: \"Roboto\";\n    font-size: 1.2em;\n    font-style: normal;\n    font-weight: 500;\n    margin-bottom: 10px;\n    margin-top: 0;\n  }\n  a:link {\n    color: #000000;\n    text-decoration: underline;\n  }\n  a:visited {\n    color: #000000;\n    text-decoration: underline;\n  }\n  a:hover {\n    color: #000000;\n    text-decoration: underline;\n  }\n  ol, ul, li {\n    padding-bottom: 10px;\n  }\n  table.decorated {\n    border: 1px solid #42424b;\n    border-collapse: collapse;\n    margin-bottom: 10px;\n  }\n  td, th {\n    padding: 5px;\n  }\n  th, table.decorated tr:first-child td {\n    background-color: #e8eff5;\n    border: 1px solid #42424b;\n  }\n  table.decorated td {\n    border: 1px solid #42424b;\n    text-align: left;\n    vertical-align: top;\n  }\n  button {\n    background-color: #b9d979;\n    border: 0 none;\n    color: #000000;\n    font-family: \"Roboto\";\n    font-size: 1.1em;\n    font-style: normal;\n    font-weight: 500;\n    margin-bottom: 10px;\n    margin-top: 10px;\n    padding: 7px 7px 7px 7px;\n  }\n  header {\n    background-color: #FFFFFF;\n    color: #2c343a;\n    margin: 0;\n    padding-top: 5px;\n    padding-bottom: 5px;\n  }\n  header > * {\n    margin: auto;\n    width: 900px;\n  }\n  footer {\n    background-color: #414d58;\n    color: #ffffff;\n    font-size: 0.8em;\n    margin: 20px 0 0 0;\n    padding-bottom: 10px;\n    padding-top: 10px;\n  }\n  footer > * {\n    margin: auto;\n    width: 900px;\n  }\n  footer a:link {\n    color: #ffffff;\n    text-decoration: underline;\n  }\n  footer a:visited {\n    color: #ffffff;\n    text-decoration: underline;\n  }\n  footer a:hover {\n    color: #ffffff;\n    text-decoration: underline;\n  }\n  img {\n    border: 0 none;\n  }\n  label {\n    font-weight: normal;\n    margin-bottom: 0;\n  }\n  .feature {\n    background-color: #e8eff5;\n    color: #000000;\n    margin-bottom: 20px;\n    margin-top: 20px;\n    padding: 20px;\n  }\n  #content {\n    margin: auto;\n    min-height: 600px;\n    width: 900px;\n  }\n  #subheader {\n    background-color: #b9d979;\n    margin-bottom: 20px;\n  }\n  #subheader_content {\n    width: 900px;\n    color: #2c343a;\n    font-family: \"Roboto\";\n    font-size: 1.5em;\n    font-style: normal;\n    font-weight: 500;\n    margin: 0 auto;\n    padding-bottom: 10px;\n    padding-top: 10px;\n    width: 900px;\n  }\n  #subheader_left {\n    text-align: left; \n    float: left;\n  }\n  #subheader_right {\n    text-align: right; \n    float: right;\n  }\n  #timer {\n    letter-spacing: 2px;\n  }\n  #cnrto_platform_blurb {\n    color: #b9d979;\n  }\n  #cnrto_platform_link {\n    color: #b9d979;\n  }\n  #cnrto_platform_link:hover {\n    text-decoration: none;\n  }\n  .warning {\n    margin: 5px;\n    padding: 5px;\n    background-color: #D9C978;\n    font-weight: bold;\n  }\n  .warning:empty {\n    display: none;\n  }\n  .clearing {\n    height: 1px;\n  }\n\n  \/* used in test sources - START *\/\n  .catResponseTable {\n    border: 0 none;\n    border-collapse: separate;\n    border-spacing: 0;\n  }\n  .catResponseTable td {\n    padding: 0 5px 0 0;\n  }\n  .catResponseSectionHorizontal {\n    float: left; \n    margin: 5px;\n    display: block;\n  }\n  .catResponseSectionVertical {\n    margin: 5px;\n  }\n  .catResponseGroup {\n    text-align: left;\n  }\n  .cat_question {\n    text-align: left;\n  }\n  .catResponseLabelCell p {\n    margin-top: 0px;\n    margin-bottom: 0px;\n  }\n  .catResponseButtonCell {\n    padding-right: 5px;\n  }\n\n  .questionnaireResponseCell {\n    width: 12%;\n    text-align: center;\n    border-left: 1px solid #d1d1d1;\n  }\n  .questionnaireHeaderCell {\n    text-align: center;\n    background-color: #b9d979;\n    font-weight: 500;\n  }\n  .questionnaireResponseTable {\n    border: 1px solid #d1d1d1;\n    margin-top: 20px;\n  }\n  .questionnaireResponseTable tr:nth-child(even) {\n    background-color: #f1e1ed;\n  }\n  .questionnaireResponseTable tr:nth-child(odd) {\n  }\n  .questionnaire_label {\n    width: 100%;\n    height: 100%;\n  }\n  #page_number {\n    display: inline;\n    padding-left: 10px;\n    padding-right: 10px;\n  } \n\n  #test_wrapper {\n    background-color: #FFFFFF;\n  }\n\n  \/* used in test sources - END *\/\n<\/style>\n<div id=\"test_wrapper\">\n<header>\n<div id=\"header_wrapper\">{{header}}<\/div>\n<\/header>\n\n<div id=\"subheader\">\n<div id=\"subheader_content\">\n<div id=\"subheader_left\">{{title}}<\/div>\n\n<div id=\"subheader_right\">\n<div id=\"timer\">{{timeLeft}}<\/div>\n<\/div>\n\n<div class=\"clearing\" style=\"clear:both;\">&nbsp;<\/div>\n<\/div>\n<\/div>\n\n<div id=\"content\">{{content}}\n<div id=\"actionContainer\">\n<div class=\"warning\">{{warning_msg}}<\/div>\n{{buttons}}<\/div>\n<\/div>\n\n<footer>\n<div id=\"footer_content\">\n<div>{{footer}}<\/div>\n<span id=\"cnrto_platform_blurb\">Created with <a href=\"http:\/\/www.concertoplatform.com\" id=\"cnrto_platform_link\" target=\"_blank\">Concerto Platform<\/a><\/span><\/div>\n<\/footer>\n<\/div>\n","updatedOn":"2016-03-23 15:29:05","updatedByName":"admin","globalId":22,"owner":null,"groups":""}]